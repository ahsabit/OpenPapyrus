 Format Specifiers

The following tables show the format specifiers that you can use in Visual Studio. 
Specifiers in bold are not supported for interop debugging with C++/CLI.

Specifier 	Format 	Original Watch Value 	Value Displayed
-----------------------------------------------------------
d 	decimal integer 	0x00000066 	102
o 	unsigned octal integer 	0x00000066 	000000000146
x
h 	hexadecimal integer 	102 	0xcccccccc

X
H 	hexadecimal integer 	102 	0xCCCCCCCC
c 	single character 	0x0065, c 	101 'e'
s 	const char* string 	<location> “hello world” 	"hello world"
sb 	const char* string 	<location> “hello world” 	hello world
s8 	const char* string 	<location> “hello world” 	"hello world"
s8b 	const char* string 	<location> “hello world” 	"hello world"
su 	const wchar_t* const

char16_t* string 	<location> L”hello world” 	L"hello world"

u"hello world"
sub 	const wchar_t* const

char16_t* string 	<location> L”hello world” 	hello world
bstr 	BSTR string 	<location> L”hello world” 	L”hello world”
s32 	UTF-32 string 	<location> U”hello world” 	U”hello world”
s32b 	UTF-32 string (no quotation marks) 	<location> U”hello world” 	hello world
en 	enum 	Saturday(6) 	Saturday
hv 	Pointer type - indicates that the pointer value being inspected is the result of the heap allocation of an array, for example, new int[3]. 	<location>{<first member>} 	<location>{<first member>, <second member>, …}
na 	Suppresses the memory address of a pointer to an object. 	<location>, {member=value…} 	{member=value…}
nd 	Displays only the base class information, ignoring derived classes 	(Shape*) square includes base class and derived class information 	Displays only base class information
hr 	HRESULT or Win32 error code. (The debugger now decodes HRESULTs automatically, so this specifier is not required in those cases. 	S_OK 	S_OK
wc 	Window class flag 	0x0010 	WC_DEFAULTCHAR
wm 	Windows message numbers 	16 	WM_CLOSE
! 	raw format, ignoring any data type views customizations 	<customized representation> 	4

==========================================
Pseudovariable 	Function
------------------------
$err 	Displays the last error value set with the function SetLastError. The value that is displayed represents what would be returned by the GetLastError function.
Use $err,hr to see the decoded form of this value. For example, if the last error was 3, the $err,hr would display ERROR_PATH_NOT_FOUND : The system cannot find the path specified.
$handles 	Displays the number of handles allocated in your application.
$vframe 	Displays the address of the current stack frame.
$tid 	Displays the thread ID for the current thread.
$env 	Displays the environment block in the string viewer.
$cmdline 	Displays the command line string that launched the program.
$pid 	Displays the process id.
$ registername
or
@ registername 	Displays the contents of the register registername.

Normally, you can display register contents just by entering the register name. The only time you need to use this syntax is when the register name overloads a variable name. If the register name is the same as a variable name in the current scope, the debugger interprets the name as a variable name. That's when $registername or @registername comes in handy.
$clk 	Displays the time in clock cycles.
$user 	Displays a structure with account information for the account running the application. For security reasons, the password information is not displayed.
$exceptionstack 	Displays the stack trace of the current Windows Runtime exception. $ exceptionstack works only in Store apps that are running on Windows 8.1 or later. $ exceptionstack is not supported for C++ and SHE exceptions
$ReturnValue 	Displays the return value of a .NET Framework method. See Examine return values of method calls
