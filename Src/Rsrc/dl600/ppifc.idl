// PPIFC.IDL
// This file was generated by DL600C.EXE from 'D:\Papyrus\Src\Rsrc\Dl600\ppifc.dl6'
//
import "unknwn.idl";
import "oaidl.idl";

interface ISupportErrorInfo;
interface IEnumTaggedString;
interface ILongList;
interface IStrAssocList;
interface ISFile;
interface ISDbfCreateFlds;
interface ISDbfRecord;
interface ISDbfTable;
interface IFtp;
interface INaturalTokenArray;
interface INaturalTokenRecognizer;
interface IPapyrusTextAnalyzer;
interface IPapyrusAmountList;
interface IPapyrusUtil;
interface IPapyrusSysJournal;
interface IPapyrusDL200Resolver;
interface IPapyrusObject;
interface IPapyrusQuot;
interface IPapyrusRtlPriceExtractor;
interface IPapyrusView;
interface IPapyrusSession;
interface IPapyrusObjOprKind;
interface IPapyrusObjCurrency;
interface IPapyrusObjGoods;
interface IPapyrusObjGoodsGroup;
interface ILocAddrStruc;
interface IPapyrusObjLocation;
interface IFias;
interface IPapyrusObjPerson;
interface ICompleteList;
interface IPapyrusBillPacket;
interface ILotList;
interface IPapyrusObjBill;
interface IPapyrusObjRegister;
interface IPapyrusPersonRelTypePacket;
interface IPapyrusObjPersonRelType;
interface IPapyrusObjSCard;
interface IPpyFilt_TrfrAnlz;
interface IPapyrusTrfrAnlz;
interface IAlcRepOpList;
interface IPpyFilt_CCheck;
interface IPpyFilt_Lot;
interface IPpyFilt_Goods;
interface IPpyFilt_GoodsStruc;
interface IPpyFilt_GoodsRest;
interface IPpyFilt_Bill;
interface IPpyFilt_GoodsOpAnlz;
interface IPpyFilt_TSession;
interface IPpyFilt_PrjTask;
interface IPpyFilt_Project;
interface IPpyFilt_OpGrouping;
interface IPpyFilt_DebtTrnovr;
interface IPpyFilt_LotOp;
interface IPrcssrAlcReport;
interface ICCheckPacket;
interface IPapyrusObjCCheck;
interface IUhttGoodsProcessor;

typedef struct sUUID {
	unsigned long d[4];
} sUUID;

typedef void * PPYOBJREC;

typedef void * PPYVIEWITEM;

typedef void * PPYVIEWTOTAL;

typedef void * PPYHWND;


typedef [v1_enum] enum _ISCodepage {
	icpANSI = 0,
	icpOEM = 1,
	icp437 = 437,
	icp737 = 737,
	icp850 = 850,
	icp852 = 852,
	icp857 = 857,
	icp861 = 861,
	icp865 = 865,
	icp866 = 866,
	icp932 = 932,
	icp936 = 936,
	icp950 = 950,
	icp1250 = 1250,
	icp1251 = 1251,
	icp1252 = 1252,
	icp1253 = 1253,
	icp1254 = 1254,
	icp1255 = 1255,
	icp1256 = 1256,
	icpUTF7 = 65000,
	icpUTF8 = 65001,
	icpUTF16 = 1200,
	icpUTF16BE = 1201,
	icpUTF32 = 12000,
	icpUTF32BE = 12001
} ISCodepage;

typedef [v1_enum] enum _IFileFormat {
	iffUnkn = 0,
	iffTxt = 1,
	iffJpeg = 2,
	iffPng = 3,
	iffTiff = 4,
	iffGif = 5,
	iffBmp = 6,
	iffIco = 7,
	iffCur = 8,
	iffSvg = 9,
	iffHtml = 10,
	iffXml = 11,
	iffIni = 12,
	iffTxtBomUTF8 = 13,
	iffTxtBomUTF16BE = 14,
	iffTxtBomUTF16LE = 15,
	iffTxtBomUTF32BE = 16,
	iffTxtBomUTF32LE = 17,
	iffTxtBomUTF7 = 18,
	iffTxtBomUTF1 = 19,
	iffTxtBomUTF_EBCDIC = 20,
	iffTxtBomSCSU = 21,
	iffTxtBomBOCU1 = 22,
	iffTxtBomGB18030 = 23,
	iffLatex = 24,
	iffPdf = 25,
	iffRtf = 26,
	iffMdb = 27,
	iffAccDb = 28,
	iffWbXml = 29,
	iffWmf = 30,
	iffEps = 31,
	iffHlp = 32,
	iffPpd = 33,
	iffPList = 34,
	iffMat = 35,
	iffPdb = 36,
	iffWcbffOld = 37,
	iffZip = 38,
	iffRar = 39,
	iffGz = 40,
	iffTar = 41,
	iffBz2 = 42,
	iffSevenZ = 43,
	iffXz = 44,
	iffZ = 45,
	iffCab = 46,
	iffArj = 47,
	iffLzh = 48,
	iffXar = 49,
	iffPmd = 50,
	iffDeb = 51,
	iffRpm = 52,
	iffChm = 53,
	iffIso = 54,
	iffVhd = 55,
	iffWim = 56,
	iffMdf = 57,
	iffNri = 58,
	iffSwf = 59,
	iffMar = 60,
	iffMkv = 61,
	iffAvi = 62,
	iffMp4 = 63,
	iffWmv = 64,
	iffMpg = 65,
	iffFlv = 66,
	iffMov = 67,
	iffF4f = 68,
	iffClass = 69,
	iffExe = 70,
	iffDll = 71,
	iffPcap = 72,
	iffPyo = 73,
	iffSo = 74,
	iffMo = 75,
	iffMui = 76,
	iffCat = 77,
	iffXsb = 78,
	iffKey = 79,
	iffSq3 = 80,
	iffQst = 81,
	iffCrx = 82,
	iffUtx = 83,
	iffRx3 = 84,
	iffKdc = 85,
	iffXnb = 86,
	iffBlp = 87,
	iffBig = 88,
	iffMdl = 89,
	iffSpr = 90,
	iffSfo = 91,
	iffMpq = 92,
	iffNes = 93,
	iffDmp = 94,
	iffDex = 95,
	iffGim = 96,
	iffAmxx = 97,
	iffSln = 98,
	iffVCProj = 99,
	iffAsm = 100,
	iffC = 101,
	iffCPP = 102,
	iffH = 103,
	iffPerl = 104,
	iffPhp = 105,
	iffJava = 106,
	iffPy = 107,
	iffUnixShell = 108,
	iffMsi = 109,
	iffTxtUtf8 = 110,
	iffTxtAscii = 111,
	iffLog = 112,
	iffProperties = 113,
	iffCss = 114,
	iffJavaScript = 115,
	iffJson = 116
} IFileFormat;

typedef struct SDateRange {
	DATE Low;
	DATE Upp;
} SDateRange;

typedef struct SIterCounter {
	long Count;
	long Total;
} SIterCounter;

typedef struct STaggedString {
	long Id;
	long ParentId;
	BSTR Text;
} STaggedString;

[
	object,
	uuid(079636EB-78C6-4FF7-AFE6-744BBE06C59F)
]
interface IEnumTaggedString : IUnknown {
	HRESULT __stdcall Next(long celt, [out] STaggedString * pItems, [out] long * pceltFetched);
	HRESULT __stdcall Skip(long celt);
	HRESULT __stdcall Reset();
	HRESULT __stdcall Clone([out] IEnumTaggedString ** ppenum);
};

[
	object,
	uuid(10375D3A-3E0D-4549-9F08-F0EBCCAA4F33)
]
interface ILongList : IUnknown {
	HRESULT __stdcall GetCount([out,retval] long * pRet);
	HRESULT __stdcall Get(long idx, [out,retval] long * pRet);
	HRESULT __stdcall Search(long val, [out,retval] long * pRet);
	HRESULT __stdcall BSearch(long val, [out,retval] long * pRet);
	HRESULT __stdcall Add(long val, [out,retval] long * pRet);
	HRESULT __stdcall AddUnique(long val, [out,retval] long * pRet);
	HRESULT __stdcall Remove(long idx, [out,retval] long * pRet);
	HRESULT __stdcall RemoveByVal(long val, [out,retval] long * pRet);
	HRESULT __stdcall Sort();
	HRESULT __stdcall SortAndUndup();
	HRESULT __stdcall Clear();
};

[
	object,
	uuid(397E38AB-E660-47DB-8CAB-4CFBCC8BE414)
]
interface IStrAssocList : IUnknown {
	HRESULT __stdcall GetCount([out,retval] long * pRet);
	HRESULT __stdcall Get(long pos, [out] STaggedString * pItem, [out,retval] long * pRet);
	HRESULT __stdcall SearchById(long id, [out] STaggedString * pItem, [out,retval] long * pRet);
	HRESULT __stdcall SearchByText(BSTR text, [out] STaggedString * pItem, [out,retval] long * pRet);
	HRESULT __stdcall SearchByTextPattern(BSTR text, [out] STaggedString * pItem, [out,retval] long * pRet);
	HRESULT __stdcall GetTextById(long id, [out,retval] BSTR * pRet);
	HRESULT __stdcall InitIteration();
	HRESULT __stdcall NextIteration([out] STaggedString * pItem, [out,retval] long * pRet);
	HRESULT __stdcall Clear();
	HRESULT __stdcall Add(long itemId, long parentId, BSTR text);
	HRESULT __stdcall Sort(long byText);
	HRESULT __stdcall Clone([out] IStrAssocList ** ppClone);
	HRESULT __stdcall CloneByParent(long parentId, [out] IStrAssocList ** ppClone, [out,retval] long * pRet);
};

typedef [v1_enum] enum _SFileMode {
	mRead = 1,
	mWrite = 2,
	mAppend = 3,
	mReadWrite = 4,
	mReadWriteTrunc = 5,
	mAppendRead = 6,
	mBinary = 256,
	mDenyRead = 512,
	mDenyWrite = 1024,
	mNoStd = 2048
} SFileMode;

[
	object,
	uuid(FB7234A1-C0C9-4CB1-A776-BB5757750CEC)
]
interface ISFile : IUnknown {
	HRESULT __stdcall Open([in] BSTR fileName, [in] SFileMode mode, [out,retval] long * pRet);
	HRESULT __stdcall Close([out,retval] long * pRet);
	HRESULT __stdcall IsValid([out,retval] long * pRet);
	HRESULT __stdcall WriteLine([in] BSTR buf, [out,retval] long * pRet);
	HRESULT __stdcall ReadLine([out] BSTR * pBuf, [out,retval] long * pRet);
	HRESULT __stdcall CalcSize([out] long * pLoWord, [out] long * pHiWord, [out,retval] long * pRet);
	HRESULT __stdcall WriteLine2([in] BSTR buf, [in] ISCodepage cp, [out,retval] long * pRet);
};

typedef [v1_enum] enum _SDbfFldType {
	dbftString = 1,
	dbftInt = 2,
	dbftLong = 3,
	dbftDouble = 4,
	dbftDate = 5,
	dbftLogical = 6
} SDbfFldType;

typedef struct SDbfCreateFld {
	BSTR Name;
	SDbfFldType Type;
	long Size;
	long Prec;
} SDbfCreateFld;

[
	object,
	uuid(20C750CC-C2D7-4D11-8981-A283B0CE2BA5)
]
interface ISDbfCreateFlds : IUnknown {
	HRESULT __stdcall Add([in] SDbfCreateFld * pFld, [out,retval] long * pRet);
	HRESULT __stdcall InitIteration([out,retval] long * pRet);
	HRESULT __stdcall NextIteration([out] SDbfCreateFld * pFld, [out,retval] long * pRet);
	HRESULT __stdcall GetCount([out,retval] long * pRet);
};

[
	object,
	uuid(C23022E3-55AA-46BE-BEEA-CE25B1CF2D14)
]
interface ISDbfRecord : IUnknown {
	HRESULT __stdcall Empty([out,retval] long * pRet);
	HRESULT __stdcall PutString(long fldN, BSTR val, [out,retval] long * pRet);
	HRESULT __stdcall PutDouble(long fldN, double val, [out,retval] long * pRet);
	HRESULT __stdcall PutLong(long fldN, long val, [out,retval] long * pRet);
	HRESULT __stdcall PutInt(long fldN, long val, [out,retval] long * pRet);
	HRESULT __stdcall PutDate(long fldN, DATE val, [out,retval] long * pRet);
	HRESULT __stdcall GetString(long fldN, [out,retval] BSTR * pRet);
	HRESULT __stdcall GetDouble(long fldN, [out,retval] double * pRet);
	HRESULT __stdcall GetLong(long fldN, [out,retval] long * pRet);
	HRESULT __stdcall GetInt(long fldN, [out,retval] long * pRet);
	HRESULT __stdcall GetDate(long fldN, [out,retval] DATE * pRet);
	HRESULT __stdcall GetFieldName(unsigned long fldN, [out,retval] BSTR * pRet);
	HRESULT __stdcall GetFieldNumber(BSTR pFldName, [out,retval] long * pRet);
	HRESULT __stdcall GetFieldType(unsigned long fldN, [out,retval] SDbfFldType * pRet);
};

[
	object,
	uuid(59866FFD-5395-4A15-9439-2C766B425C6E)
]
interface ISDbfTable : IUnknown {
	HRESULT __stdcall Open(BSTR fileName, [out,retval] long * pRet);
	HRESULT __stdcall IsOpened([out,retval] long * pRet);
	HRESULT __stdcall GetName([out,retval] BSTR * pRet);
	HRESULT __stdcall GetFieldName(unsigned long fldN, [out,retval] BSTR * pRet);
	HRESULT __stdcall GetFieldNumber(BSTR pFldName, [out,retval] long * pRet);
	HRESULT __stdcall GetNumRecs([out,retval] unsigned long * pRet);
	HRESULT __stdcall GetRecSize([out,retval] unsigned long * pRet);
	HRESULT __stdcall GetNumFields([out,retval] unsigned long * pRet);
	HRESULT __stdcall GetPosition([out,retval] unsigned long * pRet);
	HRESULT __stdcall Close([out,retval] long * pRet);
	HRESULT __stdcall Create(ISDbfCreateFlds * pFldsDescr, [out,retval] long * pRet);
	HRESULT __stdcall GoToRec(unsigned long num, [out,retval] long * pRet);
	HRESULT __stdcall Top([out,retval] long * pRet);
	HRESULT __stdcall Bottom([out,retval] long * pRet);
	HRESULT __stdcall Next([out,retval] long * pRet);
	HRESULT __stdcall Prev([out,retval] long * pRet);
	HRESULT __stdcall DeleteRec([out,retval] long * pRet);
	HRESULT __stdcall MakeRec([out,retval] ISDbfRecord ** pRet);
	HRESULT __stdcall GetRec(ISDbfRecord * pRec, [out,retval] long * pRet);
	HRESULT __stdcall AppendRec(ISDbfRecord * pRec, [out,retval] long * pRet);
	HRESULT __stdcall UpdateRec(ISDbfRecord * pRec, [out,retval] long * pRet);
	HRESULT __stdcall Flush([out,retval] long * pRet);
	HRESULT __stdcall InitBuffer([out,retval] long * pRet);
	HRESULT __stdcall ReleaseBuffer([out,retval] long * pRet);
	HRESULT __stdcall IsDeletedRec([out,retval] long * pRet);
	HRESULT __stdcall Create2(ISDbfCreateFlds * pFldsDescr, [in] ISCodepage cp, [out,retval] long * pRet);
	HRESULT __stdcall Create3(ISDbfCreateFlds * pFldsDescr, [in] ISCodepage cp, [in] long infoByte, [out,retval] long * pRet);
};

typedef [v1_enum] enum _SFtpAgent {
	ftpagExplorer = 0,
	ftpagNetscape = 1,
	ftpagOpera = 2
} SFtpAgent;

typedef [v1_enum] enum _SFtpAccessType {
	ftpatDirect = 0,
	ftpatPreconfig = 1,
	ftpatProxy = 2
} SFtpAccessType;

typedef struct SFtpConfig {
	SFtpAgent Agent;
	BSTR ProxyHost;
	BSTR ProxyPort;
	long MaxTries;
	SFtpAccessType AccessType;
	long Flags;
} SFtpConfig;

typedef [v1_enum] enum _SFtpAccountFlags {
	ftpafPassive = 2
} SFtpAccountFlags;

typedef struct SFtpAccount {
	BSTR User;
	BSTR Password;
	BSTR Host;
	long Port;
	SFtpAccountFlags Flags;
} SFtpAccount;

[
	object,
	uuid(DC61FC2A-917C-4E5D-90C7-92012020F0EB)
]
interface IFtp : IUnknown {
	HRESULT __stdcall Init([in] SFtpConfig * pCfg, [out,retval] long * pRet);
	HRESULT __stdcall Connect([in] SFtpAccount * pAcct, [out,retval] long * pRet);
	HRESULT __stdcall Get([in] BSTR pLocalPath, [in] BSTR pFtpPath, [out,retval] long * pRet);
	HRESULT __stdcall Put([in] BSTR pLocalPath, [in] BSTR pFtpPath, [out,retval] long * pRet);
	HRESULT __stdcall Delete([in] BSTR pFtpPath, [out,retval] long * pRet);
	HRESULT __stdcall GetFileList([in] BSTR pDir, [in] BSTR pMask, [out,retval] IStrAssocList ** pRet);
	HRESULT __stdcall CD([in] BSTR pFtpPath, [in] long isFullPath, [out,retval] long * pRet);
	HRESULT __stdcall DeleteWOCD([in] BSTR pFtpPath, [out,retval] long * pRet);
};

[
	uuid(A9013A3B-2FAB-4A44-9587-7DE4341CAA91),
	version(1.0)
]
library PapyrusInterfaceLib {
	importlib("STDOLE2.TLB");

	typedef [v1_enum] enum _SNTok {
		sntokUNKN = 0,
		sntokNATURALWORD = 1,
		sntokDIGITCODE = 2,
		sntokEAN13 = 3,
		sntokEAN8 = 4,
		sntokUPCA = 5,
		sntokUPCE = 6,
		sntokRU_INN = 7,
		sntokEGAISWARECODE = 8,
		sntokEGAISMARKCODE = 9,
		sntokLUHN = 10,
		sntokDIGLAT = 11,
		sntokGUID = 12,
		sntokEMAIL = 13,
		sntokPHONE = 14,
		sntokIMEI = 15,
		sntokIP4 = 16,
		sntokIP6 = 17,
		sntokMACADDR48 = 18,
		sntokDATE = 19,
		sntokTIME = 20,
		sntokSOFTWAREVER = 21,
		sntokCOLORHEX = 22,
		sntokREALNUMBER = 23,
		sntokINTNUMBER = 24,
		sntokPECENTAGE = 25,
		sntokNUMERIC_DOT = 26,
		sntokNUMERIC_COM = 27,
		sntokCHZN_GS1_GTIN = 28,
		sntokCHZN_SIGN_SGTIN = 29,
		sntokCHZN_SSCC = 30,
		sntokCHZN_CIGITEM = 31,
		sntokCHZN_CIGBLOCK = 32,
		sntokRU_OKPO = 33,
		sntokRU_SNILS = 34,
		sntokRU_BIC = 35,
		sntokRU_KPP = 36
	} SNTok;

	[
		object,
		uuid(428700C3-29F0-48BD-82D1-447BA86BCE4C)
	]
	interface INaturalTokenArray : IUnknown {
		HRESULT __stdcall Has([in] SNTok t, [out,retval] double * pRet);
	};

	[
		object,
		uuid(429799E3-CB3E-47CE-883F-A4E96235E7AB)
	]
	interface INaturalTokenRecognizer : IUnknown {
		HRESULT __stdcall Run([in] BSTR text, [in] long len, [out,retval] INaturalTokenArray ** pRet);
	};

	[
		object,
		uuid(C773ADA5-24E3-4BC1-B4A0-AACB0C6A20DD)
	]
	interface IPapyrusTextAnalyzer : IUnknown {
		HRESULT __stdcall Init([in] BSTR ruleFileName, [out,retval] long * pRet);
		HRESULT __stdcall ReplaceString([in] BSTR inputText, [out,retval] BSTR * pRet);
	};

	typedef struct PpySupplInterchangeConfig {
		long SupplID;
		long GoodsGrpID;
		long ExpendOp;
		long RcptOp;
		long SupplRetOp;
		long RetOp;
		long MovInOp;
		long MovOutOp;
		long OrderOp;
		long PriceQuotID;
		long DefUnitID;
		long ProtVer;
		BSTR ClientCode;
		BSTR EDIPrvdrSymb;
		BSTR RemoveAddr;
		BSTR AccsName;
		BSTR AccsPassw;
		BSTR TechSymbol;
		long SequenceID;
		long CliCodeTagID;
		long LocCodeTagID;
	} PpySupplInterchangeConfig;

	typedef [v1_enum] enum _PpyViewIdent {
		ppvCCheck = 1,
		ppvTrfrAnlz = 2,
		ppvLot = 3,
		ppvGoods = 4,
		ppvGoodsRest = 5,
		ppvBill = 6,
		ppvGoodsOpAnlz = 7,
		ppvTSession = 8,
		ppvPrjTask = 9,
		ppvProject = 10,
		ppvOpGrouping = 11,
		ppvDebtTrnovr = 12,
		ppvLotOp = 13,
		ppvGoodsStruc = 14
	} PpyViewIdent;

	typedef [v1_enum] enum _PpyObjectIdent {
		ppoUnit = 5,
		ppoOprKind = 12,
		ppoAccSheet = 13,
		ppoCashNode = 17,
		ppoQuotKind = 29,
		ppoTag = 31,
		ppoGoodsTax = 32,
		ppoCurrency = 34,
		ppoGoodsClass = 37,
		ppoSCardSeries = 42,
		ppoStyloPalm = 43,
		ppoTranpModel = 47,
		ppoPersonCategory = 50,
		ppoSalCharge = 56,
		ppoDebtDim = 64,
		ppoPerson = 1004,
		ppoArticle = 1006,
		ppoGoodsGroup = 1008,
		ppoGoods = 1009,
		ppoLocation = 1010,
		ppoBill = 1011,
		ppoQCert = 1013,
		ppoStaff = 1021,
		ppoLot = 1022,
		ppoTransport = 1028,
		ppoCCheck = 1032,
		ppoProject = 1033,
		ppoPrjTask = 1036,
		ppoProcessor = 1037,
		ppoTSession = 1039,
		ppoWorld = 1043,
		ppoRegister = 1044,
		ppoPersonRelType = 1045,
		ppoBrand = 1046,
		ppoSCard = 1031
	} PpyObjectIdent;

	typedef [v1_enum] enum _PpyAmountType {
		ppamtMain = 1,
		ppamtBuying = 2,
		ppamtSelling = 3,
		ppamtDiscount = 4,
		ppamtPayment = 5,
		ppamtPctDis = 6,
		ppamtVaTax = 7,
		ppamtExcsize = 8,
		ppamtCVat = 9,
		ppamtPVat = 10,
		ppamtManDis = 11,
		ppamtRentPrd = 12,
		ppamtSalesTax = 13,
		ppamtCRateE = 14,
		ppamtCExcise = 15,
		ppamtTransitRate = 16,
		ppamtFixPayment = 17,
		ppamtCS_AggrSum = 18,
		ppamtCS_AggrRest = 19,
		ppamtCSTax = 20,
		ppamtAssetExpl = 21,
		ppamtAdlnMain = 41
	} PpyAmountType;

	typedef struct PpyAmountEntry {
		PpyAmountType AmtTypeID;
		long CurID;
		double Amt;
	} PpyAmountEntry;

	[
		object,
		uuid(FF62A2FA-4553-4257-886D-5C1F5649F8BD)
	]
	interface IPapyrusAmountList : IUnknown {
		HRESULT __stdcall GetCount([out,retval] long * pRet);
		HRESULT __stdcall InitIteration([out,retval] long * pRet);
		HRESULT __stdcall NextIteration([out] PpyAmountEntry * pEntry, [out,retval] long * pRet);
		HRESULT __stdcall Add([in] PpyAmountEntry * pEntry, [out,retval] long * pRet);
		HRESULT __stdcall RemoveByPos([in] long pos, [out,retval] long * pRet);
		HRESULT __stdcall Remove([in] PpyAmountType amtTypeID, long curID, [out,retval] long * pRet);
		HRESULT __stdcall Get([in] PpyAmountType amtTypeID, long curID, [out,retval] double * pRet);
		HRESULT __stdcall GetByPos(long pos, [out] PpyAmountEntry * pItem, [out,retval] long * pRet);
		HRESULT __stdcall Clear();
	};

	typedef [v1_enum] enum _PpyIniParam {
		SpecEncodeSymbs = 162,
		BaltikaWoTareBeerGGrpCode = 187
	} PpyIniParam;

	typedef [v1_enum] enum _PpyIniSection {
		ppisPath = 0,
		ppisDbName = 1,
		ppisBackup = 2,
		ppisSystem = 3,
		ppisRecover = 4,
		ppisConfig = 5,
		ppisImpPerson = 6,
		ppisImpGoodsGroup = 7,
		ppisImpGoods = 8,
		ppisImpQuot = 9,
		ppisPriceList = 10,
		ppisClientBank = 11,
		ppisImpBank = 12,
		ppisServer = 13,
		ppisImpSpecSer = 14,
		ppisImpCountry = 15,
		ppisImpScard = 16,
		ppisImpSuppl = 17,
		ppisDriveMapping = 18,
		ppisImpKladrStatus = 19,
		ppisImpKladrStreet = 20,
		ppisImpKladr = 21
	} PpyIniSection;

	typedef [v1_enum] enum _PpyOTagType {
		ottypGroup = 0,
		ottypBool = 1,
		ottypString = 2,
		ottypNumber = 3,
		ottypEnum = 4,
		ottypInt = 5,
		ottypObjLink = 6,
		ottypDate = 7,
		ottypGUID = 8,
		ottypImage = 9,
		ottypTimeStamp = 10
	} PpyOTagType;

	typedef struct PpyTagValue {
		long TagID;
		long ObjType;
		long ObjID;
		PpyOTagType TagType;
		long VInt;
		double VReal;
		BSTR VStr;
		DATE VDt;
		DATE VTm;
		BSTR VSymb;
	} PpyTagValue;

	typedef [v1_enum] enum _PpyDateFormat {
		datfDefault = 0,
		datfAmerican = 1,
		datfANSI = 2,
		datfBritish = 3,
		datfFrench = 4,
		datfGerman = 5,
		datfItalian = 6,
		datfJapan = 7,
		datfUSA = 8,
		datfMDY = 9,
		datfDMY = 10,
		datfYMD = 11,
		datfSQL = 12,
		datfInternet = 13,
		datfISO8601 = 14
	} PpyDateFormat;

	[
		object,
		uuid(B1648F94-A46F-42D7-9285-B874135D46C9)
	]
	interface IPapyrusUtil : IUnknown {
		HRESULT __stdcall StrToDateRange(BSTR str, [out,retval] SDateRange * pRet);
		HRESULT __stdcall DateRangeToStr(DATE low, DATE upp, [out,retval] BSTR * pRet);
		HRESULT __stdcall ToChar(BSTR buf, [out,retval] BSTR * pRet);
		HRESULT __stdcall ToOem(BSTR buf, [out,retval] BSTR * pRet);
		HRESULT __stdcall UTF8ToOem(BSTR buf, [out,retval] BSTR * pRet);
		HRESULT __stdcall UTF8ToChar(BSTR buf, [out,retval] BSTR * pRet);
		HRESULT __stdcall ToLong(BSTR buf, [out,retval] long * pRet);
		HRESULT __stdcall ToDouble(BSTR buf, [out,retval] double * pRet);
		HRESULT __stdcall CheckFlag(long flags, long flag, [out,retval] long * pRet);
		HRESULT __stdcall GetSellAccSheet([out,retval] long * pRet);
		HRESULT __stdcall GetAgentAccSheet([out,retval] long * pRet);
		HRESULT __stdcall GetSupplAccSheet([out,retval] long * pRet);
		HRESULT __stdcall ObjectToPerson(long articleID, [out,retval] long * pRet);
		HRESULT __stdcall PersonToObject(long personID, long accSheetID, [out,retval] long * pRet);
		HRESULT __stdcall ObjectToWarehouse(long articleID, [out,retval] long * pRet);
		HRESULT __stdcall WarehouseToObject(long locID, [out,retval] long * pRet);
		HRESULT __stdcall GetObjectName(PpyObjectIdent objType, long objID, [out,retval] BSTR * pRet);
		HRESULT __stdcall Spawnl(long wait, BSTR path, BSTR params, [out,retval] long * pRet);
		HRESULT __stdcall RemoveFile(BSTR fileName, [out,retval] long * pRet);
		HRESULT __stdcall IsFileExists(BSTR fileName, [out,retval] long * pRet);
		HRESULT __stdcall EncodeString([in] BSTR rSrc, [in] BSTR rEncodeSymbs, long decode, [out,retval] BSTR * pRet);
		HRESULT __stdcall ReadPPIniParam(PpyIniSection section, PpyIniParam param, [out,retval] BSTR * pRet);
		HRESULT __stdcall GetNativeCountry([out,retval] long * pRet);
		HRESULT __stdcall MakeGUID([out,retval] BSTR * pRet);
		HRESULT __stdcall SendMail([in] long acctID, [in] BSTR rSubject, [in] BSTR rMessage, [in] BSTR rMail, [in] IStrAssocList * pAttachments, [out,retval] long * pRet);
		HRESULT __stdcall GetTagValue([in] PpyObjectIdent objType, [in] long objID, [in] long tagID, [out] BSTR * pValue, [out,retval] long * pRet);
		HRESULT __stdcall PutTagValue([in] PpyObjectIdent objType, [in] long objID, [in] long tagID, [in] BSTR rValue, [out,retval] long * pRet);
		HRESULT __stdcall DiagBarcode([in] BSTR inputBarcode, [out] long * pStd, [out] BSTR * pDiagText, [out] BSTR * pOutputBarcode, [out,retval] long * pRet);
		HRESULT __stdcall RoshenMakeHash([in] BSTR rBuf, [out] BSTR * pHashCode, [out,retval] long * pRet);
		HRESULT __stdcall GetTagValueExt([in] PpyObjectIdent objType, [in] long objID, [in] long tagID, [out] PpyTagValue * pValue, [out,retval] long * pRet);
		HRESULT __stdcall SetConfigParam([in] BSTR param, [in] BSTR value, [out,retval] long * pRet);
		HRESULT __stdcall ReadPPIniParamS(PpyIniSection section, [in] BSTR param, [out,retval] BSTR * pRet);
		HRESULT __stdcall GetSupplInterchangeConfig([in] long supplID, [out] PpySupplInterchangeConfig * pValue, [out,retval] long * pRet);
		HRESULT __stdcall GetTagGUID([in] PpyObjectIdent objType, [in] long objID, [in] long tagID, [out] BSTR * pValue, [out,retval] long * pRet);
		HRESULT __stdcall UniformFileTransm([in] BSTR srcUrl, [in] BSTR destUrl, [in] long flags, [in] IFileFormat iff, [in] BSTR accsName, [in] BSTR accsPassw, [out,retval] long * pRet);
		HRESULT __stdcall StrToDate([in] BSTR str, PpyDateFormat fmt, [out,retval] DATE * pRet);
		HRESULT __stdcall SearchObjectsByTagStr([in] PpyObjectIdent objType, [in] long tagID, [in] BSTR pattern, [out,retval] ILongList ** pRet);
		HRESULT __stdcall SearchObjectsByTagStrExactly([in] PpyObjectIdent objType, [in] long tagID, [in] BSTR pattern, [out,retval] ILongList ** pRet);
		HRESULT __stdcall GetSupplInterchangeLocList([in] long supplID, [out,retval] ILongList ** pRet);
		HRESULT __stdcall IsIntrOp([in] long opID, [out,retval] long * pRet);
		HRESULT __stdcall IsExpendOp([in] long opID, [out,retval] long * pRet);
		HRESULT __stdcall UniformFileTransmW([in] BSTR srcUrl, [in] BSTR destUrl, [in] long flags, [in] IFileFormat iff, [in] BSTR accsName, [in] BSTR accsPassw, [out,retval] long * pRet);
	};

	typedef [v1_enum] enum _PpyTagReserved {
		pptagLotCLB = 1,
		pptagLotSerial = 2,
		pptagFloatSerial = 3,
		pptagPersonPosRights = 4,
		pptagPersonDOB = 5,
		pptagBillCreateDtm = 6,
		pptagBillCreateDtmEnd = 7,
		pptagBillGpsCoord = 8,
		pptagBillGpsCoordEnd = 9,
		pptagGuaGoodsRights = 10,
		pptagGuaPersonRights = 11,
		pptagGuaSCardRights = 12,
		pptagGuaSCardPrefix = 13,
		pptagLogManufTime = 14,
		pptagGuaFilesRights = 15,
		pptagBillUUID = 16,
		pptagGoodsKeywords = 17,
		pptagBillKeywords = 18,
		pptagGuaPGGTAG = 19,
		pptagWorkbookKeywords = 20,
		pptagWorkbookKwsyn = 21,
		pptagWorkbookKwloc = 22,
		pptagCCheckJsUUID = 23,
		pptagGuaSaLocRights = 24,
		pptagGuaWbRights = 25,
		pptagWorkbookLongcode = 26,
		pptagBillAutocreation = 27,
		pptagBillOutercode = 28,
		pptagBillOuterdate = 29,
		pptagPersonENalogDest = 30
	} PpyTagReserved;

	[
		object,
		uuid(FDF3AE23-82A3-468A-94AB-35B672987CF3)
	]
	interface IPapyrusSysJournal : IUnknown {
		HRESULT __stdcall GetCreatedObjectListSince([in] PpyObjectIdent objType, [in] DATE since, [out,retval] ILongList ** pRet);
		HRESULT __stdcall GetModifiedObjectListSince([in] PpyObjectIdent objType, [in] DATE since, [out,retval] ILongList ** pRet);
	};

	[
		object,
		uuid(40359C4A-F383-4E04-A414-A57562FDD527)
	]
	interface IPapyrusDL200Resolver : IUnknown {
		HRESULT __stdcall SetPeriod(SDateRange * pPeriod, [out,retval] long * pRet);
		HRESULT __stdcall Resolve(BSTR rExpression, [out,retval] double * pRet);
		HRESULT __stdcall ResolveName(BSTR rMetaVar, [out,retval] BSTR * pRet);
	};

	[
		object,
		uuid(C81A81E9-B116-4B5E-BE06-4688BFCC5D9A)
	]
	interface IPapyrusObject : IUnknown {
		HRESULT __stdcall Search(long id, [out] PPYOBJREC rec, [out,retval] long * pRet);
		HRESULT __stdcall SearchByName(BSTR text, long kind, long extraParam, [out] PPYOBJREC rec, [out,retval] long * pRet);
		HRESULT __stdcall GetName(long id, [out,retval] BSTR * pRet);
		HRESULT __stdcall GetSelector(long extraParam, [out,retval] IStrAssocList ** pRet);
		HRESULT __stdcall Create(PPYOBJREC pRec, long flags, [out] long * pID, [out,retval] long * pRet);
		HRESULT __stdcall Update(long id, long flags, [in] PPYOBJREC rec, [out,retval] long * pRet);
	};

	typedef [v1_enum] enum _PpyQuotCat {
		qcUndef = 0,
		qcQuot = 1,
		qcSupplDeal = 2,
		qcMatrix = 3
	} PpyQuotCat;

	typedef [v1_enum] enum _PpyQuotValTag {
		qvtUndef = 0,
		qvtAbs = 1,
		qvtPctCost = 2,
		qvtPctPrice = 3,
		qvtPctAdd = 4,
		qvtPctBase = 5,
		qvtDisabled = 6
	} PpyQuotValTag;

	typedef struct SPpyI_QuotIdent {
		PpyQuotCat Cat;
		long LocID;
		long QuotKindID;
		long CurID;
		long ArID;
	} SPpyI_QuotIdent;

	typedef struct SPpyI_Quot {
		PpyQuotCat Cat;
		long LocID;
		long QuotKindID;
		long CurID;
		long ArID;
		PpyQuotValTag Tag;
		double Val;
	} SPpyI_Quot;

	typedef struct SPpyI_SupplDeal {
		double Val;
		double UppBound;
		double LowBound;
		long Disabled;
	} SPpyI_SupplDeal;

	[
		object,
		uuid(BCC3ED25-AA5E-4559-8E62-23276D830BEC)
	]
	interface IPapyrusQuot : IUnknown {
		[propget]
		HRESULT __stdcall MatrixQuotKind([out,retval] long * pRet);
		[propget]
		HRESULT __stdcall SupplDealQuotKind([out,retval] long * pRet);
		[propget]
		HRESULT __stdcall SupplDealLowBoundQuotKind([out,retval] long * pRet);
		[propget]
		HRESULT __stdcall SupplDealUppBoundQuotKind([out,retval] long * pRet);
		HRESULT __stdcall SetQuot(long goodsID, SPpyI_Quot * pQuot, [out,retval] long * pRet);
		HRESULT __stdcall GetQuot(SPpyI_QuotIdent * pIdent, long goodsID, [out,retval] SPpyI_Quot * pRet);
		HRESULT __stdcall QuotValToString(SPpyI_Quot * pQuot, [out,retval] BSTR * pRet);
		HRESULT __stdcall StringToQuotVal(BSTR str, [out,retval] SPpyI_Quot * pRet);
		HRESULT __stdcall GetQuotVal(SPpyI_QuotIdent * pIdent, long goodsID, double cost, double price, [out,retval] double * pRet);
		HRESULT __stdcall GetMatrix(long goodsID, long locID, [out,retval] long * pRet);
		HRESULT __stdcall SetMatrix(long goodsID, long locID, long val, [out,retval] long * pRet);
		HRESULT __stdcall GetSupplDeal(long goodsID, long locID, long curID, long supplID, [out,retval] SPpyI_SupplDeal * pRet);
		HRESULT __stdcall SetSupplDeal(long goodsID, long locID, long curID, long supplID, [in] SPpyI_SupplDeal * pDeal, [out,retval] long * pRet);
	};

	typedef [v1_enum] enum _PpyRtlPriceFlags {
		rtlpfPriceByQuot = 1,
		rtlpfUseQuotWTime = 2,
		rtlpfGetCurPrice = 4
	} PpyRtlPriceFlags;

	typedef struct SPpyI_RtlExtr {
		double Cost;
		double Price;
		double ExtPrice;
		DATE CurLotDate;
		DATE Expiry;
	} SPpyI_RtlExtr;

	[
		object,
		uuid(D2C1AA1A-A61F-4218-BD1B-96118FA1E1A2)
	]
	interface IPapyrusRtlPriceExtractor : IUnknown {
		HRESULT __stdcall Init(long locID, long extQuotKindID, PpyRtlPriceFlags flags, [out,retval] long * pRet);
		HRESULT __stdcall GetPrice(long goodsID, SPpyI_RtlExtr * pItem, [out,retval] long * pRet);
	};

	[
		object,
		uuid(C06B14CA-32C5-43A5-BFEC-ADCDFB59FD9A)
	]
	interface IPapyrusView : IUnknown {
		HRESULT __stdcall CreateFilt(long param, [out,retval] IUnknown ** pRet);
		HRESULT __stdcall Init(IUnknown * pFilt, [out,retval] long * pRet);
		HRESULT __stdcall InitIteration(long order, [out,retval] long * pRet);
		HRESULT __stdcall NextIteration([out] PPYVIEWITEM item, [out,retval] long * pRet);
		HRESULT __stdcall GetIterCounter([out,retval] SIterCounter * pRet);
		HRESULT __stdcall GetTotal([out] PPYVIEWTOTAL total, [out,retval] long * pRet);
	};

	typedef struct SPpySessionInfo {
		long SessID;
		long Flags;
		long MainOrgID;
		long DbDivID;
		long UserID;
		BSTR DbName;
		BSTR DbSymb;
		BSTR SysPath;
		BSTR DbPath;
		long MainOrgDirector;
		long MainOrgAccountant;
	} SPpySessionInfo;

	typedef struct SPpyDatabaseInfo {
		long ID;
		long Flags;
		long Type;
		BSTR Symb;
		BSTR Name;
		BSTR Path;
		BSTR SysPath;
	} SPpyDatabaseInfo;

	typedef [v1_enum] enum _PpySpecClassIdent {
		spclsUtil = 1,
		spclsRtlPriceExtr = 2,
		spclsDL200Resolver = 3,
		spclsQuotation = 4,
		spclsAlcRepOpList = 5,
		spclsPrcssrAlcReport = 6,
		spclsCCheck = 7
	} PpySpecClassIdent;

	[
		object,
		uuid(5C1F8014-504E-4C9F-9CE7-89B50DD4C39F)
	]
	interface IPapyrusSession : IUnknown {
		HRESULT __stdcall GetDatabaseList(long nameKind, [out,retval] IStrAssocList ** pRet);
		HRESULT __stdcall GetDatabaseInfo(long id, SPpyDatabaseInfo * pInfo, [out,retval] long * pRet);
		HRESULT __stdcall Login(BSTR dbName, BSTR userName, BSTR password, [out,retval] long * pRet);
		HRESULT __stdcall Logout([out,retval] long * pRet);
		HRESULT __stdcall GetObjectTitle(PpyObjectIdent objType, [out,retval] BSTR * pRet);
		HRESULT __stdcall CreateObject(PpyObjectIdent objType, [out,retval] IPapyrusObject ** pRet);
		HRESULT __stdcall CreateView(PpyViewIdent viewID, [out,retval] IPapyrusView ** pRet);
		HRESULT __stdcall CreateUtil([out,retval] IPapyrusUtil ** pRet);
		HRESULT __stdcall CreateSpecClass(PpySpecClassIdent clsType, [out,retval] IUnknown ** pRet);
		HRESULT __stdcall GetStatusInfo([out] SPpySessionInfo * pInfo, [out,retval] long * pRet);
		HRESULT __stdcall LoginDialog([in] PPYHWND pParent, [in,out] BSTR * pDbName, [in,out] BSTR * pUserName, [in,out] BSTR * pPassword, [in] long editOnly, [out,retval] long * pRet);
	};

	typedef [v1_enum] enum _PpyVSubstGrpGoods {
		vsggNone = 0,
		vsggGeneric = 1,
		vsggGroup = 2,
		vsggManuf = 3,
		vsggDimX = 4,
		vsggDimY = 5,
		vsggDimZ = 6,
		vsggClsKind = 7,
		vsggClsGrade = 8,
		vsggClsAddObj = 9,
		vsggClsKind_Grade = 10,
		vsggSuppl = 11,
		vsggBrand = 12,
		vsggClsKind_Grade_AddObj = 13,
		vsggClsKind_AddObj_Grade = 14,
		vsggSupplAgent = 15,
		vsggLocation = 16,
		vsggDimW = 17
	} PpyVSubstGrpGoods;

	typedef [v1_enum] enum _PpyVSubstGrpPerson {
		vsgpNone = 0,
		vsgpCity = 1,
		vsgpRegion = 2,
		vsgpCountry = 3,
		vsgpCategory = 4,
		vsgpBillAgent = 5,
		vsgpVesselAgent = 6,
		vsgpFirstRelation = 10000
	} PpyVSubstGrpPerson;

	typedef [v1_enum] enum _PpyVSubstGrpDate {
		vsgdNone = 0,
		vsgdWeek = 1,
		vsgdMonth = 2,
		vsgdQuart = 3,
		vsgdYear = 4
	} PpyVSubstGrpDate;

	typedef [v1_enum] enum _PpyVSubstGrpPersonEvent {
		vsgpeNone = 0,
		vsgpeOp = 1,
		vsgpePerson = 2,
		vsgpeCntrAg = 3
	} PpyVSubstGrpPersonEvent;

	typedef [v1_enum] enum _PpyVSubstGrpBill {
		vsgbNone = 0,
		vsgbOp = 1,
		vsgbDate = 2,
		vsgbLocation = 3,
		vsgbObject = 4,
		vsgbObject2 = 5,
		vsgbStatus = 6,
		vsgbAgent = 7,
		vsgbPayer = 8,
		vsgbDebtDim = 9
	} PpyVSubstGrpBill;

	typedef struct SPpyO_Tag {
		long RecTag;
		long ID;
		long Flags;
		long LinkObjGrp;
		long TagEnumID;
		PpyOTagType TagDataType;
		long ObjTypeID;
		long TagGroupID;
		BSTR Name;
		BSTR Symb;
	} SPpyO_Tag;

	typedef struct SPpyO_AccSheet {
		long RecTag;
		long ID;
		long BinArID;
		long CodeRegTypeID;
		long Flags;
		long Assoc;
		long ObjGroup;
		long Reserve[4];
		BSTR Name;
	} SPpyO_AccSheet;

	typedef [v1_enum] enum _PpyOUnitFlags {
		SI = 1,
		Phisical = 2,
		Trade = 4,
		Hide = 8,
		IntVal = 16
	} PpyOUnitFlags;

	typedef struct SPpyO_Unit {
		long RecTag;
		long ID;
		BSTR Name;
		BSTR Abbr;
		double BaseRatio;
		PpyOUnitFlags Flags;
		long BaseUnitID;
	} SPpyO_Unit;

	typedef [v1_enum] enum _PpyOOprKindFlags {
		opkfNeedPayment = 1,
		opkfGReceipt = 2,
		opkfGExpend = 4,
		opkfBuying = 8,
		opkfSelling = 16,
		opkfNoupdLotRest = 32,
		opkfAdvAcc = 64,
		opkfProfitable = 128,
		opkfOnOrder = 256,
		opkfFreight = 512,
		opkfPckgMounting = 1024,
		opkfOrdExstOnly = 2048,
		opkfOrdReserve = 4096,
		opkfCalcSTaxes = 8192,
		opkfChargeNegPaym = 16384,
		opkfAutoWL = 32768,
		opkfAttachFiles = 65536,
		opkfUsePayer = 131072,
		opkfOrderByLoc = 262144,
		opkfOutBalacCTurn = 1048576,
		opkfExtAccturn = 2097152,
		opkfExtAmtList = 4194304,
		opkfRent = 16777216,
		opkfNeedAck = 33554432,
		opkfNoCalcTiOrd = 67108864,
		opkfReckon = 134217728,
		opkfBanking = 268435456,
		opkfPassive = 536870912,
		opkfCurTransit = 1073741824,
		opkfGoods = 6
	} PpyOOprKindFlags;

	typedef [v1_enum] enum _PpyOOprKindPrnFlags {
		opkfPrtIncInvc = 1,
		opkfPrtNegInvc = 2,
		opkfPrtCheck = 4,
		opkfPrtCheckTi = 8,
		opkfPrtSrvAct = 16,
		opkfPrtBuying = 32,
		opkfPrtSelling = 64,
		opkfPrtExtObj2Obj = 128,
		opkfPrtQCert = 512,
		opkfPrtNBillN = 1024,
		opkfPrtVaTax = 2048,
		opkfPrtInvoice = 4096,
		opkfPrtQCG = 16384,
		opkfPrtShrtOrg = 65536,
		opkfPrtCashOrd = 524288,
		opkfPrtSelPrice = 1048576,
		opkfPrtNDiscnt = 8388608,
		opkfPrtPayPlan = 33554432,
		opkfPrtLading = 67108864,
		opkfPrtMergeTi = 134217728,
		opkfPrtPLabel = 268435456,
		opkfPrtBCodeList = 536870912,
		opkfPrtQCertList = 1073741824
	} PpyOOprKindPrnFlags;

	typedef [v1_enum] enum _PpyOOprKindSubType {
		opsubtCommon = 0,
		opsubtAdvanceRep = 1,
		opsubtRegister = 2,
		opsubtAssetRcv = 3,
		opsubtAssetExpl = 4,
		opsubtWarrant = 5,
		opsubtAssetModif = 6,
		opsubtDebtInvent = 7,
		opsubtTradePlan = 8
	} PpyOOprKindSubType;

	typedef [v1_enum] enum _PpyOOprKindType {
		ppoptAccturn = 1,
		ppoptGoodsReceipt = 2,
		ppoptGoodsExpend = 3,
		ppoptPayment = 4,
		ppoptGoodsReturn = 5,
		ppoptGoodsReval = 6,
		ppoptGoodsOrder = 7,
		ppoptGoodsModif = 8,
		ppoptInventory = 9,
		ppoptCharge = 10,
		ppoptGeneric = 11,
		ppoptGoodsAck = 12,
		ppoptPool = 13,
		ppoptCashSess = 14,
		ppoptDraftReceipt = 15,
		ppoptDraftExpend = 16,
		ppoptWarehouse = 17,
		ppoptExternal = 18,
		ppoptAgreement = 19,
		ppoptCorrection = 20,
		ppoptDraftTransit = 21,
		ppoptDraftQuotReq = 22
	} PpyOOprKindType;

	typedef struct SPpyO_OprKind {
		long RecTag;
		long Tag;
		long ID;
		BSTR Name;
		long Rank;
		long LinkOpID;
		long AccSheet2ID;
		long OpCounterID;
		PpyOOprKindPrnFlags PrnFlags;
		long DefLocID;
		long PrnOrder;
		PpyOOprKindSubType SubType;
		PpyOOprKindFlags Flags;
		PpyOOprKindType OpTypeID;
		long AccSheetID;
	} SPpyO_OprKind;

	typedef [v1_enum] enum _PpyOInvOpFlags {
		invopfCostNominal = 1,
		invopfZeroDefault = 2,
		invopfWroffWoDscnt = 4,
		invopfUsePacks = 8,
		invopfSelGoodsByName = 16,
		invopfUseAnotherLocLots = 32,
		invopfInvByClient = 64,
		invopfAccelAddItems = 128,
		invopfAsset = 256
	} PpyOInvOpFlags;

	typedef [v1_enum] enum _PpyOInvOpAmountCalcMethod {
		oacmLIFO = 0,
		ooeacmFIFO = 1,
		ooeacmAVG = 2
	} PpyOInvOpAmountCalcMethod;

	typedef [v1_enum] enum _PpyOInvOpAutoFillMethod {
		oafmPresents = 0,
		ofmAll = 1,
		ofmPrev = 2,
		ofmByCurLotRest = 3
	} PpyOInvOpAutoFillMethod;

	typedef struct SPpyO_InvOpEx {
		long RecTag;
		long ID;
		long WrDnOp;
		long WrDnObj;
		long WrUpOp;
		long WrUpObj;
		PpyOInvOpAmountCalcMethod AmountCalcMethod;
		PpyOInvOpAutoFillMethod AutoFillMethod;
		PpyOInvOpFlags Flags;
	} SPpyO_InvOpEx;

	typedef struct SPpyO_DebtInventOpEx {
		long RecTag;
		long ID;
		long WrDnOp;
		long WrUpOp;
		long WrDnGoodsID;
		long WrUpGoodsID;
		long Flags;
	} SPpyO_DebtInventOpEx;

	typedef [v1_enum] enum _PpyOReckonOpFlags {
		roxfBegIsBillDt = 1,
		roxfEndIsBillDt = 2,
		roxfAutoPaym = 4,
		roxfCfmPaym = 8,
		roxfAutoDebt = 16,
		roxfCfmDebg = 32,
		roxfThisLocOnly = 64,
		roxfByExtObj = 128,
		roxfReqalToObj = 256,
		roxfThisAltObjOnly = 512
	} PpyOReckonOpFlags;

	typedef [v1_enum] enum _PpyODraftOpFlags {
		droxfCrEmptyBill = 1,
		droxfUsePartStruc = 2,
		droxfWroffCurDate = 4
	} PpyODraftOpFlags;

	typedef struct SPpyO_DraftOpEx {
		long WrOffOpID;
		long WrOffObjID;
		long WrOffComplOpID;
		PpyODraftOpFlags Flags;
	} SPpyO_DraftOpEx;

	typedef [v1_enum] enum _PpyOBillPoolOpFlags {
		bpoxfOneOp = 1,
		bpoxfOneDate = 2,
		bpoxfOneObject = 4,
		bpoxfUniteAccturns = 8,
		bpoxfUnitePayments = 16
	} PpyOBillPoolOpFlags;

	[
		object,
		uuid(04BF9269-0025-4D8B-B017-256BBCAAFB3F)
	]
	interface IPapyrusObjOprKind : IUnknown {
		HRESULT __stdcall GetDraftExData(long opID, [out] SPpyO_DraftOpEx * pData, [out,retval] long * pRet);
		HRESULT __stdcall BelongToGeneric(long opID, long genOpID, [out,retval] long * pRet);
	};

	typedef struct SPpyO_Article {
		long RecTag;
		long ID;
		long AccSheetID;
		long Article;
		long ObjID;
		long Closed;
		long Flags;
		long Reserve[4];
		BSTR Name;
		long CaFlags;
		DATE CaBegDt;
		DATE CaExpiry;
		double CaMaxCredit;
		double CaMaxDscnt;
		double CaDscnt;
		long CaDefPayPeriod;
		long CaDefAgentID;
		long CaDefQuotKindID;
		long CaReserve[4];
		BSTR CaCode;
		long SaFlags;
		DATE SaBegDt;
		DATE SaExpiry;
		long SaDefPayPeriod;
		long SaDefAgentID;
		long SaDefDlvrTerm;
		long SaPctRet;
		long SaReserve[4];
	} SPpyO_Article;

	typedef struct SPpyO_CashNode {
		long RecTag;
		long ID;
		long DeviceType;
		long LocID;
		long CurSessID;
		long Flags;
		BSTR Name;
	} SPpyO_CashNode;

	typedef [v1_enum] enum _PpyUsingWithSCard {
		uwscDefault = 0,
		uwscSCardNQuot = 1,
		uwscOnlyQuot = 2,
		uwscOnlySCard = 3
	} PpyUsingWithSCard;

	typedef [v1_enum] enum _PpyOQuotKindFlags {
		qtfAbsDis = 1,
		qtfNotForBill = 2,
		qtfPctDisOnCost = 4,
		qtfDscntOnGroups = 8,
		qtfExtPriceByBase = 16,
		qtfRetailed = 32
	} PpyOQuotKindFlags;

	typedef struct SPpyO_QuotKind {
		long RecTag;
		long ID;
		BSTR Name;
		double Discount;
		BSTR Symb;
		SDateRange Period;
		long BeginTm;
		long EndTm;
		long Rank;
		long OpID;
		PpyOQuotKindFlags Flags;
		long AccSheetID;
		long DaysOfWeek;
		PpyUsingWithSCard UsingWSCard;
	} SPpyO_QuotKind;

	typedef struct SPpyO_GoodsTax {
		long RecTag;
		long ID;
		BSTR Name;
		BSTR Symb;
		double VAT;
		double Excise;
		double SalesTax;
		long Flags;
		long Order;
		long UnionVect;
	} SPpyO_GoodsTax;

	typedef struct SPpyO_SalCharge {
		long RecTag;
		long ID;
		long AmtID;
		long CalID;
		long Flags;
		BSTR Name;
		BSTR Symb;
		BSTR Formula;
	} SPpyO_SalCharge;

	typedef struct SPpyO_Staff {
		long RecTag;
		long ID;
		long OrgID;
		long DivisionID;
		long Rank;
		long Flags;
		long FixedStaff;
		long ChargeGrpID;
		long VacancyCount;
		long VacancyBusy;
		BSTR Name;
	} SPpyO_Staff;

	typedef [v1_enum] enum _PpyOPalmFlags {
		pofImpAscChecks = 1,
		pofGeneric = 2,
		pofExpCliDebt = 4,
		pofExpSell = 8
	} PpyOPalmFlags;

	typedef struct SPpyO_StyloPalm {
		long RecTag;
		long ID;
		BSTR Name;
		long LocID;
		long GoodsGrpID;
		long OrderOpID;
		long AgentID;
		long GroupID;
		PpyOPalmFlags Flags;
		long FTPAcctID;
		long Reserve4;
		BSTR Path;
		BSTR FTPPath;
	} SPpyO_StyloPalm;

	typedef struct SPpyO_Currency {
		long RecTag;
		long ID;
		BSTR Name;
		BSTR Symb;
		long Flags;
		long Code;
	} SPpyO_Currency;

	typedef struct PpyOCurrencyCfg {
		long BaseCurID;
		long BaseRateTypeID;
	} PpyOCurrencyCfg;

	[
		object,
		uuid(085EB695-B04F-4DDF-8C2D-E75E6316129A)
	]
	interface IPapyrusObjCurrency : IUnknown {
		HRESULT __stdcall GetConfig([out] PpyOCurrencyCfg * pCfg, [out,retval] long * pRet);
		HRESULT __stdcall GetRate(long curID, [out] double * pRate, [out,retval] long * pRet);
	};

	typedef [v1_enum] enum _PpyOGoodsClassFlags {
		gcofUsePropKind = 1,
		gcofUsePropGrade = 2,
		gcofUsePropAdd = 4,
		gcofUseDimX = 8,
		gcofUseDimY = 16,
		gcofUseDimZ = 32,
		gcofStdEditDlg = 256,
		gcofDupCombine = 512,
		gcofDisableFreeDim = 1024,
		gcofUseDimW = 2048,
		gcofUsePropAdd2 = 4096
	} PpyOGoodsClassFlags;

	typedef [v1_enum] enum _SPpyO_Gcd {
		gcdKind = 1,
		gcdGrade = 2,
		gcdAdd = 3,
		gcdX = 4,
		gcdY = 5,
		gcdZ = 6,
		gcdW = 7,
		gcdAdd2 = 8
	} SPpyO_Gcd;

	typedef struct SPpyO_GcProp {
		BSTR Name;
		long ItemsListID;
	} SPpyO_GcProp;

	typedef struct SPpyO_GcDim {
		BSTR Name;
		long Scale;
	} SPpyO_GcDim;

	typedef struct SPpyO_GoodsClass {
		long RecTag;
		long ID;
		BSTR Name;
		long DefGrpID;
		long DefUnitID;
		long DefPhUnitID;
		long DefPhUPerU;
		long DefTaxGrpID;
		long DefGoodsTypeID;
		PpyOGoodsClassFlags Flags;
		long DynGenMask;
		BSTR NameConv;
		BSTR AbbrConv;
		BSTR PhUPerU_Formula;
		BSTR TaxMult_Formula;
		BSTR Package_Formula;
		SPpyO_GcProp PropKind;
		SPpyO_GcProp PropGrade;
		SPpyO_GcProp PropAdd;
		SPpyO_GcProp PropAdd2;
		SPpyO_GcDim DimX;
		SPpyO_GcDim DimY;
		SPpyO_GcDim DimZ;
		SPpyO_GcDim DimW;
	} SPpyO_GoodsClass;

	typedef [v1_enum] enum _PpyOGoodsFlags {
		gofINTVAL = 1,
		gofUNLIM = 2,
		gofODD = 4,
		gofAUTOCOMPL = 8,
		gofGENERIC = 16,
		gofTAXFACTOR = 32,
		gofPRICEWOTAXES = 64,
		gofEXTPROP = 128,
		gofALTGROUP = 256,
		gofFOLDER = 512,
		gofPASSIV = 1024,
		gofNODISCOUNT = 2048,
		gofEXCLALTFOLD = 4096,
		gofUNIQPCKGCODE = 8192,
		gofDFLTPCKGTYPE = 16384,
		gofPCKG_AROWS = 32768,
		gofPCKG_ANEWROW = 65536,
		gofASSETS = 131072,
		gofWROFFBYPRICE = 262144,
		gofTRANSGLED = 524288,
		gofVOLUMEVAL = 1048576,
		gofTRANSQUOT = 2097152,
		gofTEMPALTGRP_ = 4194304,
		gofUSEINDEPWT = 8388608,
		gofDYNAMIC = 16777216,
		gofHASIMAGES = 33554432,
		gofABBREQNAME = 67108864,
		gofEXCLVAT = 134217728
	} PpyOGoodsFlags;

	typedef [v1_enum] enum _PpyGseFlags {
		gsefMultMinShipm = 1
	} PpyGseFlags;

	typedef struct SPpyO_Goods {
		long RecTag;
		long ID;
		long Kind;
		BSTR Name;
		BSTR Abbr;
		long ParentID;
		long GoodsTypeID;
		long UnitID;
		long PhUnitID;
		double PhUPerU;
		long ManufID;
		long StrucID;
		long TaxGrpID;
		long WrOffGrpID;
		PpyOGoodsFlags Flags;
		long GdsClsID;
		long BrandID;
		long DefBCodeStrucID;
		long GoodsClsID;
		long KindID;
		long GradeID;
		long AddObjID;
		long AddObj2ID;
		long UniqCntr;
		BSTR KindText;
		BSTR GradeText;
		BSTR AddObjText;
		BSTR AddObj2Text;
		double X;
		double Y;
		double Z;
		double W;
		long Brutto;
		long Length;
		long Width;
		long Height;
		double MinStock;
		double Package;
		double MinShippmQtty;
		long ExpiryPeriod;
		BSTR Storage;
		BSTR Standard;
		BSTR Ingred;
		BSTR Energy;
		BSTR Usage;
		BSTR LabelName;
		PpyGseFlags GseFlags;
	} SPpyO_Goods;

	typedef [v1_enum] enum _PpyOGoodsClassProperty {
		clspKind = 0,
		clspGrade = 1,
		clspAddObj = 2,
		clspAddObj2 = 3
	} PpyOGoodsClassProperty;

	[
		object,
		uuid(91A8A57E-1B92-43AC-93F8-FF80943DEA7E)
	]
	interface IPapyrusObjGoods : IUnknown {
		HRESULT __stdcall GetBarcodes(long goodsID, [out,retval] IStrAssocList ** pRet);
		HRESULT __stdcall GetQuot(long goodsID, long quotKind, double * pQuot, [out,retval] long * pRet);
		HRESULT __stdcall GetQuotations(long goodsID, [out,retval] IStrAssocList ** pRet);
		HRESULT __stdcall SearchByBarcode(BSTR barcode, SPpyO_Goods * pGRec, long adoptSearching, [out,retval] long * pRet);
		HRESULT __stdcall SearchByArCode(long arID, BSTR barcode, SPpyO_Goods * pGRec, [out,retval] long * pRet);
		HRESULT __stdcall GetSingleBarcode(long goodsID, [out,retval] BSTR * pRet);
		HRESULT __stdcall GetArCode(long goodsID, long arID, [out,retval] BSTR * pRet);
		HRESULT __stdcall GetArCodeWQtty(long goodsID, long arID, long * pPack, [out,retval] BSTR * pRet);
		HRESULT __stdcall SetArCode(long goodsID, long arID, BSTR code, [out,retval] long * pRet);
		HRESULT __stdcall BelongToGroup(long goodsID, long grpID, long * pSubGrpID, [out,retval] long * pRet);
		HRESULT __stdcall CalcVatSum(long goodsID, double qtty, double price, long withoutVat, DATE dt, [out,retval] double * pRet);
		HRESULT __stdcall GetClassPropSymb(long goodsID, PpyOGoodsClassProperty clsProp, [out] BSTR * pSymb, [out,retval] long * pRet);
		HRESULT __stdcall GetRest(long goodsID, long locID, DATE dt, long supplID, [out,retval] double * pRet);
		HRESULT __stdcall SearchQttyByBarcode(BSTR barcode, SPpyO_Goods * pGRec, double * pQtty, long adoptSearching, [out,retval] long * pRet);
		HRESULT __stdcall SetVad(long goodsID, SPpyO_Goods * pGRec, [out,retval] long * pRet);
		HRESULT __stdcall ProcessName(BSTR orgName, long flags, [out,retval] BSTR * pRet);
	};

	[
		object,
		uuid(D798B5EC-3568-4647-94FB-8D246CCD8124)
	]
	interface IPapyrusObjGoodsGroup : IUnknown {
		HRESULT __stdcall GetGGroupsFromAltGrp(long altGrpID, [out,retval] IStrAssocList ** pRet);
		HRESULT __stdcall IsDynamicAlt(long grpID, [out,retval] long * pRet);
		HRESULT __stdcall GetHierarchy(long grpID, [out,retval] IStrAssocList ** pRet);
		HRESULT __stdcall SearchCode(BSTR rCode, [out,retval] long * pRet);
		HRESULT __stdcall GetChildList(long parentGrpID, [out,retval] IStrAssocList ** pRet);
	};

	typedef [v1_enum] enum _PpyO_RegTypeReserved {
		regtPASSPORT = 1,
		regtREGFREE = 2,
		regtTPID = 3,
		regtOKONH = 4,
		regtOKPO = 5,
		regtBIC = 6,
		regtBNKCORRACC = 7,
		regtCODE = 8,
		regtALBATROSCLID = 9,
		regtKPP = 10,
		regtOKATO = 11,
		regtCERTORGCODE = 12
	} PpyO_RegTypeReserved;

	typedef struct SPpyO_Register {
		long ID;
		long PsnID;
		long PsnEventID;
		long RegTypeID;
		DATE Dt;
		long RegOrgID;
		BSTR Serial;
		BSTR Number;
		DATE Expiry;
		long UniqCntr;
		long Flags;
		long LocID;
		long SurID;
	} SPpyO_Register;

	typedef [v1_enum] enum _PpyLocAddrPart {
		lapAddress = 1,
		lapCountry = 2,
		lapZip = 3,
		lapLocalArea = 4,
		lapCity = 5,
		lapStreet = 6,
		lapHouse = 7,
		lapHouseAddendum = 8,
		lapCorp = 9,
		lapApart = 10,
		lapFloor = 11,
		lapPostBox = 12,
		lapAddendum = 13,
		lapCityKind = 14,
		lapLocalAreaKind = 15,
		lapStreetKind = 16,
		lapHouseKind = 17,
		lapHouseAddendumKind = 18,
		lapApartKind = 19,
		lapFiasCityID = 20,
		lapFiasAddrID = 21,
		lapFiasHouseID = 22
	} PpyLocAddrPart;

	[
		object,
		uuid(FC9E13E7-36BC-4A7F-8ADC-33051E5ED2EF)
	]
	interface ILocAddrStruc : IUnknown {
		HRESULT __stdcall Recognize(BSTR addr, [out,retval] long * pRet);
		HRESULT __stdcall Get(PpyLocAddrPart partId, [out,retval] BSTR * pRet);
	};

	typedef [v1_enum] enum _PpyOLocationFlags {
		locfVatFree = 1,
		locfManualAddr = 2,
		locfComparable = 8
	} PpyOLocationFlags;

	typedef [v1_enum] enum _PpyOLocationType {
		loctWarehouse = 1,
		loctWarePlace = 2,
		loctAddress = 3,
		loctDivision = 4
	} PpyOLocationType;

	typedef struct SPpyO_Location {
		long RecTag;
		long ID;
		long Counter;
		long ParentID;
		BSTR Name;
		long Type;
		long OwnerID;
		PpyOLocationFlags Flags;
		long CityID;
		long RspnsPersonID;
		BSTR Code;
		BSTR ZIP;
		BSTR Address;
		BSTR FullAddr;
		double Latitude;
		double Longitude;
	} SPpyO_Location;

	[
		object,
		uuid(4CE3CC07-E735-4B32-AA99-0C571358A8E3)
	]
	interface IPapyrusObjLocation : IUnknown {
		HRESULT __stdcall GetAddress(long locID, [out,retval] BSTR * pRet);
		HRESULT __stdcall SearchByCode(BSTR code, PpyOLocationType locType, SPpyO_Location * pRec, [out,retval] long * pRet);
		HRESULT __stdcall GetDlvrAddrExtFld(long locID, long extFldID, [out,retval] BSTR * pRet);
		HRESULT __stdcall SetDlvrAddrExtFld(long locID, long extFldID, BSTR rValue, [out,retval] long * pRet);
		HRESULT __stdcall GetRegisterD(long locID, long regType, DATE actualDate, long inheritFromPerson, SPpyO_Register * pRec, [out,retval] long * pRet);
	};

	typedef struct SPpyO_FiasAddr {
		long ID;
		long ParentID;
		long Level;
		BSTR AddrUuid;
		BSTR RecUuid;
		BSTR PostalCode;
		BSTR Name;
		BSTR OfcName;
		BSTR ShortDescr;
		BSTR Descr;
	} SPpyO_FiasAddr;

	typedef struct SPpyO_FiasHouse {
		long ID;
		long AddrID;
		BSTR HouseUuid;
		BSTR RecUuid;
		BSTR PostalCode;
		BSTR HouseN;
		BSTR BuildN;
		BSTR StructN;
	} SPpyO_FiasHouse;

	[
		object,
		uuid(99C599C8-35A4-4289-93FE-D2091875C9FA)
	]
	interface IFias : IUnknown {
		HRESULT __stdcall SearchAddr([in] long id, [out] SPpyO_FiasAddr * pRec, [out,retval] long * pRet);
		HRESULT __stdcall SearchHouse([in] long id, [out] SPpyO_FiasHouse * pRec, [out,retval] long * pRet);
		HRESULT __stdcall SearchAddrByGuid([in] BSTR pGuidStr, [out] SPpyO_FiasAddr * pRec, [out,retval] long * pRet);
		HRESULT __stdcall SearchHouseByGuid([in] BSTR pGuidStr, [out] SPpyO_FiasHouse * pRec, [out,retval] long * pRet);
	};

	typedef [v1_enum] enum _PpyOCashierFlags {
		cifCashier = 1,
		cifModified = 2
	} PpyOCashierFlags;

	typedef struct SPpyO_CashierInfo {
		BSTR Password;
		long Rights;
		PpyOCashierFlags Flags;
	} SPpyO_CashierInfo;

	typedef [v1_enum] enum _PpyOPsnUpdateFlags {
		psnupdfDontChgImgFlag = 1,
		psnupdfDontChgStaffAmt = 2
	} PpyOPsnUpdateFlags;

	typedef struct SPersonReq {
		long Flags;
		BSTR Name;
		BSTR ExtName;
		BSTR Addr;
		BSTR RAddr;
		BSTR Phone1;
		BSTR TPID;
		BSTR KPP;
		BSTR OKONF;
		BSTR OKPO;
		long SrchRegTypeID;
		BSTR SrchCode;
		BSTR Memo;
	} SPersonReq;

	[
		object,
		uuid(3C514439-E9B6-42A2-9F5C-16F4E7A23D37)
	]
	interface IPapyrusObjPerson : IUnknown {
		HRESULT __stdcall GetLoc(long personID, long getRLoc, SPpyO_Location * pLoc, [out,retval] long * pRet);
		HRESULT __stdcall GetPersonReq(long personID, SPersonReq * pReq, [out,retval] long * pRet);
		HRESULT __stdcall GetCashierInfo(long personID, SPpyO_CashierInfo * pCshrInfo, [out,retval] long * pRet);
		HRESULT __stdcall EnumKinds(long personID, long * pIdx, long * pKindID, [out,retval] long * pRet);
		HRESULT __stdcall EnumRelations(long personID, long relTypeID, long reverse, [in,out] long * pRelPersonID, [out,retval] long * pRet);
		HRESULT __stdcall EnumRegisters(long personID, long * pIdx, long * pRegID, [out,retval] long * pRet);
		HRESULT __stdcall EnumDlvrLocs(long personID, long * pIdx, SPpyO_Location * pLoc, [out,retval] long * pRet);
		HRESULT __stdcall EnumELink(long personID, long * pIdx, long * pELinkID, [out,retval] long * pRet);
		HRESULT __stdcall EnumTags(long personID, long * pIdx, long * pTagID, [out,retval] long * pRet);
		HRESULT __stdcall EnumBankAccts(long personID, long * pIdx, long * pBnkAcctID, [out,retval] long * pRet);
		HRESULT __stdcall GetPersonByLocID(long locID, long personKindID, [out,retval] long * pRet);
		HRESULT __stdcall IsBelongToKind(long personID, long kindID, [out,retval] long * pRet);
		HRESULT __stdcall FormatRegister(long personID, long regTypeID, [out,retval] BSTR * pRet);
		HRESULT __stdcall GetRegNumber(long personID, long regType, [out,retval] BSTR * pRet);
		HRESULT __stdcall IsTagAssigned(long personID, long tagID, [out,retval] long * pRet);
		HRESULT __stdcall FormatTag(long personID, long tagID, [out,retval] BSTR * pRet);
		HRESULT __stdcall GetListByRegNumber(long regTypeID, long kindID, BSTR rSerial, BSTR rNumber, [out,retval] IStrAssocList ** pRet);
		HRESULT __stdcall SetRegNumber(long psnID, long regTypeID, BSTR rNumber, [out,retval] long * pRet);
		HRESULT __stdcall SetTag(long psnID, long tagID, BSTR rValue, [out,retval] long * pRet);
		HRESULT __stdcall GetRegister(long psnID, long regType, SPpyO_Register * pRec, [out,retval] long * pRet);
		HRESULT __stdcall IsPrivate(long psnID, [out,retval] long * pRet);
		HRESULT __stdcall GetRegNumberD(long personID, DATE actualDate, long regType, [out,retval] BSTR * pRet);
		HRESULT __stdcall GetRegisterD(long psnID, long regType, DATE actualDate, SPpyO_Register * pRec, [out,retval] long * pRet);
		HRESULT __stdcall GetRegList(long psnID, long regType, [out,retval] IStrAssocList ** pRet);
		HRESULT __stdcall EnumRegisters2(long personID, long regType, long * pIdx, SPpyO_Register * pRegRec, [out,retval] long * pRet);
	};

	typedef struct SPpyO_Person {
		long RecTag;
		long ID;
		BSTR Name;
		long Status;
		long MainLoc;
		long Flags;
		long RLoc;
		long Division;
		long Position;
		long CatID;
		BSTR Memo;
		PpyOPsnUpdateFlags UpdFlags;
		BSTR ExtString;
	} SPpyO_Person;

	typedef [v1_enum] enum _PpyOBillFlags {
		bofTotalDiscount = 1,
		bofFreight = 2,
		bofNeedPayment = 4,
		bofPayout = 8,
		bofGReceipt = 16,
		bofGExpend = 32,
		bofGReval = 512,
		bofGModif = 32768,
		bofGoods = 33328,
		bofShippedBILLF_SHIPPED = 64,
		bofNoLoadTrfr = 128,
		bofClosedOrder = 256,
		bofWritedOff = 256,
		bofCash = 1024,
		bofCheck = 2048,
		bofNoAturn = 4096,
		bofWhiteLabel = 8192,
		bofExtra = 16384,
		bofNegInvoice = 65536,
		bofRmvExcise = 131072,
		bofRent = 262144,
		bofReckon = 524288,
		bofBanking = 1048576,
		bofFixedAmounts = 2097152,
		bofCSessWroff = 4194304,
		bofPrintInvoice = 8388608,
		bofAdvanceRep = 16777216,
		bofTggLexcsnPrice = 33554432,
		bofRecomplete = 67108864,
		bofTSessWroff = 134217728,
		bofCDfctWroff = 268435456,
		bofTDfctWroff = 536870912
	} PpyOBillFlags;

	typedef [v1_enum] enum _PpyORentFlags {
		rofClosed = 1,
		rofPercent = 16
	} PpyORentFlags;

	typedef struct SPpyO_Bill {
		long RecTag;
		long ID;
		BSTR Code;
		DATE Dt;
		long BillNo;
		DATE DueDate;
		long OpID;
		long StatusID;
		long UserID;
		long MainOrgID;
		long LocID;
		long Object;
		long Object2;
		long CurID;
		double CRate;
		double Amount;
		long LinkBillID;
		PpyOBillFlags Flags;
		long Flags2;
		long SCardID;
		BSTR Memo;
		long PayerID;
		long AgentID;
		BSTR InvoiceCode;
		DATE InvoiceDate;
		BSTR PaymBillCode;
		DATE PaymBillDate;
		long Ft_STax;
		long CreatorID;
		long ExtPriceQuotKindID;
		long DlvrAddrID;
		DATE PeriodLow;
		DATE PeriodUpp;
		long Cycle;
		double Percent;
		double PartAmount;
		PpyORentFlags RentFlags;
		long ChargeDayOffs;
		long OutAmtType;
		long QuotKindID;
		long OprType;
		long AccSheet;
		long Counter;
		long PaymBillID;
		long CSessID;
		long SampleBillID;
	} SPpyO_Bill;

	typedef [v1_enum] enum _PpyOTrfrItemFlags {
		pptfrReceipt = 1,
		pptfrUniteIntr = 2,
		pptfrSelling = 4,
		pptfrOrdReserve = 8,
		pptfrCloseOrder = 16,
		pptfrDirty = 32,
		pptfrReval = 64,
		pptfrOnOrder = 128,
		pptfrOrder = 256,
		pptfrShadow = 512,
		pptfrForceLotID = 1024,
		pptfrForceSuppl = 2048,
		pptfrUnlim = 4096,
		pptfrOddGoods = 8192,
		pptfrPlus = 16384,
		pptfrMinus = 32768,
		pptfrModif = 65536,
		pptfrAutocompl = 131072,
		pptfrQuot = 262144,
		pptfrRmvExcise = 524288,
		pptfrAck = 1048576,
		pptfrNodiscount = 2097152,
		pptfrCostWoVat = 4194304,
		pptfrCostWSTax = 8388608,
		pptfrPckg = 16777216,
		pptfrPckgGen = 33554432,
		pptfrFixModifCost = 67108864,
		pptfrIndepPhQtty = 134217728,
		pptfrPriceWoTaxes = 268435456,
		pptfrDraft = 536870912,
		pptfrAssetExpl = 1073741824
	} PpyOTrfrItemFlags;

	typedef [v1_enum] enum _PpyOTrfrItemAmtType {
		tiamtCost = 1,
		tiamtPrice = 2,
		tiamtAmount = 3,
		tiamtAssetExpl = 4
	} PpyOTrfrItemAmtType;

	typedef struct SPpyO_TrfrItem {
		DATE Date;
		long BillID;
		long RByBill;
		long CurID;
		long LocID;
		long GoodsID;
		long LotID;
		long OrdLotID;
		double UnitPerPack;
		double Quantity;
		double WtQtty;
		double Rest;
		double Cost;
		double Price;
		double Discount;
		double CurPrice;
		double QuotPrice;
		long LotTaxGrpID;
		long QCert;
		long Suppl;
		PpyOTrfrItemFlags Flags;
		DATE Expiry;
		DATE LotDate;
		double Amount;
	} SPpyO_TrfrItem;

	typedef struct SPpy_TaxInfo {
		long TaxGrpID;
		double VatRate;
		double VatAmount;
	} SPpy_TaxInfo;

	typedef [v1_enum] enum _PpyOTransportType {
		trtypCar = 1,
		trtypShip = 2
	} PpyOTransportType;

	typedef struct SPpyO_Freight {
		long ID;
		BSTR Name;
		long DlvrAddrID;
		long NmbOrigsBsL;
		PpyOTransportType TrType;
		long PortOfLoading;
		long PortOfDischarge;
		DATE IssueDate;
		DATE ArrivalDate;
		long CaptainID;
		double Cost;
		long AgentID;
		long ShipID;
	} SPpyO_Freight;

	typedef [v1_enum] enum _SCompleteItemFlags {
		cfExclude = 1
	} SCompleteItemFlags;

	typedef struct SCompleteItem {
		long GoodsID;
		long LotID;
		long BillID;
		DATE Dt;
		DATE Expiry;
		long ArID;
		BSTR Serial;
		double Qtty;
		double Cost;
		double Price;
		SCompleteItemFlags Flags;
	} SCompleteItem;

	[
		object,
		uuid(A6AD32BE-8E89-4FCD-8BDC-40ED080EEF18)
	]
	interface ICompleteList : IUnknown {
		HRESULT __stdcall Clear();
		HRESULT __stdcall GetCount([out,retval] long * pRet);
		HRESULT __stdcall Get([in] long pos, [out] SCompleteItem * pItem, [out,retval] long * pRet);
	};

	[
		object,
		uuid(77E8E15F-6AF3-4555-93FE-2A76689F4D5F)
	]
	interface IPapyrusBillPacket : IUnknown {
		HRESULT __stdcall Init([out,retval] long * pRet);
		HRESULT __stdcall PutHeader(SPpyO_Bill * pHeader, [out,retval] long * pRet);
		HRESULT __stdcall UpdateHeader(SPpyO_Bill * pHeader, [out,retval] long * pRet);
		HRESULT __stdcall GetHeader([out] SPpyO_Bill * pHeader, [out,retval] long * pRet);
		HRESULT __stdcall PutItem(SPpyO_TrfrItem * pItem, [out,retval] long * pRet);
		HRESULT __stdcall LoadTItem(SPpyO_TrfrItem * pItem, BSTR rClb, BSTR rBarcode, [out,retval] long * pRet);
		HRESULT __stdcall EnumItems([in,out] long * pIdx, SPpyO_TrfrItem * pItem, [out,retval] long * pRet);
		HRESULT __stdcall GetAmountList([out,retval] IPapyrusAmountList ** pRet);
		HRESULT __stdcall GetOrderList([out,retval] IStrAssocList ** pRet);
		HRESULT __stdcall GetTaxInfo([in] SPpyO_TrfrItem * pItem, PpyOTrfrItemAmtType tiAmtType, [out] SPpy_TaxInfo * pTaxInfo, [out,retval] long * pRet);
		HRESULT __stdcall GetFreight(SPpyO_Freight * pFreight, [out,retval] long * pRet);
		HRESULT __stdcall GetTagValue([in] long tagID, [out] BSTR * pValue, [out,retval] long * pRet);
		HRESULT __stdcall PutTagValue([in] long tagID, [in] BSTR rValue, [out,retval] long * pRet);
		HRESULT __stdcall GetLastPayDate([out,retval] DATE * pRet);
		HRESULT __stdcall PutRowTagValue([in] long tagID, [in] long rowIdx, [in] BSTR rValue, [out,retval] long * pRet);
	};

	typedef struct SDebtBlock {
		double Amount;
		double Debt;
		long HasMatured;
		long MaxDelay;
		long MaxExpiry;
	} SDebtBlock;

	typedef [v1_enum] enum _PpyOLotFlags {
		lotsfFirst = 1,
		lotsfCostUp = 2,
		lotsfCostDown = 4,
		lotsfPriceUp = 8,
		lotsfPriceDown = 16,
		lotsfLinkCostUp = 32,
		lotsfLinkCostDn = 64
	} PpyOLotFlags;

	typedef struct SPpyO_Lot {
		long ID;
		long BillID;
		long LocID;
		DATE Dt;
		long OprNo;
		long Closed;
		long GoodsID;
		long QCertID;
		double UnitPerPack;
		double Quantity;
		double WtQtty;
		double WtRest;
		double Cost;
		double ExtCost;
		double Price;
		double Rest;
		long PrevLotID;
		long SupplID;
		DATE CloseDate;
		DATE Expiry;
		long InTaxGrpID;
		PpyOLotFlags Flags;
	} SPpyO_Lot;

	typedef [v1_enum] enum _PpyGoodsRestCm {
		grbcmAvg = 0,
		grbcmFirstLot = 1,
		grbcmLastLot = 2,
		grbcmSum = 3,
		grbcmDiff = 4,
		grbcmMostRecent = 5
	} PpyGoodsRestCm;

	typedef [v1_enum] enum _PpyGoodsRestFlags {
		grbfPriceByQuot = 128,
		grbfCWoVat = 16384,
		grbfZeroAgent = 65536
	} PpyGoodsRestFlags;

	typedef struct SPpyGoodsRestBlock {
		PpyGoodsRestCm CalcMethod;
		PpyGoodsRestFlags Flags;
		DATE Date;
		long OprNo;
		long LocID;
		long GoodsID;
		long SupplID;
		long AgentID;
		long QuotKindID;
		long Count;
		double Rest;
		double Cost;
		double Price;
		long LotID;
		double Deficit;
		double DraftRcpt;
	} SPpyGoodsRestBlock;

	[
		object,
		uuid(4A8491A3-DC20-4220-9B19-AF2D496B6CA0)
	]
	interface ILotList : IUnknown {
		HRESULT __stdcall GetCount([out,retval] long * pRet);
		HRESULT __stdcall Get(long pos, [out] SPpyO_Lot * pLot, [out,retval] long * pRet);
		HRESULT __stdcall SearchById(long id, [out] SPpyO_Lot * pLot, long bSearch, [out,retval] long * pRet);
		HRESULT __stdcall InitIteration();
		HRESULT __stdcall NextIteration([out] SPpyO_Lot * pLot, [out,retval] long * pRet);
		HRESULT __stdcall Clear();
		HRESULT __stdcall Add(SPpyO_Lot * pLot);
		HRESULT __stdcall Clone([out] ILotList ** ppClone);
		HRESULT __stdcall Sort();
	};

	[
		object,
		uuid(DD4B3825-3F3C-4AF9-8810-521ABF09D797)
	]
	interface IPapyrusObjBill : IUnknown {
		HRESULT __stdcall EnumBillRows(long billID, SPpyO_TrfrItem * pRow, [out,retval] long * pRet);
		HRESULT __stdcall CreatePacket([out,retval] IPapyrusBillPacket ** pRet);
		HRESULT __stdcall PutPacket(IPapyrusBillPacket * pPack, [out,retval] long * pRet);
		HRESULT __stdcall GetPacket(long id, IPapyrusBillPacket * pPack, [out,retval] long * pRet);
		HRESULT __stdcall CalcClientDebt(long clientID, [in] SDateRange * pPeriod, [out] SDebtBlock * pBlk, [out,retval] long * pRet);
		HRESULT __stdcall SearchAnalog(SPpyO_Bill * pSample, long * pID, SPpyO_Bill * pRec, [out,retval] long * pRet);
		HRESULT __stdcall GetFreight(long billID, SPpyO_Freight * pFreight, [out,retval] long * pRet);
		HRESULT __stdcall GetClbNumberByLot(long lotID, long * pIsParentLot, [out] BSTR * pBuf, [out,retval] long * pRet);
		HRESULT __stdcall SearchByGuid([in] BSTR pGuidStr, SPpyO_Bill * pRec, [out,retval] long * pRet);
		HRESULT __stdcall PutGuid(long billID, [in] BSTR pGuidStr, [out,retval] long * pRet);
		HRESULT __stdcall GetGuid(long billID, [out] BSTR * pGuidStr, [out,retval] long * pRet);
		HRESULT __stdcall GetTagValue([in] long billID, [in] long tagID, [out] BSTR * pValue, [out,retval] long * pRet);
		HRESULT __stdcall PutTagValue([in] long billID, [in] long tagID, [in] BSTR rValue, [out,retval] long * pRet);
		HRESULT __stdcall GetLotTagValue([in] long lotID, [in] long tagID, [out] BSTR * pValue, [out,retval] long * pRet);
		HRESULT __stdcall GetOriginalLot([in] long lotID, [out] long * pOrgLotID, [out] SPpyO_Lot * pLot, [out] SPpyO_Lot * pOriginalLot, [out,retval] long * pRet);
		HRESULT __stdcall GetRestByTag([in] DATE dt, [in] long goodsID, [in] long tagID, [in] BSTR rTagVal, [in] IStrAssocList * pLocList, [out,retval] double * pRet);
		HRESULT __stdcall GetComplete([in] long lotID, [out,retval] ICompleteList ** pRet);
		HRESULT __stdcall GetRest([in] long lotID, [in] DATE dt, [out] double * pRest, [out] double * pPhRest, [out,retval] long * pRet);
		HRESULT __stdcall GetDebtDim([in] long billID, [out] long * pDebtDimID, [out,retval] long * pRet);
		HRESULT __stdcall GetLastPayDate([in] long billID, [out,retval] DATE * pRet);
		HRESULT __stdcall CalcPayment([in] long billID, [in] SDateRange * pPeriod, [in] long curID, [out] double * PaymentAmount, [out,retval] long * pRet);
		HRESULT __stdcall GetDeletedBillList([in] SDateRange * pPeriod, [out,retval] IStrAssocList ** pRet);
		HRESULT __stdcall GetCurLotList([in] DATE lowDt, [in] DATE uppDt, [in] long goodsGrpId, [in] IStrAssocList * pLocList, [out,retval] ILotList ** pRet);
		HRESULT __stdcall GetLastLot([in] long goodsID, [in] long locID, [in] DATE forDate, [out] SPpyO_Lot * pLot, [out,retval] long * pRet);
		HRESULT __stdcall CalcGoodsRest([in,out] SPpyGoodsRestBlock * pBlk, [out,retval] long * pRet);
	};

	typedef [v1_enum] enum _PpyOWorldKind {
		wokSpecial = 4294967196,
		wokContinent = 1,
		wokGenRegion = 2,
		wokCountry = 3,
		wokRegion = 4,
		wokCity = 5,
		wokStreet = 6
	} PpyOWorldKind;

	typedef struct SPpyO_World {
		long RecTag;
		long ID;
		PpyOWorldKind Kind;
		long ParentID;
		long CountryID;
		BSTR Name;
		BSTR Abbr;
		long Status;
		long Flags;
		BSTR Phone;
		BSTR Code;
		BSTR ZIP;
	} SPpyO_World;

	[
		object,
		uuid(0858333C-7DF9-44E5-A65B-3BC93375B2AE)
	]
	interface IPapyrusObjRegister : IUnknown {
		HRESULT __stdcall SearchByNumber(long regTypeID, BSTR rSn, BSTR rNmbr, [out] SPpyO_Register * pRegister, [out,retval] long * pRet);
		HRESULT __stdcall Fetch([in] long id, [out] SPpyO_Register * pRegister, [out,retval] long * pRet);
	};

	typedef [v1_enum] enum _PpyOPersonRelTypeCardinality {
		psnrtcOneToOne = 1,
		psnrtcOneToMany = 2,
		psnrtcManyToOne = 3,
		psnrtcManyToMany = 4
	} PpyOPersonRelTypeCardinality;

	typedef [v1_enum] enum _PpyOPersonRelTypeStatusRestr {
		psnrtssUndef = 0,
		psnrtssPrivateToPrivate = 1,
		psnrtssPrivateToLegal = 2,
		psnrtssLegalToPrivate = 3,
		psnrtssLegalToLegal = 4
	} PpyOPersonRelTypeStatusRestr;

	typedef [v1_enum] enum _PpyOPersonRelTypeFlags {
		psnrtfInhAddr = 1,
		psnrtfInhRAddr = 2,
		psnrtfGrouping = 4
	} PpyOPersonRelTypeFlags;

	typedef struct SPpyO_PersonRelType {
		long RecTag;
		long ID;
		BSTR Name;
		BSTR Symb;
		PpyOPersonRelTypeStatusRestr StatusRestriction;
		PpyOPersonRelTypeCardinality Cardinality;
		PpyOPersonRelTypeFlags Flags;
	} SPpyO_PersonRelType;

	[
		object,
		uuid(802629BF-DF9C-462D-A9FF-2614E7D19919)
	]
	interface IPapyrusPersonRelTypePacket : IUnknown {
		HRESULT __stdcall Init([out,retval] long * pRet);
		HRESULT __stdcall Put(SPpyO_PersonRelType * pRec, [out,retval] long * pRet);
		HRESULT __stdcall Get([out] SPpyO_PersonRelType * pRec, [out,retval] long * pRet);
		HRESULT __stdcall GetInhRegTypeList([out,retval] IStrAssocList ** pRet);
		HRESULT __stdcall PutInhRegTypeList(IStrAssocList * pList, [out,retval] long * pRet);
	};

	[
		object,
		uuid(2AD5332A-1982-4EA1-BAC9-F38EF508C4DB)
	]
	interface IPapyrusObjPersonRelType : IUnknown {
		HRESULT __stdcall CreatePacket([out,retval] IPapyrusPersonRelTypePacket ** pRet);
		HRESULT __stdcall PutPacket([out] long * pID, IPapyrusPersonRelTypePacket * pPack, long useTa, [out,retval] long * pRet);
		HRESULT __stdcall GetPacket(long id, IPapyrusPersonRelTypePacket * pPack, [out,retval] long * pRet);
	};

	typedef struct SPpyO_Transport {
		long RecTag;
		long ID;
		PpyOTransportType TrType;
		BSTR Name;
		BSTR Code;
		BSTR TrailerCode;
		long TrModelID;
		long OwnerID;
		long CountryID;
		long CaptainID;
		double Capacity;
	} SPpyO_Transport;

	typedef [v1_enum] enum _PpyOProcessorKind {
		prckGroup = 1,
		prckProcessor = 2
	} PpyOProcessorKind;

	typedef [v1_enum] enum _PpyOProcessorFlags {
		prcfInductSupersesStatus = 1,
		prcfStoreGoodsRest = 2,
		prcfPrintNewLinePane = 4,
		prcfAltGroup = 8,
		prcfDefSignMinus = 16,
		prcfDefSignPlus = 32,
		prcfEnableDupSerial = 64,
		prcfOneClickTurnPane = 128,
		prcfLockWrOff = 256,
		prcfWrOfDtStart = 512,
		prcfWrOffDtBuSuper = 1024,
		prcfCanSwitchPane = 2048,
		prcfAccDupSerialInSess = 4096,
		prcfTurnIncomplBill = 8192,
		prcfPassive = 16384,
		prcfAddedObjAsAgent = 32768,
		prcfExDfGroup = 2147483647
	} PpyOProcessorFlags;

	typedef struct SPpyO_Processor {
		long RecTag;
		long ID;
		long ParentID;
		PpyOProcessorKind Kind;
		BSTR Name;
		long LocID;
		long TimeUnitID;
		PpyOProcessorFlags Flags;
		long LinkObjType;
		long LinkObjID;
		long WrOffOpID;
		long WrOffArID;
		long SuperSessTiming;
		long RestAltGrpID;
		long PrinterID;
		long LabelCount;
		BSTR Code;
		long WrOffGenOpID;
	} SPpyO_Processor;

	typedef [v1_enum] enum _PpyOTSessionFlags {
		tsesfWritedOff = 1,
		tsesfSuperSess = 2,
		tsesfIdle = 4,
		tsesfPlan = 8,
		tsesfPlanPhUnit = 16
	} PpyOTSessionFlags;

	typedef struct SPpyO_TSession {
		long RecTag;
		long ID;
		long ParentID;
		long Num;
		long TechID;
		long PrcID;
		DATE StDt;
		DATE StTm;
		DATE FinDt;
		DATE FinTm;
		long Incomplete;
		long Status;
		PpyOTSessionFlags Flags;
		long ArID;
		long Ar2ID;
		long PlannedTiming;
		double PlannedQtty;
		double ActQtty;
		long OrderLotID;
		long PrevSessID;
		double Amount;
		long LinkBillID;
		long SCardID;
		long ToolingTime;
		BSTR Memo;
	} SPpyO_TSession;

	typedef [v1_enum] enum _PpyOTSessLineFlags {
		tseslfAutocompl = 1,
		tseslfOutRest = 2,
		tseslfFixedRest = 4,
		tseslfTiming = 8,
		tseslfExpandSess = 16,
		tseslfRest = 32,
		tseslfIndepPhQtty = 64,
		tseslfRecompl = 128,
		tseslfPlanPhQtty = 256,
		tseslfTooling = 512
	} PpyOTSessLineFlags;

	typedef struct SPpyO_TSessLine {
		long TSessID;
		long OprNo;
		long GoodsID;
		long LotID;
		long UserID;
		long Sign;
		DATE Dt;
		DATE Tm;
		long Flags;
		double Qtty;
		BSTR Serial;
		double Price;
		double WtQtty;
		DATE Expiry;
		double Discount;
	} SPpyO_TSessLine;

	typedef [v1_enum] enum _PpyOPrjTaskKind {
		prjtkTask = 1,
		prjtkTemplate = 2
	} PpyOPrjTaskKind;

	typedef [v1_enum] enum _PpyOPrjTaskFlags {
		prjtfOpenedByEmpl = 1,
		prjtfActionViewed = 2
	} PpyOPrjTaskFlags;

	typedef [v1_enum] enum _PpyOPrjTaskStatus {
		prjtsNew = 1,
		prjtsCanceled = 2,
		prjtsInProgress = 3,
		prjtsInExpectaiong = 4,
		prjtsCompleted = 5
	} PpyOPrjTaskStatus;

	typedef [v1_enum] enum _PpyOPrjTaskPriority {
		prjtpMaximum = 1,
		prjtpHigh = 2,
		prjtpNormal = 3,
		prjtpLow = 4,
		prjtpMinimum = 5
	} PpyOPrjTaskPriority;

	typedef struct SPpyO_PrjTask {
		long RecTag;
		long ID;
		long ProjectID;
		PpyOPrjTaskKind Kind;
		BSTR Code;
		long CreatorID;
		long GroupID;
		long EmployerID;
		long ClientID;
		long TemplateID;
		DATE Dt;
		DATE Tm;
		DATE StartDt;
		DATE StartTm;
		DATE EstFinishDt;
		DATE EstFinishTm;
		DATE FinishDt;
		DATE FinishTm;
		PpyOPrjTaskPriority Priority;
		PpyOPrjTaskStatus Status;
		long DrPrd;
		long DrKind;
		long DrDetail;
		PpyOPrjTaskFlags Flags;
		long DlvrAddrID;
		long LinkTaskID;
		double Amount;
		long OpenCount;
		long BillArID;
		BSTR Descr;
		BSTR Memo;
	} SPpyO_PrjTask;

	typedef [v1_enum] enum _PpyOProjectKind {
		prjkProject = 1,
		prjkPhase = 2,
		prjkPrjTemplate = 3,
		prjkPhsTemplate = 4
	} PpyOProjectKind;

	typedef [v1_enum] enum _PpyOProjectStatus {
		prjsActive = 1,
		prjsNonActive = 2,
		prjsArchived = 3
	} PpyOProjectStatus;

	typedef struct SPpyO_Project {
		long RecTag;
		long ID;
		PpyOProjectKind Kind;
		long ParentID;
		BSTR Name;
		BSTR Code;
		DATE Dt;
		DATE BeginDt;
		DATE EstFinishDt;
		DATE FinishDt;
		long MngrID;
		long ClientID;
		long TemplateID;
		PpyOProjectStatus Status;
		long Flags;
		long BillOpID;
		BSTR Descr;
		BSTR Memo;
	} SPpyO_Project;

	typedef struct SPpyO_Brand {
		long ID;
		BSTR Name;
		long OwnerID;
	} SPpyO_Brand;

	typedef struct SPpyO_QCert {
		long RecTag;
		long ID;
		long Passive;
		BSTR Code;
		BSTR BlankCode;
		long GoodsID;
		BSTR GoodsName;
		BSTR Manuf;
		DATE ProduceDate;
		BSTR SPrDate;
		DATE InitDate;
		DATE Expiry;
		long RegOrgan;
		BSTR Etc;
		BSTR InnerCode;
	} SPpyO_QCert;

	typedef struct SPpyO_SCardSeries {
		long RecTag;
		long ID;
		BSTR Name;
		BSTR Symb;
		long ChargeGoodsID;
		long BonusChrgGrpID;
		long BonusChrgExtRule;
		long BonusGrpID;
		long CrdGoodsGrpID;
		DATE Issue;
		DATE Expiry;
		double PctDiscount;
		double MaxCredit;
		long Flags;
		long QuotKindID;
		long PersonKindID;
		BSTR CodeTempl;
	} SPpyO_SCardSeries;

	typedef struct SPpyO_SCard {
		long ID;
		BSTR Code;
		BSTR Password;
		long SeriesID;
		long PersonID;
		long Flags;
		DATE Dt;
		DATE Expiry;
		double PctDiscount;
		long AutoGoodsID;
		double MaxCredit;
		double Turnover;
		double Rest;
		DATE UsageTmStart;
		DATE UsageTmEnd;
		long PeriodTerm;
		long PeriodCount;
	} SPpyO_SCard;

	typedef struct SPpyO_SCardOp {
		long SCardID;
		long DestSCardID;
		long LinkObjType;
		long LinkObjID;
		DATE Dtm;
		long OpType;
		SDateRange FreezingPeriod;
		double Amount;
	} SPpyO_SCardOp;

	[
		object,
		uuid(CC8B4FFB-7079-484D-9C79-6106E4FE11E2)
	]
	interface IPapyrusObjSCard : IUnknown {
		HRESULT __stdcall GetPacket([in] long id, SPpyO_SCard * pPack, [out,retval] long * pRet);
		HRESULT __stdcall PutPacket([out] long * pID, SPpyO_SCard * pPack, [in] long useTa, [out,retval] long * pRet);
		HRESULT __stdcall SetFreezingPeriod([in] long id, [in] SDateRange * pDateRange, [in] long useTa, [out,retval] long * pRet);
	};

	typedef [v1_enum] enum _PpyVTrfrAnlzGrouping {
		tavgNone = 0,
		tavgGoods = 1,
		tavgCntragent = 2,
		tavgCntragentDate = 3,
		tavgGoodsCntragent = 4,
		tavgGoodsCntragentDate = 5,
		tavgGoodsBill = 6,
		tavgDateCntragentAgentGoods = 7,
		tavgGoodsDate = 8,
		tavgBillCntragent = 9
	} PpyVTrfrAnlzGrouping;

	typedef [v1_enum] enum _PpyVTrfrAnlzFlags {
		tavfLabelOnly = 1,
		tavfGByDate = 2,
		tavfGetRest = 4,
		tavfSubstPersonRAddr = 8,
		tavfSubstDlvrAddr = 16,
		tavfDiffByDlvrAddr = 32,
		tavfDontInitSubstNames = 64,
		tavfInitLocCount = 128,
		tavfCalcRest = 256,
		tavfShowAllArticles = 512,
		tavfShowAllAgents = 1024,
		tavfShowAllGoods = 2048,
		tavfByZeroAgent = 4096,
		tavfCalcVat = 8192,
		tavfCWoVat = 32768,
		tavfByZeroDlvrAddr = 65536,
		tavfForceInitDlvrAddr = 131072
	} PpyVTrfrAnlzFlags;

	[
		object,
		uuid(44676421-418B-4B25-A9AB-31A169A9F13E)
	]
	interface IPpyFilt_TrfrAnlz : IUnknown {
		HRESULT __stdcall SetPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetLotsPeriod(DATE low, DATE upp);
		HRESULT __stdcall AddLocationID(long id);
		HRESULT __stdcall ClearLocList();
		[propget]
		HRESULT __stdcall Period([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall LotsPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall OpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall OpID(long value);
		[propget]
		HRESULT __stdcall LocID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall LocID(long value);
		[propget]
		HRESULT __stdcall SupplID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall SupplID(long value);
		[propget]
		HRESULT __stdcall ArID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ArID(long value);
		[propget]
		HRESULT __stdcall DlvrAddrID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall DlvrAddrID(long value);
		[propget]
		HRESULT __stdcall AgentID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AgentID(long value);
		[propget]
		HRESULT __stdcall PsnCatID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall PsnCatID(long value);
		[propget]
		HRESULT __stdcall CityID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CityID(long value);
		[propget]
		HRESULT __stdcall GoodsGrpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GoodsGrpID(long value);
		[propget]
		HRESULT __stdcall GoodsID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GoodsID(long value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVTrfrAnlzFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVTrfrAnlzFlags value);
		[propget]
		HRESULT __stdcall InitOrd([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall InitOrd(long value);
		[propget]
		HRESULT __stdcall CtKind([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CtKind(long value);
		[propget]
		HRESULT __stdcall Grp([out,retval] PpyVTrfrAnlzGrouping * pRet);
		[propput]
		HRESULT __stdcall Grp(PpyVTrfrAnlzGrouping value);
		[propget]
		HRESULT __stdcall Sgg([out,retval] PpyVSubstGrpGoods * pRet);
		[propput]
		HRESULT __stdcall Sgg(PpyVSubstGrpGoods value);
		[propget]
		HRESULT __stdcall Sgp([out,retval] PpyVSubstGrpPerson * pRet);
		[propput]
		HRESULT __stdcall Sgp(PpyVSubstGrpPerson value);
		[propget]
		HRESULT __stdcall Sgd([out,retval] PpyVSubstGrpDate * pRet);
		[propput]
		HRESULT __stdcall Sgd(PpyVSubstGrpDate value);
	};

	typedef struct SPpyVT_TrfrAnlz {
		long RecTag;
		long Count;
		double Qtty;
		double PhQtty;
		double Cost;
		double Price;
		double Discount;
		double Amount;
		double SaldoQtty;
		double SaldoAmt;
		double PVat;
	} SPpyVT_TrfrAnlz;

	typedef struct SPpyVI_TrfrAnlz {
		long RecTag;
		DATE Dt;
		long OprNo;
		long BillID;
		long LocID;
		long ArticleID;
		long PersonID;
		long OpID;
		long GoodsID;
		long SubGoodsClsID;
		long LotID;
		long DlvrLocID;
		long LocCount;
		double Qtty;
		double PhQtty;
		double Rest;
		double Cost;
		double Price;
		double Discount;
		double Amount;
		double SaldoQtty;
		double SaldoAmt;
		double PVat;
		BSTR BillCode;
		BSTR DtText;
		BSTR GoodsText;
		BSTR PersonText;
	} SPpyVI_TrfrAnlz;

	typedef struct SPpyV_TrfrAnlz_AlcRepParam {
		long ImpExpTag;
		long ManufOptBuyerTag;
		long ManufKindID;
		long ImportKindID;
	} SPpyV_TrfrAnlz_AlcRepParam;

	typedef struct SPpyVI_TrfrAnlz_AlcRep {
		SPpyVI_TrfrAnlz Item;
		SPpyO_Goods GoodsRec;
		SPpyO_Bill BillRec;
		SPpyO_Lot OrgLotRec;
		long PersonID;
		long OrgLot_Prsn_SupplID;
		long IsImport;
		long IsExport;
		long IsManuf;
		long IsOptBuyer;
	} SPpyVI_TrfrAnlz_AlcRep;

	[
		object,
		uuid(BDA887FC-FAFF-44D8-8286-79829A500FDB)
	]
	interface IPapyrusTrfrAnlz : IUnknown {
		HRESULT __stdcall InitAlcRepParam([in] SPpyV_TrfrAnlz_AlcRepParam * pParam, [out,retval] long * pRet);
		HRESULT __stdcall NextIteration_AlcRep(SPpyVI_TrfrAnlz_AlcRep * pItem, [out,retval] long * pRet);
	};

	[
		object,
		uuid(CD15574E-B90E-4EFF-B5FC-9350F03156D5)
	]
	interface IAlcRepOpList : IUnknown {
		HRESULT __stdcall Init([in] long genRcpt, [in] long genRcptEtc, [in] long genRet, [in] long genSupplRet, [in] long genExp, [in] long genExpEtc, [in] long genIntrMov, [out,retval] long * pRet);
		HRESULT __stdcall IsRcpt([in] long op, [out,retval] long * pRet);
		HRESULT __stdcall IsRcptEtc([in] long op, [out,retval] long * pRet);
		HRESULT __stdcall IsRet([in] long op, [out,retval] long * pRet);
		HRESULT __stdcall IsSupplRet([in] long op, [out,retval] long * pRet);
		HRESULT __stdcall IsExp([in] long op, [out,retval] long * pRet);
		HRESULT __stdcall IsExpEtc([in] long op, [out,retval] long * pRet);
		HRESULT __stdcall IsIntrMov([in] long op, [out,retval] long * pRet);
	};

	typedef [v1_enum] enum _PpyVCCheckGrouping {
		ccgNone = 0,
		ccgTime = 1,
		ccgDate = 2,
		ccgCash = 3,
		ccgCard = 4,
		ccgAmount = 5,
		ccgQtty = 6,
		ccgGoods = 7,
		ccgCashiers = 8
	} PpyVCCheckGrouping;

	typedef [v1_enum] enum _PpyVCCheckFlags {
		ccfZeroSess = 1,
		ccfActiveSess = 2,
		ccfCheckLines = 4,
		ccfImmOpenPanel = 8,
		ccfShowSuspended = 16,
		ccfSuspendedOnly = 32,
		ccfRetOnly = 64,
		ccfShowJunk = 128,
		ccfFillCashNodeID = 256,
		ccfNotPrintedOnly = 512,
		ccfCashOnly = 1024,
		ccfBankingOnly = 2048
	} PpyVCCheckFlags;

	[
		object,
		uuid(B2AB99BC-A403-482A-AE18-50D4FA5E887F)
	]
	interface IPpyFilt_CCheck : IUnknown {
		HRESULT __stdcall SetPeriod(DATE low, DATE upp);
		[propget]
		HRESULT __stdcall CashNodeID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CashNodeID(long value);
		[propget]
		HRESULT __stdcall CashNumber([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CashNumber(long value);
		[propget]
		HRESULT __stdcall GoodsGrpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GoodsGrpID(long value);
		[propget]
		HRESULT __stdcall GoodsID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GoodsID(long value);
		[propget]
		HRESULT __stdcall SCardSerID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall SCardSerID(long value);
		[propget]
		HRESULT __stdcall SCardID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall SCardID(long value);
		[propget]
		HRESULT __stdcall CashierID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CashierID(long value);
		[propget]
		HRESULT __stdcall AgentID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AgentID(long value);
		[propget]
		HRESULT __stdcall TableCode([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall TableCode(long value);
		[propget]
		HRESULT __stdcall MinCode([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall MinCode(long value);
		[propget]
		HRESULT __stdcall MaxCode([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall MaxCode(long value);
		[propget]
		HRESULT __stdcall MinAmount([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall MinAmount(double value);
		[propget]
		HRESULT __stdcall MaxAmount([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall MaxAmount(double value);
		[propget]
		HRESULT __stdcall MinQtty([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall MinQtty(double value);
		[propget]
		HRESULT __stdcall MaxQtty([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall MaxQtty(double value);
		[propget]
		HRESULT __stdcall AmountQuant([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall AmountQuant(double value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVCCheckFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVCCheckFlags value);
		[propget]
		HRESULT __stdcall Grp([out,retval] PpyVCCheckGrouping * pRet);
		[propput]
		HRESULT __stdcall Grp(PpyVCCheckGrouping value);
		[propget]
		HRESULT __stdcall Period([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall MinTime([out,retval] DATE * pRet);
		[propput]
		HRESULT __stdcall MinTime(DATE value);
		[propget]
		HRESULT __stdcall MaxTime([out,retval] DATE * pRet);
		[propput]
		HRESULT __stdcall MaxTime(DATE value);
		[propget]
		HRESULT __stdcall WeekDays([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall WeekDays(long value);
		[propget]
		HRESULT __stdcall HourBefore([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall HourBefore(long value);
	};

	typedef struct SPpyVT_CCheck {
		long RecTag;
		long Count;
		double Qtty;
		double Amount;
		double Discount;
	} SPpyVT_CCheck;

	typedef struct SPpyVI_CCheck {
		long RecTag;
		long ID;
		long Code;
		long CashID;
		long UserID;
		long SessID;
		long Flags;
		long SCardID;
		long TableCode;
		long AgentID;
		long G_GoodsID;
		long G_Count;
		long CashNodeID;
		long GoodsGrpID;
		DATE Dtm;
		double G_Amount;
		double G_Discount;
		double G_PctPart;
		double G_Qtty;
		double Amount;
		double Discount;
	} SPpyVI_CCheck;

	typedef [v1_enum] enum _PpyVLotFlags {
		lvfWithoutQCert = 8,
		lvfOrders = 16,
		lvfCostAbovePrice = 32,
		lvfWithoutClb = 64,
		lvfDeadLots = 128,
		lvfWithoutExpiry = 256,
		lvfOnlySpoilage = 512,
		lvfShowSerialN = 1024,
		lvfSkipNoOp = 2048,
		lvfCheckOriginLotDate = 4096,
		lvfSkipClosedBeforeOp = 8192,
		lvfNoTempTable = 16384
	} PpyVLotFlags;

	[
		object,
		uuid(F6F5F1E9-3485-411A-AC4D-6CCCC80AFD1A)
	]
	interface IPpyFilt_Lot : IUnknown {
		HRESULT __stdcall SetPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetOperationPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetExpiryPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetQcExpiryPeriod(DATE low, DATE upp);
		[propget]
		HRESULT __stdcall Period([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall OperationPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall ExpiryPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall QcExpiryPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall LocID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall LocID(long value);
		[propget]
		HRESULT __stdcall SupplID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall SupplID(long value);
		[propget]
		HRESULT __stdcall GoodsGrpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GoodsGrpID(long value);
		[propget]
		HRESULT __stdcall GoodsID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GoodsID(long value);
		[propget]
		HRESULT __stdcall QCertID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall QCertID(long value);
		[propget]
		HRESULT __stdcall InTaxGrpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall InTaxGrpID(long value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVLotFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVLotFlags value);
		[propget]
		HRESULT __stdcall ClosedTag([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ClosedTag(long value);
		[propget]
		HRESULT __stdcall CostLow([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall CostLow(double value);
		[propget]
		HRESULT __stdcall CostUpp([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall CostUpp(double value);
		[propget]
		HRESULT __stdcall PriceLow([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall PriceLow(double value);
		[propget]
		HRESULT __stdcall PriceUpp([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall PriceUpp(double value);
		[propget]
		HRESULT __stdcall Serial([out,retval] BSTR * pRet);
		[propput]
		HRESULT __stdcall Serial(BSTR value);
	};

	typedef struct SPpyVT_Lot {
		long RecTag;
		long Count;
		double Qtty;
		double Rest;
		double Cost;
		double Price;
		long DCount;
		double InCost;
		double InPrice;
		double DRest;
		double DCost;
		double DPrice;
	} SPpyVT_Lot;

	typedef struct SPpyVI_Lot {
		long RecTag;
		long ID;
		long BillID;
		long LocID;
		DATE Dt;
		long OprNo;
		long Closed;
		long GoodsID;
		long QCertID;
		double UnitPerPack;
		double Quantity;
		float WtQtty;
		float WtRest;
		double Cost;
		double ExtCost;
		double Price;
		double Rest;
		long PrevLotID;
		long SupplID;
		DATE CloseDate;
		DATE Expiry;
		long InTaxGrpID;
		long Flags;
		double BegRest;
		double EndRest;
		double QttyPlus;
		double QttyMinus;
		DATE OrgLotDt;
		BSTR Serial;
	} SPpyVI_Lot;

	typedef [v1_enum] enum _PpyVGoodsFlags {
		gvfUseGrpList = 1,
		gvfUseUnitMask = 4,
		gvfIntUnitOnly = 8,
		gvfFloatUnitOnly = 16,
		gvfNegation = 32,
		gvfGenGoods = 64,
		gvfGroupGenGoods = 128,
		gvfUndefType = 256,
		gvfNewLots = 512,
		gvfExcludeAsset = 1024,
		gvfIncludeIntr = 2048,
		gvfShowBarcode = 4096,
		gvfShowCargo = 8192,
		gvfHidePassive = 16384,
		gvfPassiveOnly = 32768,
		gvfGenGoodsOnly = 65536,
		gvfWOTaxGdsOnly = 131072,
		gvfNoZeroRestOnLotPeriod = 262144,
		gvfNoDisOnly = 524288,
		gvfShowStrucType = 1048576,
		gvfNotUseViewOptions = 2097152,
		gvfShowGoodsWOStruc = 4194304,
		gvfWoTaxGrp = 8388608,
		gvfRestrictByMatrix = 16777216,
		gvfShowArCode = 33554432,
		gvfShowOwnArCode = 67108864,
		gvfShowWoArCode = 134217728,
		gvfOutOfMatrix = 268435456,
		gvfActualOnly = 536870912,
		gvfHasImages = 1073741824,
		gvfUseIndepWtOnly = 2147483647
	} PpyVGoodsFlags;

	[
		object,
		uuid(9B80C894-36AE-44D8-82BD-15C04622665E)
	]
	interface IPpyFilt_Goods : IUnknown {
		HRESULT __stdcall SetLotPeriod(DATE low, DATE upp);
		HRESULT __stdcall AddGoodsGroupID(long id);
		[propget]
		HRESULT __stdcall LotPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall GrpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GrpID(long value);
		[propget]
		HRESULT __stdcall ManufID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ManufID(long value);
		[propget]
		HRESULT __stdcall ManufCountryID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ManufCountryID(long value);
		[propget]
		HRESULT __stdcall UnitID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall UnitID(long value);
		[propget]
		HRESULT __stdcall PhUnitID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall PhUnitID(long value);
		[propget]
		HRESULT __stdcall SupplID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall SupplID(long value);
		[propget]
		HRESULT __stdcall GoodsTypeID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GoodsTypeID(long value);
		[propget]
		HRESULT __stdcall TaxGrpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall TaxGrpID(long value);
		[propget]
		HRESULT __stdcall LocID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall LocID(long value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVGoodsFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVGoodsFlags value);
		[propget]
		HRESULT __stdcall VatRate([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall VatRate(long value);
		[propget]
		HRESULT __stdcall VatDate([out,retval] DATE * pRet);
		[propput]
		HRESULT __stdcall VatDate(DATE value);
		[propget]
		HRESULT __stdcall BrandID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall BrandID(long value);
		[propget]
		HRESULT __stdcall SrchStr([out,retval] BSTR * pRet);
		[propput]
		HRESULT __stdcall SrchStr(BSTR value);
		[propget]
		HRESULT __stdcall BarcodeLen([out,retval] BSTR * pRet);
		[propput]
		HRESULT __stdcall BarcodeLen(BSTR value);
		[propget]
		HRESULT __stdcall GdsClsID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GdsClsID(long value);
		[propget]
		HRESULT __stdcall KindID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall KindID(long value);
		[propget]
		HRESULT __stdcall AddObjID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AddObjID(long value);
		[propget]
		HRESULT __stdcall GradeID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GradeID(long value);
		[propget]
		HRESULT __stdcall AddObj2ID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AddObj2ID(long value);
		[propget]
		HRESULT __stdcall DimXMin([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall DimXMin(double value);
		[propget]
		HRESULT __stdcall DimXMax([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall DimXMax(double value);
		[propget]
		HRESULT __stdcall DimYMin([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall DimYMin(double value);
		[propget]
		HRESULT __stdcall DimYMax([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall DimYMax(double value);
		[propget]
		HRESULT __stdcall DimZMin([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall DimZMin(double value);
		[propget]
		HRESULT __stdcall DimZMax([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall DimZMax(double value);
		[propget]
		HRESULT __stdcall DimWMin([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall DimWMin(double value);
		[propget]
		HRESULT __stdcall DimWMax([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall DimWMax(double value);
		[propget]
		HRESULT __stdcall CodeArID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CodeArID(long value);
	};

	typedef struct SPpyVT_Goods {
		long RecTag;
		long Total;
	} SPpyVT_Goods;

	typedef struct SPpyVI_Goods {
		long RecTag;
		long ID;
		long Kind;
		BSTR Name;
		BSTR Abbr;
		long ParentID;
		long GoodsTypeID;
		long UnitID;
		long PhUnitID;
		double PhUPerU;
		long ManufID;
		long StrucID;
		long TaxGrpID;
		long WrOffGrpID;
		long Flags;
		long GdsClsID;
		long BrandID;
		long DefBCodeStrucID;
		BSTR Barcode;
		long Brutto;
		long Length;
		long Width;
		long Height;
		double MinStock;
		double Package;
		BSTR StrucType;
	} SPpyVI_Goods;

	typedef [v1_enum] enum _PpyVGoodsStrucFlags {
		gsvfShowComplDecompl = 1,
		gsvfShowPartitial = 2,
		gsvfShowSubst = 4,
		gsvfShowGift = 8,
		gsvfShowComplex = 16
	} PpyVGoodsStrucFlags;

	[
		object,
		uuid(09819E4D-E52E-41C7-BC1A-EC5A9EEB45C1)
	]
	interface IPpyFilt_GoodsStruc : IUnknown {
		[propget]
		HRESULT __stdcall PrmrGoodsGrpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall PrmrGoodsGrpID(long value);
		[propget]
		HRESULT __stdcall PrmrGoodsID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall PrmrGoodsID(long value);
		[propget]
		HRESULT __stdcall ScndGoodsGrpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ScndGoodsGrpID(long value);
		[propget]
		HRESULT __stdcall ScndGoodsID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ScndGoodsID(long value);
		[propget]
		HRESULT __stdcall StrucFlagSet([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall StrucFlagSet(long value);
		[propget]
		HRESULT __stdcall StrucFlagReset([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall StrucFlagReset(long value);
		[propget]
		HRESULT __stdcall ItemFlagSet([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ItemFlagSet(long value);
		[propget]
		HRESULT __stdcall ItemFlagReset([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ItemFlagReset(long value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVGoodsStrucFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVGoodsStrucFlags value);
		[propget]
		HRESULT __stdcall InitOrder([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall InitOrder(long value);
	};

	typedef struct SPpyVI_GoodsStruc {
		long RecTag;
		long GStrucID;
		long PrmrGoodsID;
		long StrucFlags;
		long ParentStrucID;
		long GiftQuotKindID;
		long VariedPropObjType;
		BSTR StrucName;
		BSTR StrucSymb;
		SDateRange Period;
		double GiftLimit;
		double GiftAmtRestrict;
		double CommDenom;
		long GoodsID;
		long ItemFlags;
		double Median;
		double Denom;
		double Netto;
	} SPpyVI_GoodsStruc;

	typedef [v1_enum] enum _PpyVGoodsRestFlags {
		grvfBarCode = 1,
		grvfNullRest = 2,
		grvfCalcOrder = 4,
		grvfPriceByQuot = 64,
		grvfUnderMinStock = 128,
		grvfDisplayWoPacks = 256,
		grvfNullRestsOnly = 512,
		grvfLabelOnly = 1024,
		grvfNoZeroOrderOnly = 2048,
		grvfCalcTotalOnly = 4096,
		grvfEachLocation = 8192,
		grvfComplPackQtty = 16384,
		grvfCWoVat = 32768,
		grvfCalcDeficit = 65536,
		grvfWoSupplier = 131072,
		grvfShowMinStock = 262144,
		grvfShowDraftReceipt = 524288
	} PpyVGoodsRestFlags;

	typedef [v1_enum] enum _PpyVGoodsRestCalcMethod {
		grvpcmAvg = 0,
		grvpcmFirstLot = 1,
		grvpcmLastLot = 2,
		grvpcmSum = 3,
		grvpcmDiff = 4,
		grvpcmMostRecent = 5
	} PpyVGoodsRestCalcMethod;

	typedef [v1_enum] enum _PpyVGoodsRestDiffParam {
		grvdiffNone = 0,
		grvdiffCost = 1,
		grvdiffPrice = 2,
		grvdiffPack = 4,
		grvdiffSerial = 8,
		grvdiffLoc = 16,
		grvdiffLotTag = 32,
		grvdiffLotID = 64,
		grvdiffExpiry = 128
	} PpyVGoodsRestDiffParam;

	[
		object,
		uuid(A5278F55-C716-465A-A910-B81A878E5B19)
	]
	interface IPpyFilt_GoodsRest : IUnknown {
		HRESULT __stdcall SetPrgnPeriod(DATE low, DATE upp);
		HRESULT __stdcall AddLocationID(long id);
		[propget]
		HRESULT __stdcall CalcMethod([out,retval] PpyVGoodsRestCalcMethod * pRet);
		[propput]
		HRESULT __stdcall CalcMethod(PpyVGoodsRestCalcMethod value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVGoodsRestFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVGoodsRestFlags value);
		[propget]
		HRESULT __stdcall DiffParam([out,retval] PpyVGoodsRestDiffParam * pRet);
		[propput]
		HRESULT __stdcall DiffParam(PpyVGoodsRestDiffParam value);
		[propget]
		HRESULT __stdcall AmtType([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AmtType(long value);
		[propget]
		HRESULT __stdcall CalcPrognosis([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CalcPrognosis(long value);
		[propget]
		HRESULT __stdcall PrgnPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall Date([out,retval] DATE * pRet);
		[propput]
		HRESULT __stdcall Date(DATE value);
		[propget]
		HRESULT __stdcall SupplID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall SupplID(long value);
		[propget]
		HRESULT __stdcall GoodsGrpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GoodsGrpID(long value);
		[propget]
		HRESULT __stdcall QuotKindID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall QuotKindID(long value);
		[propget]
		HRESULT __stdcall AgentID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AgentID(long value);
		[propget]
		HRESULT __stdcall BrandID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall BrandID(long value);
		[propget]
		HRESULT __stdcall Sgg([out,retval] PpyVSubstGrpGoods * pRet);
		[propput]
		HRESULT __stdcall Sgg(PpyVSubstGrpGoods value);
		[propget]
		HRESULT __stdcall DeficitDt([out,retval] DATE * pRet);
		[propput]
		HRESULT __stdcall DeficitDt(DATE value);
	};

	typedef struct SPpyVT_GoodsRest {
		long RecTag;
		long Count;
		double Quantity;
		double PhQtty;
		double Order;
		double SumCost;
		double SumPrice;
		double PctAddedVal;
		double DraftRcpt;
		double SumDraftCost;
		double SumDraftPrice;
	} SPpyVT_GoodsRest;

	typedef struct SPpyVI_GoodsRest {
		long RecTag;
		long GoodsID;
		long GoodsGrpID;
		long LocID;
		BSTR GoodsGrpName;
		BSTR GoodsName;
		BSTR UnitName;
		long IsPredictTrust;
		double Rest;
		double Deficit;
		double PhRest;
		double Order;
		double UnitPerPack;
		double Cost;
		double Price;
		double SumCost;
		double SumPrice;
		double PctAddedVal;
		double Predict;
		double RestInDays;
		double MinStock;
		double SupplOrder;
		long SubstAsscCount;
		double DraftRcpt;
		double SStatSales;
		DATE LastSellDate;
		DATE Expiry;
		long LotID;
		BSTR Serial;
	} SPpyVI_GoodsRest;

	typedef [v1_enum] enum _PpyVBillFlags {
		vbfShowDebt = 1,
		vbfDebtOnly = 2,
		vbfPaymNeeded = 4,
		vbfFreightedOnly = 8,
		vbfCashOnly = 16,
		vbfOrderOnly = 32,
		vbfInvOnly = 64,
		vbfAsSelector = 128,
		vbfLabelOnly = 256,
		vbfAllCurrencies = 512,
		vbfAccturnOnly = 1024,
		vbfSetupNewBill = 2048,
		vbfDraftOnly = 4096,
		vbfDebtsWithPayments = 8192,
		vbfPoolOnly = 16384,
		vbfShowAck = 32768,
		vbfEditPoolByType = 65536,
		vbfIgnoreRtPeriod = 131072
	} PpyVBillFlags;

	typedef [v1_enum] enum _PpyVBrowseBillsType {
		vbbbtUndef = 4294967295,
		vbbbtGoodsBills = 0,
		vbbbtOrderBills = 1,
		vbbbtAccturnBills = 2,
		vbbbtInventoryBills = 3,
		vbbbtPoolBills = 4,
		vbbbtClientDebt = 5,
		vbbbtClientRPayment = 6,
		vbbbtDraftBills = 7,
		bvbbtRealTypes = 8
	} PpyVBrowseBillsType;

	typedef [v1_enum] enum _PpyVBillDenyFlags {
		vbfDenyAdd = 1,
		vbfDenyUpdate = 2,
		vbfDenyRemove = 4
	} PpyVBillDenyFlags;

	typedef [v1_enum] enum _PpyVBillCCMode {
		ccmDebts = 1,
		ccmRPayments = 2
	} PpyVBillCCMode;

	[
		object,
		uuid(66769748-7F22-4078-9145-D1482317B7CB)
	]
	interface IPpyFilt_Bill : IUnknown {
		HRESULT __stdcall SetPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetPaymPeriod(DATE low, DATE upp);
		HRESULT __stdcall AddLocationID(long id);
		[propget]
		HRESULT __stdcall Tag([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall Tag(long value);
		[propget]
		HRESULT __stdcall Bbt([out,retval] PpyVBrowseBillsType * pRet);
		[propput]
		HRESULT __stdcall Bbt(PpyVBrowseBillsType value);
		[propget]
		HRESULT __stdcall Period([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall PaymPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall MainOrgID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall MainOrgID(long value);
		[propget]
		HRESULT __stdcall PoolOpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall PoolOpID(long value);
		[propget]
		HRESULT __stdcall OpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall OpID(long value);
		[propget]
		HRESULT __stdcall CurID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CurID(long value);
		[propget]
		HRESULT __stdcall AccSheetID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AccSheetID(long value);
		[propget]
		HRESULT __stdcall ObjectID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ObjectID(long value);
		[propget]
		HRESULT __stdcall Object2ID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall Object2ID(long value);
		[propget]
		HRESULT __stdcall PayerID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall PayerID(long value);
		[propget]
		HRESULT __stdcall AgentID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AgentID(long value);
		[propget]
		HRESULT __stdcall CreatorID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CreatorID(long value);
		[propget]
		HRESULT __stdcall StatusID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall StatusID(long value);
		[propget]
		HRESULT __stdcall AssocID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AssocID(long value);
		[propget]
		HRESULT __stdcall PoolBillID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall PoolBillID(long value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVBillFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVBillFlags value);
		[propget]
		HRESULT __stdcall DenyFlags([out,retval] PpyVBillDenyFlags * pRet);
		[propput]
		HRESULT __stdcall DenyFlags(PpyVBillDenyFlags value);
		[propget]
		HRESULT __stdcall ClientCardMode([out,retval] PpyVBillCCMode * pRet);
		[propput]
		HRESULT __stdcall ClientCardMode(PpyVBillCCMode value);
		[propget]
		HRESULT __stdcall Ft_STax([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall Ft_STax(long value);
		[propget]
		HRESULT __stdcall Ft_ClosedOrder([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall Ft_ClosedOrder(long value);
		[propget]
		HRESULT __stdcall AmtRangeMin([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall AmtRangeMin(double value);
		[propget]
		HRESULT __stdcall AmtRangeMax([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall AmtRangeMax(double value);
		[propget]
		HRESULT __stdcall Sel([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall Sel(long value);
	};

	typedef struct SPpyVT_Bill {
		long RecTag;
		long Count;
		double Sum;
		double Debt;
		double InSaldo;
		double Debit;
		double Credit;
		double OutSaldo;
	} SPpyVT_Bill;

	typedef struct SPpyVI_Bill {
		long RecTag;
		long ID;
		BSTR Code;
		DATE Dt;
		long BillNo;
		DATE DueDate;
		long OpID;
		long StatusID;
		long UserID;
		long MainOrgID;
		long LocID;
		long Object;
		long Object2;
		long CurID;
		double CRate;
		double Amount;
		long LinkBillID;
		long Flags;
		long Flags2;
		long SCardID;
		BSTR Memo;
		double Debit;
		double Credit;
		double Saldo;
		DATE LastPaymDate;
	} SPpyVI_Bill;

	typedef struct SPpyVT_GoodsOpAnlz {
		long RecTag;
		long Count;
		double Qtty;
		double PhQtty;
		double Cost;
		double Price;
		double Income;
		double RestCost;
		double RestPrice;
		double PlanQtty;
		double PlanSum;
		long InCount;
		double InQtty;
		double InPhQtty;
		double InCost;
		double InPrice;
		double InIncome;
	} SPpyVT_GoodsOpAnlz;

	typedef struct PpyVGoodsOpAnlzCmpVal {
		double Val;
		double Cmp;
	} PpyVGoodsOpAnlzCmpVal;

	typedef struct SPpyVI_GoodsOpAnlz {
		long RecTag;
		long LocID;
		long InOutTag;
		long GoodsID;
		long GoodsGrpID;
		long SubstArID;
		long SubstPsnID;
		long SubstLocID;
		BSTR GoodsName;
		double UnitPerPack;
		PpyVGoodsOpAnlzCmpVal Qtty;
		double PhQtty;
		double OldCost;
		double PlanQtty;
		double OldPrice;
		double PlanSumPrice;
		double Cost;
		double Price;
		PpyVGoodsOpAnlzCmpVal SumCost;
		PpyVGoodsOpAnlzCmpVal SumPrice;
		PpyVGoodsOpAnlzCmpVal Income;
		double PctVal;
		PpyVGoodsOpAnlzCmpVal Rest;
		PpyVGoodsOpAnlzCmpVal RestCostSum;
		PpyVGoodsOpAnlzCmpVal RestPriceSum;
	} SPpyVI_GoodsOpAnlz;

	typedef [v1_enum] enum _PpyVGoodsOpAnlzOpGrp {
		vgoaogSelected = 0,
		vgoaogIncoming = 1,
		vgoaogProfitable = 2,
		vgoaogPayed = 3,
		vgoaogInOutAnalyze = 4
	} PpyVGoodsOpAnlzOpGrp;

	typedef [v1_enum] enum _PpyVGoodsOpAnlzFlags {
		vgoafLabelOnly = 1,
		vgoafDiffByPrice = 2,
		vgoafDiffByNetPrice = 4,
		vgoafIntrReval = 8,
		vgoafPriceWithoutExcise = 16,
		vgoafUseABCAnlz = 32,
		vgoafCalcRest = 64,
		vgoafPriceDeviation = 128,
		vgoafDisplayWoPacks = 256,
		vgoafEachLocation = 512,
		vgoafCalcOrder = 1024,
		vgoafShowSStatSales = 2048,
		vgoafCompareWithReceipt = 4096,
		vgoafUnprofitableGoods = 8192,
		vgoafBadSellingGoods = 16384,
		vgoafComparePctDiff = 32768,
		vgoafBillListAsTradePlan = 65536,
		vgoafTradePlanObjAsSuppl = 131072,
		vgoafTradePlanGoodsOnly = 262144,
		vgoafAddNzRestItems = 524288
	} PpyVGoodsOpAnlzFlags;

	typedef [v1_enum] enum _PpyVGoodsOpAnlzABCGrp {
		vgoaAbcGroupByCostSum = 0,
		vgoaAbcGroupByPriceSum = 1,
		vgoaAbcGroupByQtty = 2,
		vgoaAbcGroupByIncome = 3
	} PpyVGoodsOpAnlzABCGrp;

	[
		object,
		uuid(32B73240-5AED-4EFC-B6B8-B551C6E822F6)
	]
	interface IPpyFilt_GoodsOpAnlz : IUnknown {
		HRESULT __stdcall AddBillID(long id);
		HRESULT __stdcall FreeBillList();
		HRESULT __stdcall AddLocationID(long id);
		HRESULT __stdcall FreeLocList();
		HRESULT __stdcall SetPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetCmpPeriod(DATE low, DATE upp);
		[propget]
		HRESULT __stdcall CmpRestCalcDate([out,retval] DATE * pRet);
		[propput]
		HRESULT __stdcall CmpRestCalcDate(DATE value);
		[propget]
		HRESULT __stdcall CmpPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall Period([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall OpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall OpID(long value);
		[propget]
		HRESULT __stdcall OpGrpID([out,retval] PpyVGoodsOpAnlzOpGrp * pRet);
		[propput]
		HRESULT __stdcall OpGrpID(PpyVGoodsOpAnlzOpGrp value);
		[propget]
		HRESULT __stdcall AccSheetID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AccSheetID(long value);
		[propget]
		HRESULT __stdcall ObjectID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ObjectID(long value);
		[propget]
		HRESULT __stdcall ObjCityID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ObjCityID(long value);
		[propget]
		HRESULT __stdcall SupplID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall SupplID(long value);
		[propget]
		HRESULT __stdcall AgentID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AgentID(long value);
		[propget]
		HRESULT __stdcall SupplAgentID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall SupplAgentID(long value);
		[propget]
		HRESULT __stdcall GoodsGrpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GoodsGrpID(long value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVGoodsOpAnlzFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVGoodsOpAnlzFlags value);
		[propget]
		HRESULT __stdcall Sgg([out,retval] PpyVSubstGrpGoods * pRet);
		[propput]
		HRESULT __stdcall Sgg(PpyVSubstGrpGoods value);
		[propget]
		HRESULT __stdcall RestCalcDate([out,retval] DATE * pRet);
		[propput]
		HRESULT __stdcall RestCalcDate(DATE value);
		[propget]
		HRESULT __stdcall QuotKindID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall QuotKindID(long value);
		[propget]
		HRESULT __stdcall ABCAnlzGroup([out,retval] short * pRet);
		[propput]
		HRESULT __stdcall ABCAnlzGroup(short value);
		[propget]
		HRESULT __stdcall A([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall A(double value);
		[propget]
		HRESULT __stdcall B([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall B(double value);
		[propget]
		HRESULT __stdcall C([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall C(double value);
		[propget]
		HRESULT __stdcall D([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall D(double value);
		[propget]
		HRESULT __stdcall E([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall E(double value);
		[propget]
		HRESULT __stdcall ABCGroupBy([out,retval] PpyVGoodsOpAnlzABCGrp * pRet);
		[propput]
		HRESULT __stdcall ABCGroupBy(PpyVGoodsOpAnlzABCGrp value);
	};

	typedef [v1_enum] enum _PpyVTSessionFlags {
		vtsesfSuperSessOnly = 1,
		vtsesfCurrent = 2,
		vtsesfManufPlan = 4
	} PpyVTSessionFlags;

	[
		object,
		uuid(80CF9697-E603-4406-9A8D-EC62566CF3B2)
	]
	interface IPpyFilt_TSession : IUnknown {
		HRESULT __stdcall SetStPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetFnPeriod(DATE low, DATE upp);
		[propget]
		HRESULT __stdcall Order([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall Order(long value);
		[propget]
		HRESULT __stdcall SuperSessID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall SuperSessID(long value);
		[propget]
		HRESULT __stdcall PrcID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall PrcID(long value);
		[propget]
		HRESULT __stdcall TechID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall TechID(long value);
		[propget]
		HRESULT __stdcall ArID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ArID(long value);
		[propget]
		HRESULT __stdcall Ar2ID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall Ar2ID(long value);
		[propget]
		HRESULT __stdcall StPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall StTime([out,retval] DATE * pRet);
		[propput]
		HRESULT __stdcall StTime(DATE value);
		[propget]
		HRESULT __stdcall FnPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall FnTime([out,retval] DATE * pRet);
		[propput]
		HRESULT __stdcall FnTime(DATE value);
		[propget]
		HRESULT __stdcall StatusFlags([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall StatusFlags(long value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVTSessionFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVTSessionFlags value);
		[propget]
		HRESULT __stdcall Ft_Idle([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall Ft_Idle(long value);
	};

	typedef struct SPpyVT_TSession {
		long Count;
		long Duration;
	} SPpyVT_TSession;

	typedef [v1_enum] enum _PpyVPrjTaskFlags {
		vprjtfUnbindedOnly = 1,
		vprjtfUnviewedOnly = 2,
		vprjtfUnviewedEmployerOnly = 4,
		vprjtfNotShowPPWaitOnInit = 8
	} PpyVPrjTaskFlags;

	typedef [v1_enum] enum _PpyVPrjTaskSortOrder {
		vprjtoByDefault = 0,
		vprjtoByDt = 1,
		vprjtoByStartDt = 2,
		vprjtoByEstFinishDt = 3,
		vprjtoByFinishDt = 4,
		vprjtoByCreator = 5,
		vprjtoByEmployer = 6,
		vprjtoByClient = 7,
		vprjtoByCode = 8
	} PpyVPrjTaskSortOrder;

	typedef [v1_enum] enum _PpyVPrjTaskTabType {
		vprjtctNone = 0,
		vprjtctDateHour = 1,
		vprjtctClientDate = 2,
		vprjtctEmployerDate = 3,
		vprjtctClientEmployer = 4,
		vprjtctEmployerHour = 5
	} PpyVPrjTaskTabType;

	typedef [v1_enum] enum _PpyVPrjTaskTabParam {
		vprjtctpNone = 0,
		vprjtctpUnComplTask = 1,
		vprjtctpComplTaskRatio = 2,
		vprjtctpWrofBillPrct = 3,
		vprjtctpTaskCount = 4
	} PpyVPrjTaskTabParam;

	[
		object,
		uuid(6A8D80B8-9CFE-4132-AC9D-8869A0627797)
	]
	interface IPpyFilt_PrjTask : IUnknown {
		HRESULT __stdcall SetPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetStartPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetEstFinishPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetFinishPeriod(DATE low, DATE upp);
		HRESULT __stdcall IncludeStatus(PpyOPrjTaskStatus status);
		HRESULT __stdcall ExcludeStatus(PpyOPrjTaskStatus status);
		HRESULT __stdcall IncludePriority(PpyOPrjTaskPriority priority);
		HRESULT __stdcall ExcludePriority(PpyOPrjTaskPriority priority);
		[propget]
		HRESULT __stdcall TabType([out,retval] PpyVPrjTaskTabType * pRet);
		[propput]
		HRESULT __stdcall TabType(PpyVPrjTaskTabType value);
		[propget]
		HRESULT __stdcall TabParam([out,retval] PpyVPrjTaskTabParam * pRet);
		[propput]
		HRESULT __stdcall TabParam(PpyVPrjTaskTabParam value);
		[propget]
		HRESULT __stdcall Kind([out,retval] PpyOPrjTaskKind * pRet);
		[propput]
		HRESULT __stdcall Kind(PpyOPrjTaskKind value);
		[propget]
		HRESULT __stdcall Order([out,retval] PpyVPrjTaskSortOrder * pRet);
		[propput]
		HRESULT __stdcall Order(PpyVPrjTaskSortOrder value);
		[propget]
		HRESULT __stdcall ProjectID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ProjectID(long value);
		[propget]
		HRESULT __stdcall ClientID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ClientID(long value);
		[propget]
		HRESULT __stdcall EmployerID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall EmployerID(long value);
		[propget]
		HRESULT __stdcall TemplateID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall TemplateID(long value);
		[propget]
		HRESULT __stdcall CreatorID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CreatorID(long value);
		[propget]
		HRESULT __stdcall CliCityID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CliCityID(long value);
		[propget]
		HRESULT __stdcall LinkTaskID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall LinkTaskID(long value);
		[propget]
		HRESULT __stdcall Period([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall StartPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall EstFinishPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall FinishPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVPrjTaskFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVPrjTaskFlags value);
		[propget]
		HRESULT __stdcall StartTmPeriodBeg([out,retval] DATE * pRet);
		[propput]
		HRESULT __stdcall StartTmPeriodBeg(DATE value);
		[propget]
		HRESULT __stdcall StartTmPeriodEnd([out,retval] DATE * pRet);
		[propput]
		HRESULT __stdcall StartTmPeriodEnd(DATE value);
		[propget]
		HRESULT __stdcall Sgd([out,retval] PpyVSubstGrpDate * pRet);
		[propput]
		HRESULT __stdcall Sgd(PpyVSubstGrpDate value);
	};

	typedef struct SPpyVI_PrjTask {
		long RecTag;
		long ID;
		long ProjectID;
		PpyOPrjTaskKind Kind;
		BSTR Code;
		long CreatorID;
		long GroupID;
		long EmployerID;
		long ClientID;
		long TemplateID;
		DATE Dt;
		DATE Tm;
		DATE StartDt;
		DATE StartTm;
		DATE EstFinishDt;
		DATE EstFinishTm;
		DATE FinishDt;
		DATE FinishTm;
		PpyOPrjTaskPriority Priority;
		PpyOPrjTaskStatus Status;
		long DrPrd;
		long DrKind;
		long DrDetail;
		PpyOPrjTaskFlags Flags;
		long DlvrAddrID;
		long LinkTaskID;
		double Amount;
		long OpenCount;
		long BillArID;
		BSTR Descr;
		BSTR Memo;
	} SPpyVI_PrjTask;

	typedef [v1_enum] enum _PpyVProjectFlags {
		vprjfShowNonActive = 1,
		vprjfShowArchived = 2,
		vprjfPrintPrjTasks = 4
	} PpyVProjectFlags;

	typedef [v1_enum] enum _PpyVProjectSortOrder {
		vprjoByName = 0,
		vprjoByBegDt = 1
	} PpyVProjectSortOrder;

	[
		object,
		uuid(10E19D3B-C520-44A4-BB51-2BA8303C2864)
	]
	interface IPpyFilt_Project : IUnknown {
		HRESULT __stdcall SetStartPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetEstFinishPeriod(DATE low, DATE upp);
		[propget]
		HRESULT __stdcall ParentID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ParentID(long value);
		[propget]
		HRESULT __stdcall StartPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall EstFinishPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall ClientID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ClientID(long value);
		[propget]
		HRESULT __stdcall MngrID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall MngrID(long value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVProjectFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVProjectFlags value);
		[propget]
		HRESULT __stdcall SortOrd([out,retval] PpyVProjectSortOrder * pRet);
		[propput]
		HRESULT __stdcall SortOrd(PpyVProjectSortOrder value);
	};

	typedef struct SPpyVI_Project {
		long RecTag;
		long PrjTaskID;
		long ID;
		PpyOProjectKind Kind;
		long ParentID;
		BSTR Name;
		BSTR Code;
		DATE Dt;
		DATE BeginDt;
		DATE EstFinishDt;
		DATE FinishDt;
		long MngrID;
		long ClientID;
		long TemplateID;
		PpyOProjectStatus Status;
		long Flags;
		long BillOpID;
		BSTR Descr;
		BSTR Memo;
	} SPpyVI_Project;

	typedef [v1_enum] enum _PpyVOpGroupingFlags {
		vopgrpfLabelOnly = 1,
		vopgrpfCalcRest = 2,
		vopgrpfPrnBillList = 4,
		vopgrpfAllCurrencies = 8,
		vopgrpfCalcAvgLn = 16
	} PpyVOpGroupingFlags;

	typedef [v1_enum] enum _PpyVOpGroupingCycleStats {
		vopgrpcsNone = 0,
		vopgrpcsAverage = 1,
		vopgrpcsMin = 2,
		vopgrpcsMax = 3,
		vopgrpcsTrend = 4
	} PpyVOpGroupingCycleStats;

	[
		object,
		uuid(99A90A03-CE54-4C0D-91EB-28EA48C6C2EB)
	]
	interface IPpyFilt_OpGrouping : IUnknown {
		HRESULT __stdcall SetPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetLotsPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetShipmentPeriod(DATE low, DATE upp);
		HRESULT __stdcall AddLocationID(long id);
		HRESULT __stdcall FreeLocList();
		[propget]
		HRESULT __stdcall CycleStat([out,retval] PpyVOpGroupingCycleStats * pRet);
		[propput]
		HRESULT __stdcall CycleStat(PpyVOpGroupingCycleStats value);
		[propget]
		HRESULT __stdcall Period([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall LotsPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall ShipmentPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall OpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall OpID(long value);
		[propget]
		HRESULT __stdcall CurID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CurID(long value);
		[propget]
		HRESULT __stdcall SupplID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall SupplID(long value);
		[propget]
		HRESULT __stdcall ArID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ArID(long value);
		[propget]
		HRESULT __stdcall GoodsGrpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GoodsGrpID(long value);
		[propget]
		HRESULT __stdcall GoodsID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall GoodsID(long value);
		[propget]
		HRESULT __stdcall ExtGoodsTypeID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ExtGoodsTypeID(long value);
		[propget]
		HRESULT __stdcall SupplAgentID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall SupplAgentID(long value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVOpGroupingFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVOpGroupingFlags value);
		[propget]
		HRESULT __stdcall Cycle([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall Cycle(long value);
		[propget]
		HRESULT __stdcall NumCycles([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall NumCycles(long value);
	};

	typedef struct SPpyVI_OpGrouping {
		long RecTag;
		DATE Dt;
		long ObjectID;
		long OpID;
		BSTR OpName;
		long GoodsTaxGrpID;
		long LotTaxGrpID;
		long fVatFreeSuppl;
		long fToggleSTax;
		long Sign;
		long Reserve2;
		long Count;
		long LnCount;
		long AvgLn;
		double Qtty;
		double PhQtty;
		double Amount;
		double Cost;
		double Price;
		double Discount;
		double Income;
		double ExtCost;
		double ExtPrice;
		double VatSum;
		double ExciseSum;
		double STaxSum;
	} SPpyVI_OpGrouping;

	typedef [v1_enum] enum _PpyVDebtTrnovrFlags {
		fdtDebtOnly = 1,
		fdtPrintExt = 2,
		fdtNoForwardPaym = 4,
		fdtLabelOnly = 8,
		fdtByReckoning = 16,
		fdtAllCurrencies = 32,
		fdtByCost = 64,
		fdtExtended = 128,
		fdtInclZeroDebt = 256,
		fdtDeliveryAddr = 512,
		fdtCalcTotalDebt = 1024,
		fdtSkipPassive = 2048
	} PpyVDebtTrnovrFlags;

	typedef [v1_enum] enum _PpyVDebtTrnovrCycleKind {
		dtckNone = 0,
		dtckExpiry = 1,
		dtckDelay = 2,
		dtckShipments = 3,
		dtckPayments = 4
	} PpyVDebtTrnovrCycleKind;

	typedef [v1_enum] enum _PpyVDebtTrnovrExtKind {
		dtekNone = 0,
		dtekExpiryPart = 1,
		dtekTurnover = 2
	} PpyVDebtTrnovrExtKind;

	typedef [v1_enum] enum _PpyVDebtTrnovrSortOrder {
		dtOrdByDefault = 0,
		dtOrdByArticleID = 1,
		dtOrdByArticleName = 2,
		dtOrdByDebit = 3,
		dtOrdByDebt = 4,
		dtOrdByStop = 5
	} PpyVDebtTrnovrSortOrder;

	[
		object,
		uuid(F43D1D16-1C84-4FA1-88EB-E28B2BC6F10C)
	]
	interface IPpyFilt_DebtTrnovr : IUnknown {
		HRESULT __stdcall SetPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetPaymPeriod(DATE low, DATE upp);
		HRESULT __stdcall SetExpiryPeriod(DATE low, DATE upp);
		HRESULT __stdcall AddLocationID(long id);
		HRESULT __stdcall FreeLocList();
		HRESULT __stdcall AddContragentID(long id);
		HRESULT __stdcall FreeContragentList();
		[propget]
		HRESULT __stdcall Period([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall PaymPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall ExpiryPeriod([out,retval] SDateRange * pRet);
		[propget]
		HRESULT __stdcall AccSheetID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AccSheetID(long value);
		[propget]
		HRESULT __stdcall OpID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall OpID(long value);
		[propget]
		HRESULT __stdcall CurID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CurID(long value);
		[propget]
		HRESULT __stdcall AgentID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AgentID(long value);
		[propget]
		HRESULT __stdcall PayerID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall PayerID(long value);
		[propget]
		HRESULT __stdcall SortOrder([out,retval] PpyVDebtTrnovrSortOrder * pRet);
		[propput]
		HRESULT __stdcall SortOrder(PpyVDebtTrnovrSortOrder value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVDebtTrnovrFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVDebtTrnovrFlags value);
		[propget]
		HRESULT __stdcall Sgb([out,retval] PpyVSubstGrpBill * pRet);
		[propput]
		HRESULT __stdcall Sgb(PpyVSubstGrpBill value);
		[propget]
		HRESULT __stdcall Sgp([out,retval] PpyVSubstGrpPerson * pRet);
		[propput]
		HRESULT __stdcall Sgp(PpyVSubstGrpPerson value);
		[propget]
		HRESULT __stdcall Sgd([out,retval] PpyVSubstGrpDate * pRet);
		[propput]
		HRESULT __stdcall Sgd(PpyVSubstGrpDate value);
		[propget]
		HRESULT __stdcall CityID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CityID(long value);
		[propget]
		HRESULT __stdcall CategoryID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall CategoryID(long value);
		[propget]
		HRESULT __stdcall CycleKind([out,retval] PpyVDebtTrnovrCycleKind * pRet);
		[propput]
		HRESULT __stdcall CycleKind(PpyVDebtTrnovrCycleKind value);
		[propget]
		HRESULT __stdcall Cycle([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall Cycle(long value);
		[propget]
		HRESULT __stdcall NumCycles([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall NumCycles(long value);
		[propget]
		HRESULT __stdcall ExtKind([out,retval] PpyVDebtTrnovrExtKind * pRet);
		[propput]
		HRESULT __stdcall ExtKind(PpyVDebtTrnovrExtKind value);
		[propget]
		HRESULT __stdcall ExtExpiryTerm([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall ExtExpiryTerm(long value);
		[propget]
		HRESULT __stdcall ExtExpiryMinPart([out,retval] double * pRet);
		[propput]
		HRESULT __stdcall ExtExpiryMinPart(double value);
		[propget]
		HRESULT __stdcall Article2ID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall Article2ID(long value);
		[propget]
		HRESULT __stdcall AccSheet2ID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall AccSheet2ID(long value);
	};

	typedef struct SPpyVI_DebtTrnovr {
		long RecTag;
		long ArticleID;
		long Ar;
		long PersonID;
		BSTR ArName;
		long BillID;
		long CurID;
		long TabID;
		BSTR TabText;
		DATE PayDate;
		DATE LastPaymDate;
		double Debit;
		double Credit;
		double Debt;
		double RPaym;
		double Reckon;
		double RDebt;
		double TDebt;
		long DebitCount;
		long CreditCount;
		double AvgPaym;
		long IsStop;
		long MaxDelay;
	} SPpyVI_DebtTrnovr;

	typedef [v1_enum] enum _PpyVLotOpFlags {
		flotopZeroLotOps = 1
	} PpyVLotOpFlags;

	[
		object,
		uuid(2452EE41-D912-48A3-B2F2-D0B0021589FE)
	]
	interface IPpyFilt_LotOp : IUnknown {
		[propget]
		HRESULT __stdcall LotID([out,retval] long * pRet);
		[propput]
		HRESULT __stdcall LotID(long value);
		[propget]
		HRESULT __stdcall Flags([out,retval] PpyVLotOpFlags * pRet);
		[propput]
		HRESULT __stdcall Flags(PpyVLotOpFlags value);
	};

	typedef struct SPpyVI_LotOp {
		long RecTag;
		long LocID;
		DATE Dt;
		long OprNo;
		long BillID;
		long RByBill;
		long Reverse;
		long CorrLoc;
		long LotID;
		long GoodsID;
		long Flags;
		double Quantity;
		double Rest;
		double Cost;
		double WtQtty;
		double WtRest;
		double Price;
		double QuotPrice;
		double Discount;
		long CurID;
		double CurPrice;
	} SPpyVI_LotOp;

	typedef struct SPpyO_DebtDim {
		long RecTag;
		long ID;
		BSTR Name;
		BSTR Symb;
	} SPpyO_DebtDim;

	typedef struct SAlcRepConfig {
		long RcptOpID;
		long SaleRetOpID;
		long RcptEtcOpID;
		long ExpndOpID;
		long SupplRetOpID;
		long ExpndEtcOpID;
		long IntrExpndOpID;
		long AlcGoodsGrpID;
		long BeerGoodsGrpID;
		long CategoryTagID;
		long CategoryClsDim;
		long VolumeClsDim;
		long AlcLicRegTypeID;
		long KppDlvrExt;
		long KppRegTypeID;
		long WhsExpTagID;
		long ManufImpTagID;
		BSTR SubstCategoryCode;
		long TranspLicRegTypeID;
	} SAlcRepConfig;

	typedef struct SAlcRepGoodsItem {
		long StatusFlags;
		long GoodsID;
		long LotID;
		double Volume;
		double Brutto;
		BSTR CategoryCode;
		BSTR CategoryName;
		BSTR MsgPool;
	} SAlcRepGoodsItem;

	[
		object,
		uuid(30C70AAD-23D3-44B0-96AD-232EA721EB3D)
	]
	interface IPrcssrAlcReport : IUnknown {
		HRESULT __stdcall Init([out,retval] long * pRet);
		HRESULT __stdcall SetConfig([in] SAlcRepConfig * pCfg, [out,retval] long * pRet);
		HRESULT __stdcall ConfigAddStorageLoc([in] long locID, [out,retval] long * pRet);
		HRESULT __stdcall ConfigAddLotManufTag([in] long manufTagID, [out,retval] long * pRet);
		HRESULT __stdcall PreprocessGoodsItem([in] long goodsID, [in] long lotID, [in] long flags, [out] SAlcRepGoodsItem * pItem, [out,retval] long * pRet);
		HRESULT __stdcall IsStorageLoc([in] long locID, [out,retval] long * pRet);
		HRESULT __stdcall IsStorageBillLoc([in] long billID, [out,retval] long * pRet);
		HRESULT __stdcall GetLotManuf([in] long lotID, [out] BSTR * pMsg, [out,retval] long * pRet);
		HRESULT __stdcall GetWkrRegister([in] long wkr, [in] long psnID, [in] long locID, [in] DATE actualDate, [out] SPpyO_Register * pRec, [out,retval] long * pRet);
		HRESULT __stdcall GetWkrRegisterNumber([in] long wkr, [in] long psnID, [in] long locID, [in] DATE actualDate, [out,retval] BSTR * pRet);
		HRESULT __stdcall GetWkrRegisterList([in] long wkr, [in] long psnID, [in] long locID, [out,retval] IStrAssocList ** pRet);
		HRESULT __stdcall GetWkrRegisterListByPeriod([in] long wkr, [in] long psnID, [in] long locID, [in] SDateRange * pPeriod, [out,retval] ILongList ** pRet);
		HRESULT __stdcall FetchRegister([in] long regID, [in] long psnID, [in] long locID, [out] SPpyO_Register * pRec, [out,retval] long * pRet);
		HRESULT __stdcall GetConfig([out] SAlcRepConfig * pCfg, [out,retval] long * pRet);
		HRESULT __stdcall IsAlcGoods([in] long goodsID, [out,retval] long * pRet);
	};

	typedef struct SPpyO_CCheck {
		long ID;
		long Code;
		long PosNodeID;
		long PosNumber;
		long UserID;
		long CSessID;
		DATE Dt;
		DATE Tm;
		long Flags;
		double Amount;
		double Discount;
		long SCardID;
		BSTR SCardCode;
		long SalerID;
		long CTableNo;
		long GuestCount;
		long AddrID;
		long LinkCCheckID;
		DATE StartOrdDt;
		DATE StartOrdTm;
		DATE EndOrdDt;
		DATE EndOrdTm;
		DATE CreationDt;
		DATE CreationTm;
		BSTR Memo;
	} SPpyO_CCheck;

	typedef struct SPpyO_CCheckLine {
		long GoodsID;
		double Quantity;
		double PhQtty;
		double Price;
		double Discount;
		double BeforeGiftPrice;
		long GiftID;
		long Flags;
		long Division;
		long Queue;
		BSTR Barcode;
		BSTR Serial;
		BSTR GoodsName;
	} SPpyO_CCheckLine;

	typedef struct SPpyO_CCheckPaym {
		long CCheckID;
		long RByCheck;
		long PaymType;
		double Amount;
		long SCardID;
		BSTR SCardCode;
	} SPpyO_CCheckPaym;

	[
		object,
		uuid(9CBADF24-A82B-496C-A712-CA6CD5FEC597)
	]
	interface ICCheckPacket : IUnknown {
		HRESULT __stdcall Init([out,retval] long * pRet);
		HRESULT __stdcall PutHeader([in] SPpyO_CCheck * pHeader, [out,retval] long * pRet);
		HRESULT __stdcall GetHeader([out] SPpyO_CCheck * pHeader, [out,retval] long * pRet);
		HRESULT __stdcall AddItem([in] SPpyO_CCheckLine * pItem, [out,retval] long * pRet);
		HRESULT __stdcall GetItemsCount([out,retval] long * pRet);
		HRESULT __stdcall GetItem([in] long position, [out] SPpyO_CCheckLine * pItem, [out,retval] long * pRet);
		HRESULT __stdcall EnumItems([in,out] long * pIdx, [out] SPpyO_CCheckLine * pItem, [out,retval] long * pRet);
		HRESULT __stdcall AddPaymItem([in] SPpyO_CCheckPaym * pPaymItem, [out,retval] long * pRet);
		HRESULT __stdcall GetPaymItemsCount([out,retval] long * pRet);
		HRESULT __stdcall GetPaymItem([in] long position, [out] SPpyO_CCheckPaym * pPaymItem, [out,retval] long * pRet);
	};

	[
		object,
		uuid(FC3B2FE7-6A83-4D1E-88D0-CC71248F8483)
	]
	interface IPapyrusObjCCheck : IUnknown {
		HRESULT __stdcall Search([in] long id, [out] SPpyO_CCheck * pRec, [out,retval] long * pRet);
		HRESULT __stdcall CreatePacket([out,retval] ICCheckPacket ** pRet);
		HRESULT __stdcall GetPacket([in] long id, ICCheckPacket * pPack, [out,retval] long * pRet);
	};

	typedef struct UhttGoodsProcessorEntry {
		long Ident;
		BSTR Code;
		BSTR Name;
		BSTR Category;
		BSTR Brand;
		long ResultFlags;
	} UhttGoodsProcessorEntry;

	[
		object,
		uuid(38DD82C0-2EF1-4819-A3CC-82F743EB9059)
	]
	interface IUhttGoodsProcessor : IUnknown {
		HRESULT __stdcall Init([out,retval] long * pRet);
		HRESULT __stdcall Put([in] UhttGoodsProcessorEntry * pEntry, [out,retval] long * pRet);
		HRESULT __stdcall Run([out,retval] long * pRet);
		HRESULT __stdcall GetResultCount([out,retval] long * pRet);
		HRESULT __stdcall GetResult(long idx, [out] UhttGoodsProcessorEntry * pEntry, [out,retval] long * pRet);
	};

	[
		uuid(A09E3337-7A9A-4FDE-8D05-928217CE4176),
		version(1.0)
	]
	coclass PapyrusTextAnalyzer {
		[default] interface IPapyrusTextAnalyzer;
		interface ISupportErrorInfo;
	};

	[
		uuid(EF3AD699-AC52-4249-91F3-CCBA49A69647),
		version(1.0)
	]
	coclass UhttGoodsProcessor {
		[default] interface IUhttGoodsProcessor;
		interface ISupportErrorInfo;
	};

	[
		uuid(5B0E02E8-E798-4366-9B08-1B324E8C9BA0)
	]
	coclass StrAssocList {
		interface IStrAssocList;
		interface ISupportErrorInfo;
	};

	[
		uuid(E8191E79-0F59-4FB2-A069-3D82F66C1D3A)
	]
	coclass CompleteList {
		interface ICompleteList;
		interface ISupportErrorInfo;
	};

	[
		uuid(F91BDE6C-5033-41C4-93BB-CFFE098115F1)
	]
	coclass NaturalTokenArray {
		[default] interface INaturalTokenArray;
		interface ISupportErrorInfo;
	};

	[
		uuid(7B09CF87-452B-487A-ADDE-88174935AC0A)
	]
	coclass NaturalTokenRecognizer {
		[default] interface INaturalTokenRecognizer;
		interface ISupportErrorInfo;
	};

	[
		uuid(F8A9AE4A-EDE4-4B64-9E18-DB0DCD7A121F),
		version(1.0)
	]
	coclass PPUtil {
		[default] interface IPapyrusUtil;
		interface ISupportErrorInfo;
	};

	[
		uuid(701313E8-6046-46BA-ABC9-47C9817C1813),
		version(1.0)
	]
	coclass PPRtlPriceExtractor {
		[default] interface IPapyrusRtlPriceExtractor;
		interface ISupportErrorInfo;
	};

	[
		uuid(825A51E0-2139-419B-947B-50245AC2AB11),
		version(1.0)
	]
	coclass PPSFile {
		[default] interface ISFile;
		interface ISupportErrorInfo;
	};

	[
		uuid(397A3030-498D-48F3-8D25-7F882A1979EE),
		version(1.0)
	]
	coclass PPDbfCreateFlds {
		[default] interface ISDbfCreateFlds;
		interface ISupportErrorInfo;
	};

	[
		uuid(9DF12A00-A62A-4025-B9FB-5FE170A1141B),
		version(1.0)
	]
	coclass PPDbfRecord {
		[default] interface ISDbfRecord;
		interface ISupportErrorInfo;
	};

	[
		uuid(49D26479-B361-4F6D-A7DC-FE8703D6AEED),
		version(1.0)
	]
	coclass PPDbfTable {
		[default] interface ISDbfTable;
		interface ISupportErrorInfo;
	};

	[
		uuid(E2CEB5D3-821C-488F-9D7C-3A11AB04ACEC),
		version(1.0)
	]
	coclass PPFtp {
		[default] interface IFtp;
		interface ISupportErrorInfo;
	};

	[
		uuid(C0B572C0-B055-4DD7-9E6B-6074E7560E3E),
		version(1.0)
	]
	coclass PPSession {
		[default] interface IPapyrusSession;
		interface ISupportErrorInfo;
	};

	[
		uuid(702CCF6B-EA94-4048-AE5D-416C91FA9B6E),
		version(1.0)
	]
	coclass PPDL200Resolver {
		[default] interface IPapyrusDL200Resolver;
		interface ISupportErrorInfo;
	};

	[
		uuid(E526DF81-1578-476F-AA1A-233646316419),
		version(1.0)
	]
	coclass PPAmountList {
		[default] interface IPapyrusAmountList;
		interface ISupportErrorInfo;
	};

	[
		uuid(0EA59307-E787-4357-B344-E027A8431AB2),
		version(1.0),
		hidden
	]
	coclass PPObjTag {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(EB0A7D7C-CFDF-44F3-8DDD-657A525FCAA6),
		version(1.0),
		hidden
	]
	coclass PPObjUnit {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(9B8AF22D-A66A-4D4E-856E-F9A14466D83B),
		version(1.0),
		hidden
	]
	coclass PPObjOprKind {
		[default] interface IPapyrusObject;
		interface IPapyrusObjOprKind;
		interface ISupportErrorInfo;
	};

	[
		uuid(A1F3659B-CD6D-4C35-B36E-5BA22F81B30C),
		version(1.0),
		hidden
	]
	coclass PPObjAccSheet {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(5FF3C2AD-493F-46A9-A05E-F7630334AB1B),
		version(1.0),
		hidden
	]
	coclass PPObjArticle {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(EEE0C8C2-35E3-41D5-9BE7-CDDAA034FB87),
		version(1.0),
		hidden
	]
	coclass PPObjCashNode {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(4FB175D0-F5BB-4030-BB38-CBAEF017C1D5),
		version(1.0),
		hidden
	]
	coclass PPObjQuotKind {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(8C39172E-67A3-4507-9E6B-074DF9276D66),
		version(1.0),
		hidden
	]
	coclass PPObjGoodsTax {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(2328E9C0-3A9F-4D00-AE1C-ED179A9ED7B6),
		version(1.0),
		hidden
	]
	coclass PPObjSalCharge {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(8681C2C6-79F1-46C5-A66B-B8EFF50FD5C2),
		version(1.0),
		hidden
	]
	coclass PPObjPerson {
		[default] interface IPapyrusObject;
		interface IPapyrusObjPerson;
		interface ISupportErrorInfo;
	};

	[
		uuid(CDCBEF21-571C-4D23-ABE2-659D79A38F81),
		version(1.0),
		hidden
	]
	coclass PPObjStaff {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(FE53F1AF-D994-4BB1-A1E7-43B75B1F3692),
		version(1.0),
		hidden
	]
	coclass PPObjStyloPalm {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(78CE1414-1D35-4025-BF5E-BB3816B855FD),
		version(1.0),
		hidden
	]
	coclass PPObjCurrency {
		[default] interface IPapyrusObject;
		interface IPapyrusObjCurrency;
		interface ISupportErrorInfo;
	};

	[
		uuid(4926428A-DCA9-4340-81DE-521B53C05480),
		version(1.0),
		hidden
	]
	coclass PPObjGoodsClass {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(D962EFF4-BEC2-453A-9C5E-1CBA9AA324AF),
		version(1.0),
		hidden
	]
	coclass PPObjGoods {
		[default] interface IPapyrusObject;
		interface IPapyrusObjGoods;
		interface ISupportErrorInfo;
	};

	[
		uuid(85F1CD6C-F099-4C46-B6F2-34A43EE8B251),
		version(1.0),
		hidden
	]
	coclass PPObjGoodsGroup {
		[default] interface IPapyrusObject;
		interface IPapyrusObjGoodsGroup;
		interface ISupportErrorInfo;
	};

	[
		uuid(5FEEA1EE-B69A-43DA-9895-E0D3DA232433),
		version(1.0)
	]
	coclass PPLocAddrStruc {
		[default] interface ILocAddrStruc;
		interface ISupportErrorInfo;
	};

	[
		uuid(F64957C8-35AC-4CCE-BD7E-412B86A72C0E),
		version(1.0),
		hidden
	]
	coclass PPObjLocation {
		[default] interface IPapyrusObject;
		interface IPapyrusObjLocation;
		interface ISupportErrorInfo;
	};

	[
		uuid(C182937B-76BC-437B-B1E1-2A1A2F40EACD),
		version(1.0),
		hidden
	]
	coclass PPBillPacket {
		[default] interface IPapyrusBillPacket;
		interface ISupportErrorInfo;
	};

	[
		uuid(E8183E9E-DD1E-4AA8-B0E7-4610965D5B19),
		version(1.0),
		hidden
	]
	coclass PPObjBill {
		[default] interface IPapyrusObject;
		interface IPapyrusObjBill;
		interface ISupportErrorInfo;
	};

	[
		uuid(BF6BA1E5-F025-4C53-A029-B32353D8FC50),
		version(1.0),
		hidden
	]
	coclass PPObjWorld {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(77D51566-AA77-44C9-BDBC-210A52914D64),
		version(1.0),
		hidden
	]
	coclass PPObjRegister {
		[default] interface IPapyrusObject;
		interface IPapyrusObjRegister;
		interface ISupportErrorInfo;
	};

	[
		uuid(F91AF223-B52B-4386-AA5D-2DBF27BBD564),
		version(1.0),
		hidden
	]
	coclass PPPersonRelTypePacket {
		[default] interface IPapyrusPersonRelTypePacket;
		interface ISupportErrorInfo;
	};

	[
		uuid(78C32CDC-2434-4503-810A-6F73C814D1F1),
		version(1.0),
		hidden
	]
	coclass PPObjPersonRelType {
		[default] interface IPapyrusObject;
		interface IPapyrusObjPersonRelType;
		interface ISupportErrorInfo;
	};

	[
		uuid(C7325B28-F2C8-4AC6-922B-A5F1ABBDA788),
		version(1.0),
		hidden
	]
	coclass PPObjTransport {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(A3D40BB7-1C43-40D3-B20E-1A69BA4AE461),
		version(1.0),
		hidden
	]
	coclass PPObjProcessor {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(CB0B7AA8-281C-479D-B6B7-7FC13D250595),
		version(1.0),
		hidden
	]
	coclass PPObjTSession {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(C5BC885B-A68E-496A-9165-E9E31F322ABB),
		version(1.0),
		hidden
	]
	coclass PPObjPrjTask {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(54D3B38E-3E31-4068-9C50-2CC5CB5EC0C7),
		version(1.0),
		hidden
	]
	coclass PPObjProject {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(85FF7167-3158-4A48-A8E0-00FA09A5EC0F),
		version(1.0),
		hidden
	]
	coclass PPObjBrand {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(D226D618-F2B3-48A5-A5E2-04562252C43C),
		version(1.0),
		hidden
	]
	coclass PPObjQCert {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(DA548687-7499-410B-B198-FDBCF48E4191),
		version(1.0)
	]
	coclass PPFiltTrfrAnlz {
		[default] interface IPpyFilt_TrfrAnlz;
		interface ISupportErrorInfo;
	};

	[
		uuid(9F35F8D7-F2CB-4BD2-9957-606A0D10FEF8),
		version(1.0),
		hidden
	]
	coclass PPViewTrfrAnlz {
		[default] interface IPapyrusView;
		interface IPapyrusTrfrAnlz;
		interface ISupportErrorInfo;
	};

	[
		uuid(5D6D87F8-860E-4721-8CF9-CEE106D6D64A),
		version(1.0)
	]
	coclass PPFiltCCheck {
		[default] interface IPpyFilt_CCheck;
		interface ISupportErrorInfo;
	};

	[
		uuid(B0955AAE-738D-44D6-A301-7BE37A1FA217),
		version(1.0),
		hidden
	]
	coclass PPViewCCheck {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(94BCBCF2-706D-40A5-8025-21B30AF89A25),
		version(1.0)
	]
	coclass PPFiltLot {
		[default] interface IPpyFilt_Lot;
		interface ISupportErrorInfo;
	};

	[
		uuid(6D054F5D-CC47-43F9-91AD-01BEE3AA7525),
		version(1.0),
		hidden
	]
	coclass PPViewLot {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(BF5F48A3-9403-4476-9D32-6F3E2D5885B5),
		version(1.0)
	]
	coclass PPFiltGoods {
		[default] interface IPpyFilt_Goods;
		interface ISupportErrorInfo;
	};

	[
		uuid(3BF2A757-2C49-45FC-B870-182208ED4FC1),
		version(1.0),
		hidden
	]
	coclass PPViewGoods {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(DFF1C807-27E4-4927-80CA-061C0484076D),
		version(1.0)
	]
	coclass PPFiltGoodsStruc {
		[default] interface IPpyFilt_GoodsStruc;
		interface ISupportErrorInfo;
	};

	[
		uuid(3B7FFEDB-EF7E-4D97-A947-F451039A889F),
		version(1.0),
		hidden
	]
	coclass PPViewGoodsStruc {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(3517F6D1-D938-4265-A5B2-ABE1EB585E6B),
		version(1.0)
	]
	coclass PPFiltGoodsRest {
		[default] interface IPpyFilt_GoodsRest;
		interface ISupportErrorInfo;
	};

	[
		uuid(276E18BE-DE4D-4537-B283-B5D1F65AFD1D),
		version(1.0),
		hidden
	]
	coclass PPViewGoodsRest {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(386A3A16-9F2C-45A5-B848-9D60E255EF27),
		version(1.0)
	]
	coclass PPFiltBill {
		[default] interface IPpyFilt_Bill;
		interface ISupportErrorInfo;
	};

	[
		uuid(38ED0C64-B8D5-48C6-A99A-386F436753B4),
		version(1.0),
		hidden
	]
	coclass PPViewBill {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(8709A1F7-5D03-49C2-8603-E9F45884D606),
		version(1.0)
	]
	coclass PPQuotation {
		[default] interface IPapyrusQuot;
		interface ISupportErrorInfo;
	};

	[
		uuid(1EB6CACB-5A35-4EAE-BCF7-9117BDC5E548),
		version(1.0)
	]
	coclass PPFiltGoodsOpAnlz {
		[default] interface IPpyFilt_GoodsOpAnlz;
		interface ISupportErrorInfo;
	};

	[
		uuid(DA28C37A-23F2-4889-A0DC-13BDCD0F4CD3),
		version(1.0),
		hidden
	]
	coclass PPViewGoodsOpAnlz {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(C9B878BD-D298-40C2-94FD-0AF067FDF542),
		version(1.0)
	]
	coclass PPFiltTSession {
		[default] interface IPpyFilt_TSession;
		interface ISupportErrorInfo;
	};

	[
		uuid(40623FB1-28C8-4F61-A4F0-010228C1C099),
		version(1.0),
		hidden
	]
	coclass PPViewTSession {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(DF285B88-577D-4320-984B-C920B18F4C30),
		version(1.0)
	]
	coclass PPFiltPrjTask {
		[default] interface IPpyFilt_PrjTask;
		interface ISupportErrorInfo;
	};

	[
		uuid(EB4C5827-6E8E-461F-ACB4-791E8A9DC1E7),
		version(1.0),
		hidden
	]
	coclass PPViewPrjTask {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(A7B3F84B-4E56-411F-91F9-34A77596406C),
		version(1.0)
	]
	coclass PPFiltProject {
		[default] interface IPpyFilt_Project;
		interface ISupportErrorInfo;
	};

	[
		uuid(0C48F869-CBDB-4539-B40D-CAECA1235B99),
		version(1.0),
		hidden
	]
	coclass PPViewProject {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(B71032F5-B258-45C8-8616-65D1F483518F),
		version(1.0)
	]
	coclass PPFiltOpGrouping {
		[default] interface IPpyFilt_OpGrouping;
		interface ISupportErrorInfo;
	};

	[
		uuid(54984C61-0A1F-4C71-81F5-6134805AB4E3),
		version(1.0),
		hidden
	]
	coclass PPViewOpGrouping {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(B27F1C18-B8B3-41D1-AE74-E9B96B86D445),
		version(1.0)
	]
	coclass PPFiltDebtTrnovr {
		[default] interface IPpyFilt_DebtTrnovr;
		interface ISupportErrorInfo;
	};

	[
		uuid(33A3D371-5B9D-41C2-9BE0-236454BF831E),
		version(1.0),
		hidden
	]
	coclass PPViewDebtTrnovr {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(21CF25EA-A4B6-4D52-9408-FA52ED6B96D6),
		version(1.0)
	]
	coclass PPFiltLotOp {
		[default] interface IPpyFilt_LotOp;
		interface ISupportErrorInfo;
	};

	[
		uuid(02C3A700-4749-4B8A-8D70-F3D24F77040F),
		version(1.0),
		hidden
	]
	coclass PPViewLotOp {
		[default] interface IPapyrusView;
		interface ISupportErrorInfo;
	};

	[
		uuid(FD843155-BAD3-419F-B086-BFA3E0DAF33B),
		version(1.0),
		hidden
	]
	coclass PPObjDebtDim {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(F861F80D-C010-46E1-8821-77CBF533A24E)
	]
	coclass PPLotList {
		interface ILotList;
		interface ISupportErrorInfo;
	};

	[
		uuid(F7E81E8F-9FF1-43F2-8147-0168FCF05BAA),
		version(1.0)
	]
	coclass AlcRepOpList {
		interface IAlcRepOpList;
		interface ISupportErrorInfo;
	};

	[
		uuid(A62514E6-0FFB-4C99-88A5-2DC3A470068A),
		version(1.0)
	]
	coclass LongList {
		interface ILongList;
		interface ISupportErrorInfo;
	};

	[
		uuid(A2411213-D197-408C-8D92-E80CC8EDF590),
		version(1.0)
	]
	coclass PrcssrAlcReport {
		interface IPrcssrAlcReport;
		interface ISupportErrorInfo;
	};

	[
		uuid(38306856-54F5-4211-8349-108E94262252),
		version(1.0)
	]
	coclass PPSysJournal {
		interface IPapyrusSysJournal;
		interface ISupportErrorInfo;
	};

	[
		uuid(D13AA2BD-7CB9-4348-90FC-3E06919FF38D),
		version(1.0)
	]
	coclass PPFias {
		interface IFias;
		interface ISupportErrorInfo;
	};

	[
		uuid(A5F972A8-9733-4A7D-B1AF-CF86BDF62499),
		version(1.0)
	]
	coclass PPCCheckPacket {
		[default] interface ICCheckPacket;
		interface ISupportErrorInfo;
	};

	[
		uuid(C3A1F9C1-75B7-4649-A242-0DAB61700654),
		version(1.0)
	]
	coclass PPObjCCheck {
		[default] interface IPapyrusObjCCheck;
		interface ISupportErrorInfo;
	};

	[
		uuid(B9DC6ED4-83EF-48F1-9B9C-BDADE19335B1),
		version(1.0)
	]
	coclass PPObjSCardSeries {
		[default] interface IPapyrusObject;
		interface ISupportErrorInfo;
	};

	[
		uuid(E48E323E-65C2-45C0-AA33-E36191607F02),
		version(1.0)
	]
	coclass PPObjSCard {
		[default] interface IPapyrusObject;
		interface IPapyrusObjSCard;
		interface ISupportErrorInfo;
	};

};

