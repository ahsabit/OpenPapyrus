#line 1 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.cpp"

#line 3 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

// A lexical scanner generated by flex

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
	#define FLEX_BETA
#endif

#ifdef yy_create_buffer
	#define hsql__create_buffer_ALREADY_DEFINED
#else
	#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
	#define hsql__delete_buffer_ALREADY_DEFINED
#else
	#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
	#define hsql__scan_buffer_ALREADY_DEFINED
#else
	#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

// flex integer type definitions
#ifndef FLEXINT_H
#define FLEXINT_H

#include <slib.h>
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#endif /* ! FLEXINT_H */

// begin standard C++ headers

// TODO: this is always defined, so inline it
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
	#define yynoreturn __attribute__((__noreturn__))
#else
	#define yynoreturn
#endif

#define YY_NULL 0 // Returned upon end-of-file

// Promotes a possibly negative, possibly signed char to an integer in range [0..255] for use as an array index.
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

// An opaque pointer
#ifndef YY_TYPEDEF_YY_SCANNER_T
	#define YY_TYPEDEF_YY_SCANNER_T
	typedef void * yyscan_t;
#endif

// For convenience, these vars (plus the bison vars far below) are macros in the reentrant scanner
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

// Enter a start condition.  This macro really ought to take a parameter,
// but we do it the disgusting crufty way forced on us by the ()-less definition of BEGIN.
#define BEGIN yyg->yy_start = 1 + 2 *
// Translate the current start state into a value that can be later handed
// to BEGIN to return to the state.  The YYSTATE alias is for lex compatibility.
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
// Action number for EOF rule of a given start state
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
// Special action meaning "start processing a new file"
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
	#ifdef __ia64__
		// On IA-64, the buffer size is 16k, not 8k.
		// Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
		// Ditto for the __ia64__ case accordingly.
		#define YY_BUF_SIZE 32768
	#else
		#define YY_BUF_SIZE 16384
	#endif
#endif

// The state buf must be large enough to hold one state per character in the main buffer.
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
	#define YY_TYPEDEF_YY_BUFFER_STATE
	typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif
#ifndef YY_TYPEDEF_YY_SIZE_T
	#define YY_TYPEDEF_YY_SIZE_T
	typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
 do { \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
 } while(0)
#define unput(c) yyunput(c, yyg->yytext_ptr , yyscanner)

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
	FILE * yy_input_file;

	char * yy_ch_buf;  /* input buffer */
	char * yy_buf_pos; /* current position in input buffer */
	int yy_buf_size; /* Size of input buffer in bytes, not including room for EOB characters. */
	int yy_n_chars; /* Number of characters read into yy_ch_buf, not including EOB characters. */
	// Whether we "own" the buffer - i.e., we know we created it,
	// and can SAlloc::R() it to grow it, and should SAlloc::F() it to delete it.
	int yy_is_our_buffer;
	// Whether this is an "interactive" input source; if so, and
	// if we're using stdio for input, then we want to use getc()
	// instead of fread(), to make sure we stop fetching input after each newline.
	int yy_is_interactive;
	// Whether we're considered to be at the beginning of a line.
	// If so, '^' rules will be active on the next match, otherwise not.
	int yy_at_bol;
	int yy_bs_lineno; /**< The line count. */
	int yy_bs_column; /**< The column count. */
	int yy_fill_buffer; /* Whether to try to fill the input buffer when we reach the end of it. */
	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER (yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart(FILE * input_file , yyscan_t yyscanner);
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer , yyscan_t yyscanner);
YY_BUFFER_STATE yy_create_buffer(FILE *file, int size , yyscan_t yyscanner);
void yy_delete_buffer(YY_BUFFER_STATE b , yyscan_t yyscanner);
void yy_flush_buffer(YY_BUFFER_STATE b , yyscan_t yyscanner);
void yypush_buffer_state(YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state(yyscan_t yyscanner );

static void yyensure_buffer_stack(yyscan_t yyscanner);
static void yy_load_buffer_state(yyscan_t yyscanner);
static void yy_init_buffer(YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner);
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer(char * base, yy_size_t size , yyscan_t yyscanner);
YY_BUFFER_STATE yy_scan_string(const char * yy_str , yyscan_t yyscanner);
YY_BUFFER_STATE yy_scan_bytes(const char * bytes, int len , yyscan_t yyscanner);

void * yyalloc(yy_size_t , yyscan_t yyscanner);
void * yyrealloc(void *, yy_size_t , yyscan_t yyscanner);
void   yyfree(void * , yyscan_t yyscanner);

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if(!YY_CURRENT_BUFFER) { \
        yyensure_buffer_stack(yyscanner); \
		YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if(!YY_CURRENT_BUFFER) {\
        yyensure_buffer_stack(yyscanner); \
		YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 188
#define YY_END_OF_BUFFER 189
// This struct is not used in this scanner, but its presence is necessary.
struct yy_trans_info {
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
};
static const flex_int16_t yy_accept[1345] = {
	0,
        0,    0,    0,    0,  185,  185,    2,    2,  189,  187,
        4,    4,  187,  187,  176,  183,  176,  176,  180,  176,
      176,  176,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  176,  188,  185,  186,
        2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    4,  171,
        0,    1,    0,  178,  177,  180,  173,  172,  170,  174,

      182,  182,  182,  182,  182,  182,   12,  182,  182,  182,
       19,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,   71,  182,  182,   74,
       83,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      101,  182,  182,  106,  109,  110,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  146,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  175,  185,  184,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,  181,
        0,  177,    5,  182,    7,  182,  182,   10,  182,   13,

      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,   34,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,   48,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,   59,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,   78,  182,  182,   86,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  102,  182,  182,
      182,  107,  182,  182,  182,  182,  182,  182,  182,  182,
      167,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      132,  182,  182,  182,  182,  182,  182,  182,  182,  182,

      182,  182,  147,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    0,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,   20,  182,   22,   23,
       24,  182,  182,  182,   29,  182,  182,  182,   32,   35,
      182,  182,  182,  182,  182,   41,  182,  182,  182,   46,
       47,  182,  182,  182,  182,  182,  182,  182,   56,  182,
      182,  182,   61,   62,  182,  182,   66,  182,   68,   69,

      182,  182,  182,  182,  182,  182,   82,  182,   85,   87,
       88,  182,   90,  182,  182,   93,  182,  182,  182,  182,
      182,  104,  182,  182,  182,  182,  113,  182,  182,  116,
      182,  182,  182,  182,  121,  182,  182,  182,  182,  126,
      182,  182,  182,  182,  134,  135,  182,  182,  182,  182,
      182,  142,  143,  144,  182,  149,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  159,  182,  161,  182,  163,
      164,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    0,    6,    8,

      182,   11,  182,   15,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,   31,  182,  182,  182,  182,  182,
      182,   40,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,   55,   57,  182,  182,  182,   64,  182,   70,
       72,  182,   75,   76,  182,  182,  182,  182,   89,   91,
      182,   94,   95,  182,   98,  182,  182,  182,  182,  111,
      112,  182,  182,  182,  182,  182,  120,  182,  182,  124,
      182,  182,  182,  182,  133,  182,  182,  182,  139,  182,
      182,  182,  182,  182,  152,  182,  182,  182,  156,  182,
      182,  182,  162,  165,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    0,  182,   14,  182,   17,  166,  182,  182,  182,

       25,   27,  182,   30,  182,  182,  182,  182,  182,   39,
      182,   43,  182,   45,   49,   50,  182,   52,  182,  182,
      182,   60,   63,   65,   67,   73,   77,  182,  182,  182,
       84,   92,   96,   99,  182,  103,  182,  108,  182,  182,
      182,  182,  182,  122,  182,  182,  127,  129,  131,  182,
      137,  182,  140,  182,  182,  182,  182,  182,  153,  154,
      155,  157,  182,  182,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    0,    9,   16,
       18,   21,  182,   26,   28,  182,  182,  182,   37,   38,
      182,  182,   51,   53,   54,  182,   79,  182,  182,   97,
      100,  182,  182,  182,  182,  118,  119,  182,  182,  128,
      130,  182,  138,  182,  182,  182,  182,  182,  158,  160,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    0,  182,    0,   33,  182,   42,   44,
      182,  182,   81,  105,  182,  182,  182,  123,  125,  136,
      182,  182,  182,  150,  182,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    0,  182,    0,
      182,   58,   80,  182,  115,  117,  141,  145,  182,  151,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    0,    0,    0,   36,  114,  182,    2,

        2,    2,    2,    2,    2,    0,    0,  168,  148,    2,
        2,    2,    2,    0,    0,    2,    2,    0,    0,    2,
        2,    0,    0,    2,    2,    0,    0,    2,    2,    0,
        0,    2,    2,    0,  169,    2,    2,    0,    2,    0,
        2,  179,    2,    0
    } ;

static const YY_CHAR yy_ec[256] = {
	0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] = {
	0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1353] = {
	0,
        0,    0,    0,    0,  854,  852,   76,    0,  849, 8874,
      151,  153,  821,    0, 8874, 8874,  149,  148,  160,  159,
      777,  775,  156,  156,  165,  210,  202,  255,  151,  163,
      265,  152,  171,  215,  218,  244,  295,  257,    0,  309,
      349,  392,  163,  279,  226,  180,  676, 8874,    0,  741,
        0,  237,  251,  696,  702,    0,    0,  243,  378,  451,
      237,  682,  680,  470,  546,  600,  652,  700,  752,  384,
      458,  795,  466,  532,  533,  534,  846,  895,  944,  547,
      602,  990, 1042,  307,  650,  587,  651,  596,  301, 8874,
      666, 8874,  636, 1107, 1117, 1128, 8874, 8874, 8874, 8874,

        0,  218,  243,  300,  328,  250,  305,  379,  381,  307,
        0,  439,  333,  694,  389,  337,  440,  710,  387,  342,
      394,  447,  468,  474,  763,  467,  468,  480,  542,  481,
      501,  521,  535,  591,  539,  546,    0,  584,  581,  627,
      592,  607,  637,  657,  658,  717,  646,  658,  686,  681,
      734,  705,  720,  717,    0,  751,  739,  757,  745,  764,
      766,  755,  802,  770,  799,  777,  812,  816,  804,  817,
      805,  824,  824,  842,  824,  820,  841,  864,  861,  858,
      862,  860,  897,  872,  859,  879, 8874,    0, 8874,    0,
      396,    0,  631,    0,  614, 1138, 1148, 1159,    0,    0,

        0,    0,  942,  945, 1029,  990, 1156, 1034, 1155, 1202,
      907, 1030, 1168, 1199, 1218, 1258, 1251, 1270, 1285, 1337,
     1334, 1345, 1372, 1272, 1386, 1399, 1448, 1430, 1446, 1394,
     1484, 1447, 1492, 1509, 1512, 1528, 1541, 1554, 1572, 1589,
     1592, 1641, 1608, 1594, 1643, 1658, 1706, 1758, 1684, 1750,
     1754, 1794, 1834, 1798, 1850, 1853, 1876, 1894, 1900, 1684,
     1939, 1851, 1927, 1953, 1954, 1994, 1997, 2015, 2064, 2054,
     2055, 2084, 2099, 2118, 2123, 2144, 2157, 2183, 2195, 2221,
     2268, 2182, 2236, 2240, 2287, 2306, 2321, 2346,    0, 8874,
      601, 1835,    0,  903,    0,  906,  922,    0,  938,    0,

      940,  954,  941,  960,  972,  968,  973, 1156,  995, 1035,
     1046, 1043, 1039, 1161, 1144, 1146, 1160, 1152, 1160, 1169,
     1211, 1260, 1214, 1219, 1205, 1225, 1212, 1226,    0, 1233,
     1257, 1278, 1295, 1308, 1310, 1314, 1330, 1335, 1332, 1332,
     1355, 1362, 1387, 1373, 1398, 1398, 1392, 1402, 1417, 1433,
     1454, 1456, 1461, 1504, 1446, 1460,    0, 1485, 1507, 1513,
     1552, 1605, 1551, 1555, 1542, 1568, 1589,    0, 1611, 1617,
     1624, 1631, 1646, 1652, 1652, 1685, 1660, 1711, 1693, 1700,
        0, 1700, 1717, 1702, 1716, 1716, 1721, 1747, 1738, 1751,
        0, 1739, 1737, 1747, 1753, 1751, 1755, 1764, 1778, 1787,

     1797, 1810,    0, 1802, 1897, 1805, 1941, 1821, 1854, 1856,
     1886, 1907, 1893, 1903, 1996, 1918, 1942,    0,  600, 2411,
     2345, 2404, 2405, 2406, 2243, 2294, 2431, 2449, 2460, 2469,
     2474, 2498, 2513, 2513, 2532, 2581, 2557, 2582, 2595, 2631,
     2607, 2643, 2641, 2672, 2684, 2686, 2700, 2725, 2743, 2740,
     2775, 2784, 2793, 2819, 2834, 2832, 2837, 2882, 2873, 2887,
     2887, 2908, 2932, 2929, 2957, 2983, 2955, 3004, 3008, 3012,
     3050, 3054, 3053, 3098, 3101, 3110, 3136, 3151, 3154, 3166,
     3180, 3192, 3204, 3219, 3223, 3247, 3248, 3267, 3292, 3344,
     3270, 3306, 3341, 3305, 3366, 3369, 3394, 3401, 3415, 3429,

     3440, 3454, 3469, 3521, 3469, 3571, 3504, 3547, 3488, 3553,
     3599, 3612, 3625, 3643, 3656, 3668, 3676, 3681, 3694, 3706,
     3720, 3744, 3749, 3765, 3779, 3795, 3819, 3803, 3833, 3846,
     3858, 3873, 3894, 3896, 3922, 3937, 3950, 3969, 3982, 3995,
     4025, 4031, 4044, 4072, 4080,  582, 1943, 1944, 1945, 1955,
     1972, 1984, 2010, 2005, 2004, 2019,    0, 2025,    0,    0,
     2029, 2018, 2035, 2047,    0, 2048, 2054, 2069, 2055,    0,
     2101, 2105, 2101, 2114, 2136, 2124, 2144, 2144, 2155,    0,
        0, 2160, 2162, 2158, 2181, 2215, 2216, 2216,    0, 2206,
     2218, 2270,    0,    0, 2273, 2260,    0, 2273,    0, 2271,

     2290, 2298, 2301, 2319, 2331, 2349,    0, 2347,    0,    0,
        0, 2342,    0, 2353, 2361,    0, 2364, 2371, 2377, 2377,
     2415,    0, 2422, 2421, 2409, 2415,    0, 2422, 2430,    0,
     2439, 2448, 2463, 2476,    0, 2480, 2486, 2489, 2513,    0,
     2520, 2529, 2544, 2548,    0,    0, 2546, 2556, 2558, 2563,
     2577,    0,    0, 2579, 2596,    0, 2642, 2629, 2640, 2640,
     2669, 2654, 2669, 2689, 2694,    0, 2683,    0, 2701,    0,
     2689,  544, 4091, 4110, 4135, 4138, 4157, 4028, 4176, 4164,
     4202, 4202, 4214, 4250, 4252, 4255, 4280, 4304, 4305, 4306,
     4318, 4344, 4349, 4330, 4369, 4372, 4398, 4406, 4414, 4444,

     4447, 4455, 4496, 4498, 4490, 4532, 4540, 4541, 4581, 4582,
     4590, 4633, 4634, 4634, 4635, 4673, 4685, 4698, 4686, 4699,
     4738, 4739, 4737, 4753, 4764, 4783, 4791, 4803, 4818, 4832,
     4848, 4893, 4851, 4862, 4902, 4906, 4937, 4946, 4950, 4986,
     4994, 4997, 4999, 5028, 5042, 5041, 5053, 5085, 5093, 5094,
     5123, 5135, 5147, 5161, 5173, 5185, 5187, 5213, 5215, 5227,
     5239, 5253, 5265, 5267, 5306, 5291, 5315, 5320, 5350, 5345,
     5363, 5377, 5392, 5385, 5403, 5415, 5417, 5439, 5441, 5446,
     5460, 5476, 5495, 5509, 5523, 5537, 5551, 5575, 5579, 5602,
     5624, 5626, 5648, 5656, 5670, 5678, 5631,  543,    0,    0,

     2689,    0, 2738,    0, 2742, 2734, 2731, 2758, 2760, 2766,
     2774, 2783, 2789, 2801,    0, 2824, 2844, 2839, 2857, 2855,
     2898,    0, 2895, 2888, 2899, 2931, 2932, 2938, 2940, 2957,
     2977, 2999,    0,    0, 2984, 2990, 3000, 2995, 3023,    0,
        0, 3013,    0,    0, 3036, 3065, 3062, 3059,    0,    0,
     3078,    0,    0, 3080, 3068, 3089, 3102, 3119, 3111,    0,
        0, 3133, 3137, 3163, 3155, 3159,    0, 3194, 3205,    0,
     3220, 3222, 3223, 3231,    0, 3272, 3285, 3290, 3286, 3309,
     3313, 3335, 3342, 3347,    0, 3360, 3375, 3380,    0, 3371,
     3396, 3403,    0,    0,  536, 5685, 5699, 5713, 5729, 5742,

     5756, 5764, 5782, 5790, 5808, 5816, 5834, 5843, 5859, 5860,
     5872, 5886, 5901, 5894, 5912, 5930, 5937, 5948, 5960, 5962,
     5986, 5991, 5984, 6014, 6038, 6039, 6043, 6036, 6090, 6087,
     6092, 6122, 6131, 6129, 6138, 6174, 6173, 6182, 6215, 6218,
     6224, 6259, 6267, 6272, 6283, 6313, 6314, 6327, 6355, 6358,
     6366, 6371, 6402, 6413, 6426, 6454, 6457, 6468, 6474, 6508,
     6516, 6544, 6552, 6566, 6578, 6590, 6602, 6620, 6632, 6646,
     6660, 6634, 6658, 6699, 6690, 6697, 6715, 6733, 6757, 6763,
     6776, 6787, 6814, 6816, 6840, 6848, 6850, 6869, 6893, 6890,
     6899,  526, 3405,    0, 3409,    0,    0, 3421, 3439, 3438,

     3445,    0, 3465,    0, 3477, 3485, 3510, 3519, 3513,    0,
     3533,    0, 3534,    0,    0,    0, 3537,    0, 3534, 3531,
     3543,    0,    0,    0,    0,    0,    0, 3552, 3571, 3579,
        0,    0, 3563,    0, 3577,    0, 3601,    0, 3588, 3606,
     3610, 3615, 3596,    0, 3622, 3631, 3646, 3659,    0, 3673,
        0, 3715,    0, 3736, 3738, 3737, 3724, 3743,    0,    0,
        0,    0, 3737, 3753,  525, 6928, 6937, 6935, 6944, 6953,
     6979, 6991, 6992, 7007, 7023, 7026, 7037, 7061, 7077, 7091,
     7085, 7115, 7126, 7139, 7145, 7180, 7181, 7189, 7222, 7224,
     7233, 7231, 7267, 7242, 7284, 7287, 7292, 7306, 7328, 7336,

     7341, 7360, 7386, 7385, 7394, 7401, 7420, 7429, 7443, 7462,
     7473, 7486, 7506, 7511, 7525, 7530, 7555, 7570, 7583, 7597,
     7615, 7618, 7639, 7648, 7662, 7681, 7690, 7709, 7732, 7733,
     7763, 7774, 7777, 7793, 7807, 7823, 7826,  529,    0,    0,
        0,    0, 3770,    0,    0,  436, 3773, 3780,    0,    0,
     3778, 3774,    0,    0,    0, 3783,    0, 3798, 3801,    0,
        0, 3811, 3827, 3822, 3825,    0,    0, 3828, 3842,    0,
        0, 3848,    0, 3851, 3863, 3857, 3884, 3888,    0,    0,
      527, 7837, 7861, 7867, 7870, 7890, 7905, 7914, 7944, 7929,
     7959, 7958, 7973, 7988, 7997, 8022, 8023, 8036, 8038, 8057,

     8080, 8081, 8099, 8122, 8125, 8142, 8147, 8141, 8174, 8183,
     8192, 8216, 8232, 8246, 8260, 8274, 8290, 8304, 8318, 8343,
     8351, 8365, 8373,  526, 3884, 3942,    0, 3887,    0,    0,
     3902, 3897,    0,    0, 3912, 3927, 3936,    0,    0,    0,
     3924, 3934, 3944,    0, 3959,  524, 8395, 4036, 8387, 8413,
     8421, 8439, 8461, 8447, 8473, 8475, 8501, 8510, 8516, 8540,
     8546, 8554, 8579, 8593, 8598, 8601, 8623,  514,  438, 3957,
     3979,    0,    0, 3966,    0,    0,    0,    0, 3976,    0,
      506, 8661, 3980, 8642, 8647, 8676, 8649, 8668, 8692, 8703,
     8711, 8731, 8736,  470, 4051, 3974,    0,    0, 3986,  468,

     4184, 4003, 8750, 8755, 8757,  465, 4037, 8874,    0,  418,
     4059,    0, 8765,  418, 4043,  390, 4075,  388, 4081,  386,
     4083,  347, 4103,  343, 4105,  338, 4113,  335, 4132,  334,
     4145,  332, 4150,  303, 8874,  293,    0,  299,  286,  248,
      243, 8874,    0, 8874, 8838, 8843, 8848,  201, 8853, 8858,
     8863, 8868
    } ;

static const flex_int16_t yy_def[1353] = {
	0,
     1344,    1, 1345, 1345, 1346, 1346, 1344,    7, 1344, 1344,
     1344, 1344, 1344, 1347, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1344, 1344, 1349, 1344,
     1350, 1350, 1344, 1350, 1351, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1352, 1352,   65,   65,   65,   66,   68,
       65,   68,   65,   65,   65,   65,   66,   66,   66,   65,
       65,   65,   65,   68,   65,   65,   65, 1350, 1344, 1344,
     1347, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1344, 1349, 1344, 1350,
     1350, 1350, 1351, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350,   65,   65,   65,   68,   68,   68,   68,   68,
       68,   65,   65,   68,   68,   68,   65,   65,   65,   68,
       68,   68,   65,   68,   68,   68,   65,   68,   68,   65,
       68,   65,   68,   65,   65,   68,   68,   68,   68,   65,
       65,   68,   68,   65,   65,   65,   65,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   65,
       65,   65,   65,   68,   68,   68,   68,   68,   68,   65,
       65,   65,   65,   65,   65,   68,   65,   65,   65,   66,
       65,   65,   65,   68,   65,   65,   65,   65, 1350, 1344,
     1344, 1344, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1350, 1350, 1350,
       65,   65,   65,   65,   68,   68,   68,   68,   65,   65,
       65,   65,   65,   68,   68,   65,   65,   65,   65,   65,
       65,   65,   68,   68,   65,   68,   68,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       68,   68,   68,   68,   65,   65,   68,   68,   68,   68,
       68,   68,   68,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   68,   68,   68,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   68,   68,   68,

       65,   65,   65,   65,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   65,   65,   65,   65,   65,
       65,   65,   68,   68,   68,   68,   68,   68,   68,   65,
       65,   68,   68,   65,   65,   65,   65,   68,   68,   68,
       68,   68,   68,   68,   68, 1344, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1350,   68,   68,   65,   65,   65,   68,   65,   68,
       68,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   68,   65,   65,   65,   68,   68,   68,   68,

       68,   68,   68,   65,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   68,   68,   68,   65,   65,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       65,   65,   65,   68,   68,   68,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   68,   68,   65,
       65,   65,   68,   65,   65,   65,   65,   65,   65,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   65,
       65,   65,   65,   65,   65,   65,   68, 1344, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1350,   68,   68,   68,   68,   65,

       65,   65,   65,   65,   65,   65,   65,   68,   68,   65,
       65,   65,   68,   65,   65,   65,   68,   65,   65,   65,
       65,   68,   65,   65,   65,   65,   68,   65,   65,   65,
       65,   65,   65,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   65,   68,   68,   68,   68,   68,   68,   68,
       65,   68,   68,   68,   68,   68,   68,   68,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   68,   68,   68,   68,   68,
       68,   68,   65,   65,   65,   65,   68,   68,   68,   68,
       68, 1344, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1350,   65,   65,   68,   68,   68,
       68,   65,   65,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   65,
       65,   68,   68,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   68,   68,   68,   68,   68,
       68,   68,   65,   65,   65,   65,   65,   65,   65,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68, 1344, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1350,   68,   68,   68,   68,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   68,   68,

       68,   68,   68,   68,   68,   65,   65,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   65,
       65,   65,   65, 1344, 1348, 1344, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1350,   65, 1350,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   68,   68,   68,
       68,   68,   65,   65,   65,   65,   65, 1344, 1348, 1344,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1350,   65, 1350,   65,   65,   65,   68,   68,   68,   68,
       68,   65,   65, 1344, 1344, 1344, 1348, 1348, 1348, 1350,

     1350, 1350,   65,   65,   68, 1344, 1344, 1344, 1348, 1350,
     1350, 1350,   68, 1344, 1344, 1350, 1350, 1344, 1344, 1350,
     1350, 1344, 1344, 1350, 1350, 1344, 1344, 1350, 1350, 1344,
     1344, 1350, 1350, 1344, 1344, 1350, 1350, 1344, 1350, 1344,
     1350, 1344, 1350,    0, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344
    } ;

static const flex_int16_t yy_nxt[8951] = {
	0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   39,   46,   39,   10,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   39,   46,   39,   47,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   61,   62,   63,   64,   65,

       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   80,   87,   80,   51,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   80,   87,
       80,   88,   89,   89,   89,   89,   92,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   93,   95,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   97,
       98,  102,  108,  103,  132,  134,  109,  112,  142,  104,
      133,  105,  110,  135,  113,  106,  107,  143,  179,  136,

      180,  114,  111,  181,  115,  101,  186,  116,  102,  108,
      103,  132,  134,  109,  112,  142,  104,  133,  105,  110,
      135,  113,  106,  107,  143,  179,  136,  180,  114,  111,
      181,  115,  117,  186,  116,  122,  118,  123,  191,   89,
      119,  144,  124,  293,  147,  145,  120,  125,  148,  121,
      194,  146,   89,   89,  149,  184,  185,  199,  200,  117,
     1343,  195,  122,  118,  123, 1342,  150,  119,  144,  124,
      293,  147,  145,  120,  125,  148,  121,  126,  146,  159,
      151,  149,  184,  185,  294,  127,  152,  153,  128,  299,
      160,  129,  137,  150,  130, 1341,  161,  131,  138,  139,

      140,  182,   89,   89,  126,  141,  159,  151, 1340,  183,
     1339,  294,  127,  152,  153,  128,  299,  160,  129,  137,
     1338,  130,  154,  161,  131,  138,  139,  140,  182,  300,
      155,  162,  141,  295,  156,  163,  183,  157,  158,  164,
      203,  296,  281,  306,  282,  165, 1336,  283, 1334,  154,
      297, 1332,  203,  298, 1330,  309,  300,  155,  162, 1328,
      295,  156,  163, 1326,  157,  158,  164,  203,  296,  281,
      306,  282,  165,  166,  283,  167,  316,  297,  168,  203,
      298,  169,  309,  170,  326,  171,  172,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  191,   89, 1324,

      166, 1322,  167,  316, 1320,  168,  301,  302,  169,  304,
      170,  326,  171,  172,  173,  314,  305,  234,  174,  203,
      303,  175,  176,  235,  203,  315,  324,  325,  177,  203,
      327,  178, 1318,  301,  302, 1316,  304, 1226, 1226, 1295,
     1295,  173,  314,  305,  234,  174,  203,  303,  175,  176,
      235,  203,  315,  324,  325,  177,  203,  327,  178,  197,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      190,  190,  307,  190,  190,  190,  190,  190,  190,  308,
      236,  317, 1314, 1310,  203, 1306,  318,  328,  237,  190,
      190,  190,  203,  329,  238,  204,  203,  205,  330,  307,

      336,  337,  244,  206,  203,  207,  308,  236,  317,  208,
      209,  203,  203,  318,  328,  237,  338,  341, 1300,  203,
      329,  238,  204,  203,  205,  330, 1294,  336,  337,  244,
      206,  203,  207, 1281,  342, 1268,  208,  209, 1246,  203,
     1224, 1181, 1138,  338,  341,  190,  190,  190, 1065,  190,
      190,  190,  190,  190,  190,  992,  895,  343,  245,  246,
      249,  342,  203,  247,  250,  190,  190,  190,  203,  248,
      251,  344,  210,  203,  347,  339,  211,  203,  203,  203,
      203,  340,  212,  203,  343,  245,  246,  249,  348,  203,
      247,  250,  213,  203,  798,  203,  248,  251,  344,  210,

      203,  347,  339,  211,  203,  203,  203,  203,  340,  212,
      203,  672,  546,  203,  349,  348,  286,  287,  350,  213,
      203,  190,  214,  203,  264,  419,  203,  355,  265,  215,
      203,  345,  266,  203,  346,  418,  216,  356,  267,  217,
      203,  349,  218,  286,  287,  350,  203,  291,  203,  214,
      203,  264,  351,  203,  355,  265,  215,  203,  345,  266,
      203,  346,  352,  216,  356,  267,  217,  353,  354,  218,
      290,  289,  284,  203,  219,  203,  203,  288,  220,  351,
      285,  203,  221,  357,  358,  364,  203,  203,  222,  352,
      359,  223,  360,  365,  353,  354,  203,  203,  203,  284,

      202,  219,  201,  203,  288,  220,  190,  285,  203,  221,
      357,  358,  364,  203,  203,  222,  192,  359,  223,  360,
      365,  366,  367,  203,  203,  203,  203,  310,  311,  312,
      203,  313,  319,  224,  320,  225,  203,  321,  370,  361,
      226,  362,  371,  322,  372,  227,  203,  189,  366,  367,
      323,  187,  363,  203,  310,  311,  312,  203,  313,  319,
      224,  320,  225,  203,  321,  370,  361,  226,  362,  371,
      322,  372,  227,  203,  228,  368,  373,  323,  369,  363,
      374,  203,  229,  375,  376,  230,  377,  331,  231,  332,
      380,  232,  378,  333,  233,  100,  379,   99,  385,  381,

      334,  228,  368,  373,  335,  369,  388,  374,  203,  229,
      375,  376,  230,  377,  331,  231,  332,  380,  232,  378,
      333,  233,  239,  379,  382,  385,  381,  334,  240,  241,
      242,  335,  386,  388,  394,  243,  389,  383,  392,  395,
      203,   90,  384,  387,  396,  390,  397,  398, 1344,  239,
      401,  382,  393,  391,  402,  240,  241,  242,   50,  386,
       50,  394,  243,  389,  383,  392,  395,  203,  252,  384,
      387,  396,  390,  397,  398,  203,  399,  401,  403,  393,
      391,  402,  253,  409,  406,  203,  404,  400,  254,  255,
     1344,  407,  410,  411,  408,  252, 1344, 1344,  415,  412,

      416,  417,  203,  399, 1344,  403,  405, 1344, 1344,  253,
      409,  406,  203,  404,  400,  254,  255,  203,  407,  410,
      411,  408,  256,  413,  203,  415,  412,  416,  417,  547,
      257,  203,  548,  405,  258,  432,  414,  259,  260, 1344,
      203, 1344,  433, 1344,  203, 1344, 1344,  203, 1344,  256,
      413,  203,  203, 1344, 1344,  549,  547,  257,  203,  548,
      550,  258,  432,  414,  259,  260,  261,  203,  203,  433,
      421,  203,  203,  203,  203,  203,  551,  262,  203,  203,
      203,  203,  549,  263,  552,  553,  203,  550,  203, 1344,
      554,  203, 1344,  261,  555,  203, 1344,  421,  203,  203,

      203,  556,  203,  551,  262,  203,  557,  203,  203, 1344,
      263,  552,  553,  203,  268,  203,  269,  554,  203,  270,
      203,  555,  271,  423,  272,  203,  273,  274,  556, 1344,
      203,  424, 1344,  557,  561,  203,  203, 1344, 1344, 1344,
     1344,  268, 1344,  269, 1344, 1344,  270,  203, 1344,  271,
      423,  272,  203,  273,  274,  203,  203,  203,  424,  203,
      203,  561,  203,  203,  275,  203,  434,  203,  276,  203,
      422,  277,  278,  427,  203,  203,  203,  562,  279,  203,
      563,  280,  203,  203,  564,  565,  203,  203,  203, 1344,
     1344,  275,  203,  434,  203,  276,  203,  422,  277,  278,

      427,  203,  203,  203,  562,  279,  203,  563,  280, 1344,
     1344,  564,  565, 1344, 1344,  203,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,   95,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  197,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  425,  428,
      558,  426,  559,  566,  567,  568,  569, 1344,  203,  203,
      203,  203,  570,  571,  203,  203,  203,  560,  203,  572,

      203,  203, 1344, 1344,  203,  425,  428,  558,  426,  559,
      566,  567,  568,  569,  203,  203,  203,  203,  203,  570,
      571,  203,  203,  203,  560,  203,  572,  203,  203,  429,
      430,  203,  435,  573,  203,  203, 1344,  203,  576,  436,
      437,  203,  203,  431,  203,  577,  578,  203,  579,  580,
     1344,  203,  581,  203, 1344,  582,  429,  430,  203,  435,
      573,  203,  203,  203,  203,  576,  436,  437, 1344,  203,
      431,  203,  577,  578,  203,  579,  580,  442,  203,  581,
      203,  203,  582,  583, 1344,  203,  574,  443, 1344, 1344,
      203,  438,  439,  440, 1344,  441,  203,  203,  203, 1344,

      203,  575,  584,  203,  442,  203,  203,  203,  203,  444,
      583,  203,  456,  574,  443,  203,  203,  203,  438,  439,
      440,  203,  441,  203,  203,  203,  445,  203,  575,  584,
      203,  446,  203,  203,  203,  585,  444, 1344,  203,  456,
     1344,  586,  203,  203,  203, 1344, 1344, 1344,  203,  587,
     1344, 1344, 1344,  445,  588, 1344,  589,  590,  446,  447,
     1344,  448,  585, 1344,  449,  591,  592,  203,  586,  203,
      450, 1344,  203,  452,  453, 1344,  587,  451,  203,  203,
      203,  588,  203,  589,  590,  203,  447,  454,  448,  593,
      203,  449,  591,  592,  203,  594,  203,  450,  203,  203,

      452,  453,  203, 1344,  451,  203,  203,  203,  455,  203,
      595,  457,  203, 1344,  454,  596,  593,  203,  203,  203,
      203,  203,  594,  458,  203,  203,  203,  597,  598,  203,
      466,  203,  203,  599,  203,  455, 1344,  595,  457,  203,
      203,  600,  596, 1344,  203,  203,  203,  203,  203,  601,
      458,  203, 1344,  203,  597,  598, 1344,  466,  203,  203,
      599,  203, 1344,  464, 1344,  203,  203,  203,  600,  602,
      203,  203,  459,  203,  460,  203,  601,  203,  461,  465,
      603,  203,  604,  469,  203,  462,  203,  605,  608,  463,
      464,  203,  203,  203,  203,  609,  602,  203, 1344,  459,

      203,  460,  203, 1344,  203,  461,  465,  603,  203,  604,
      469,  203,  462,  203,  605,  608,  463,  467,  203,  203,
      203,  203,  609,  468,  203,  470,  610,  203, 1344,  203,
      606, 1344,  203,  611, 1344,  203, 1344,  203,  203,  203,
      607, 1344,  203,  612,  467,  471,  203, 1344,  472, 1344,
      468,  203,  470,  610,  203,  203,  203,  606,  203,  203,
      611,  203,  203,  203,  203,  203,  203,  607,  473,  203,
      612,  474,  471,  203,  203,  472,  475,  613, 1344,  616,
     1344,  203,  203,  617,  618,  203,  203,  203,  203,  203,
      203, 1344, 1344, 1344,  203,  473,  476, 1344,  474,  203,

      203,  203, 1344,  475,  613,  203,  616,  203,  203,  619,
      617,  618,  203,  203,  203,  203,  203,  203,  203,  477,
      203,  203,  203,  476,  484,  203,  203,  614,  203,  478,
      203,  620,  203,  621,  203,  203,  619,  615,  203,  203,
      203,  203,  203,  483,  203,  203,  477,  203,  203,  203,
      622,  484,  203,  203,  614,  203,  478,  203,  620, 1344,
      621, 1344,  203,  623,  615,  203,  479,  203,  203,  203,
      483,  624,  625,  203,  203,  203,  480,  622,  626,  203,
      203,  481,  482, 1344,  203,  486,  203, 1344,  203,  485,
      623,  627, 1344,  479,  203,  630,  203, 1344,  624,  625,

      203,  203, 1344,  480,  203,  626,  203,  628,  481,  482,
      503,  203,  486,  203,  203,  203,  485,  203,  627,  203,
      203,  203,  630,  492,  203, 1344,  629,  633,  634,  203,
      203,  203,  203,  635,  628,  631,  203,  503,  487,  636,
      488,  203,  203,  637,  203,  638,  203,  203,  632,  639,
      492,  203,  203,  629,  633,  634,  203,  203, 1344,  203,
      635,  640,  631,  203, 1344,  487,  636,  488, 1344,  203,
      637, 1344,  638,  641,  642,  632,  639,  643,  644,  203,
      489,  645,  490,  203,  646,  493,  647,  203,  640,  494,
      203,  203,  648,  491,  203,  203,  649,  650,  203,  203,

      641,  642, 1344,  203,  643,  644, 1344,  489,  645,  490,
      203,  646,  493,  647,  203,  651,  494,  203,  203,  648,
      491,  203,  203,  649,  650,  203,  203,  203,  652,  203,
      203,  498,  653,  203,  203,  495,  654,  655,  203,  203,
     1344,  658,  651,  203,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  203,  652,  203,  661,  498,  653,
      203,  203,  495,  654,  655,  203,  203,  203,  658,  203,
      203, 1344,  499,  505,  203,  496,  662,  203,  497,  203,
      500,  203, 1344,  203,  661,  203,  203,  203,  203, 1344,
      203,  663, 1344,  203,  203,  203,  203,  203,  203,  499,

      505,  203,  496,  662,  203,  497,  203,  500,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  663,  501,
      203,  203,  203,  656,  203,  203, 1344,  203,  664,  203,
     1344,  665,  657,  203,  203,  203,  203,  666,  203,  203,
      203,  502, 1344,  203,  667,  203,  501,  670,  203, 1344,
      656, 1344, 1344,  506,  203,  664,  203,  507,  665,  657,
      203,  203,  203,  203,  666,  203,  203,  203,  502,  203,
     1344,  667,  203,  203,  670,  203,  510,  659,  504,  660,
      506,  671,  799,  800,  507,  203,  203,  203,  508,  511,
      203,  801,  203,  203,  512, 1344,  203,  509,  203,  203,

      203,  802,  203,  510,  659,  504,  660, 1344,  671,  799,
      800,  803,  203,  203,  203,  508,  511, 1344,  801,  804,
      203,  512,  513, 1344,  509,  203,  203,  203,  802,  203,
      514,  668,  203, 1344,  203,  669,  805,  203,  803,  203,
      806,  515,  203,  807,  516,  808,  804,  809,  203,  513,
      203,  810,  811, 1344,  203,  203,  203,  514,  668,  203,
      203,  203,  669,  805,  203,  812,  203,  806,  515,  203,
      807,  516,  808, 1344,  809,  203,  520,  203,  810,  811,
      203,  203,  203, 1344,  203,  522,  813,  203,  517,  814,
      521,  203,  812, 1344,  815,  816,  817,  518, 1344,  203,

      203,  203, 1344,  520,  203,  519,  523,  203,  203,  203,
      203,  203,  522,  813,  203,  517,  814,  521,  203, 1344,
      203,  815,  816,  817,  518,  203,  203,  203,  203,  203,
      203,  203,  519,  523,  818,  203,  203,  203,  524,  819,
      525,  203, 1344,  820,  203,  203,  526,  203,  203,  203,
     1344, 1344,  203,  203,  203,  821,  203,  203,  822,  203,
     1344,  818,  203,  823,  203,  524,  819,  525,  824,  203,
      820,  203,  203,  526,  825,  203,  203,  203,  527,  203,
      203,  203,  821,  529,  203,  822,  203,  203,  826,  528,
      823,  203, 1344,  203, 1344,  824,  203,  827, 1344,  828,

      829,  825, 1344,  203,  203,  527,  203,  537,  203,  203,
      529,  203,  203,  203,  203,  826,  528,  530,  203,  203,
      203,  203,  830, 1344,  827,  203,  828,  829,  203,  203,
      203,  203,  531, 1344,  537,  203,  203,  831,  832,  203,
      203,  203,  833,  532,  530,  203,  203,  834,  203,  830,
      203, 1344,  203, 1344,  835,  203,  203,  203,  203,  531,
      203, 1344,  203,  533,  831,  832,  538, 1344,  203,  833,
      532, 1344,  203,  539,  834,  203,  675,  203,  203,  540,
      203,  835,  203,  203,  203,  203, 1344,  203,  203,  203,
      533,  534,  836,  538,  203,  837, 1344,  838,  535,  203,

      539,  536,  203,  675,  203,  203,  540,  203,  839,  203,
      203,  840,  203,  541,  203,  203,  841,  203,  534,  836,
     1344,  203,  837,  203,  838,  535,  542,  203,  536,  203,
     1344,  203,  543,  203,  203,  839,  203,  842,  840,  203,
      541,  203,  203,  841,  203, 1344,  843,  203, 1344, 1344,
      203,  203,  203,  542,  203, 1344,  203,  203,  844,  543,
      203,  203,  544,  203,  842, 1344,  203,  203,  545,  203,
      845,  203,  203,  843,  203,  203,  203,  846,  203,  203,
      848,  203,  203,  849,  203,  844,  850,  851,  847,  544,
      852,  203,  203, 1344,  203,  545, 1344,  845,  203,  203,

     1344, 1344,  203,  203,  846, 1344,  855,  848,  203,  203,
      849,  853,  854,  850,  851,  847,  856,  852,  203,  203,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      673,  203,  674,  855,  203,  203,  203, 1344,  853,  854,
      203,  203,  203,  856, 1344,  857,  858,  859,  860, 1344,
      203,  203,  203,  676,  861, 1344,  862,  673,  203,  674,
      863,  203,  203,  203,  203,  864,  203,  203,  203,  203,
      865,  203,  857,  858,  859,  860,  203,  203,  203,  203,
      676,  861,  203,  862,  203,  866,  203,  863, 1344,  203,
      203,  203,  864,  203,  203,  203,  677,  865,  203,  678,

      203, 1344,  867,  203,  203,  203,  203, 1344, 1344,  203,
      203,  203,  866,  203,  868,  203,  203,  203,  679, 1344,
      203,  203,  203,  677,  203,  869,  678,  203,  680,  867,
      870,  203,  203,  203,  203,  681,  871,  203, 1344,  203,
     1344,  868,  203,  203,  203,  679,  682,  203,  203,  203,
     1344,  203,  869,  203,  872,  680, 1344,  870,  203,  203,
     1344,  203,  681,  871,  873,  683,  203,  203,  874, 1344,
      203,  203,  203,  682,  875,  203,  203,  203, 1344,  876,
      203,  872,  877,  203, 1344,  203,  203,  203,  878,  879,
     1344,  873,  683,  203,  203,  874,  687, 1344, 1344,  203,

     1344,  875, 1344,  203,  203,  684,  876,  685,  203,  877,
      203,  203,  203,  880,  203,  878,  879,  203,  203,  881,
      203,  203,  686,  687,  688,  203, 1344,  203,  203,  689,
      203,  203,  684,  203,  685,  203,  882,  203,  203,  203,
      880,  203, 1344,  203,  203,  203,  881, 1344,  203,  686,
     1344,  688,  203,  691,  203,  203,  689,  203,  203, 1344,
      203,  203, 1344,  882,  203,  692,  883,  203,  203,  203,
      203,  884,  690,  203,  203,  885,  203,  203, 1344,  203,
      691,  693,  886, 1344,  203, 1344,  203, 1344,  203,  203,
     1344,  887,  692,  883,  203,  888,  203,  889,  884,  690,

      203,  203,  885,  203,  203,  203,  203,  203,  693,  886,
      695,  694,  203,  203,  203,  890,  203,  203,  887,  203,
      203,  203,  888,  891,  889,  892,  696,  893, 1344,  894,
      203,  203,  203,  697,  203,  203,  993,  695,  694,  203,
      203,  203,  890, 1344,  203,  203,  203,  203,  203, 1344,
      891,  203,  892,  696,  893,  698,  894,  203,  203, 1344,
      697,  203,  203,  993,  994,  699,  700,  203,  995,  203,
      203,  203,  203,  203, 1344,  996,  203,  997,  203,  203,
      998,  701,  698, 1344, 1344,  999,  203, 1344,  203,  203,
     1000,  994,  699,  700, 1344,  995,  203,  203,  203,  702,

      203,  203,  996,  203,  997,  203,  203,  998,  701, 1001,
      703,  203,  999,  203,  203, 1344,  203, 1000, 1344,  203,
      203,  203, 1344,  203, 1002, 1003,  702, 1004,  203,  203,
      203, 1344,  203, 1344,  704, 1344, 1001,  703,  203,  203,
     1344,  203,  705, 1344, 1344,  203,  203,  203,  203,  203,
      203, 1002, 1003, 1344, 1004,  203,  203,  203,  707, 1005,
      203,  704,  203,  203,  203,  203,  203,  203,  203,  705,
      203,  706,  203,  203, 1006, 1007,  203, 1344,  203, 1008,
      203, 1344,  203,  203, 1344,  707, 1005,  203, 1009,  203,
      203,  203,  203, 1344,  203,  203, 1344,  203,  706,  709,

      203, 1006, 1007,  203,  708,  203, 1008,  203,  203,  203,
      203,  710,  203,  203, 1344, 1009, 1344,  203,  203,  203,
      203, 1344,  203,  203, 1010, 1011,  709,  711,  203, 1012,
      203,  708,  203,  203, 1013,  203,  203, 1344,  710,  203,
      203,  712, 1344,  203,  203,  203,  203,  203,  203,  203,
      203, 1010, 1011,  203,  711,  203, 1012, 1014, 1015,  203,
      203, 1013,  203, 1344,  203,  203, 1344,  203,  712,  714,
      203,  713,  203, 1344,  203,  203, 1344,  203, 1344, 1016,
      203, 1017, 1344,  715, 1014, 1015, 1344,  203,  717,  203,
      203,  203,  203,  203,  203,  203,  714, 1018,  713,  203,

      203,  203, 1344,  203,  203,  716, 1016, 1019, 1017,  203,
      715, 1344, 1344,  203,  203,  717, 1344,  203, 1344,  203,
      203, 1344,  203, 1020, 1018, 1344, 1344,  203, 1021,  203,
      203, 1022,  716, 1023, 1019, 1024,  203,  203,  718,  203,
      203,  203,  719,  203,  203,  720,  203,  203,  203,  203,
     1020, 1025,  203,  203, 1026, 1021,  203,  203, 1022, 1344,
     1023, 1344, 1024, 1344,  203,  718,  203, 1344,  203,  719,
      203,  203,  720,  721,  203,  203,  203, 1027, 1025,  203,
      203, 1026,  723,  203,  203,  203,  203,  203,  203,  203,
      203, 1028, 1031,  203,  203,  203,  722, 1344,  203,  203,

      721, 1344, 1029, 1032, 1027, 1030, 1033, 1344, 1034,  723,
      203, 1035,  203,  203,  203,  203,  203,  203, 1028, 1031,
      203,  203,  203,  722,  203,  203,  203,  203,  724, 1029,
     1032,  203, 1030, 1033,  203, 1034,  203,  203, 1035, 1344,
      203, 1344,  725, 1036,  203, 1344,  203,  203, 1037,  726,
     1344,  203, 1038, 1344,  203,  724,  203, 1344,  203, 1039,
     1344,  203,  203,  203,  203, 1344,  203,  203,  727,  725,
     1036,  203,  203,  203,  203, 1037,  726,  203, 1040, 1038,
      729,  203,  203,  203,  203, 1344, 1039,  728, 1041,  203,
      203, 1344,  730,  203, 1042,  727,  203,  203, 1043,  203,

      203, 1344,  203, 1344,  203, 1040,  731,  729,  203,  203,
      203,  203,  203, 1344,  728, 1041,  203,  203,  732,  730,
     1044, 1042,  203,  203,  203, 1043,  203,  203,  733,  203,
      203, 1344, 1344,  731,  203, 1045, 1344,  203,  203,  203,
      203, 1344, 1046,  203, 1047,  732,  734, 1044, 1048,  203,
      203, 1344,  203,  203,  735,  733,  203,  203,  203,  203,
     1344,  203, 1045,  203,  203,  203, 1344,  203,  203, 1046,
     1344, 1047, 1049,  734,  737, 1048, 1344,  203,  203,  203,
      203,  735,  203,  203,  203,  203,  203,  203,  736, 1344,
      203,  203,  203,  203,  203,  203,  203,  738,  742, 1049,

      203,  737, 1050,  203, 1344,  203,  203,  203, 1344,  203,
     1051,  203, 1052,  203,  203,  736,  203,  739,  203,  203,
      203,  203,  203,  203,  738,  742, 1053,  203,  203, 1050,
      203,  203,  203,  203,  743,  203,  203, 1051,  203, 1052,
      203,  203,  203,  203,  739,  203,  745, 1344, 1054,  203,
     1344,  203,  203, 1053, 1055,  203, 1344, 1056,  203,  203,
     1344,  743,  203,  203, 1057,  203,  740,  203,  203,  203,
      203,  203, 1344,  745,  203, 1054,  741,  203,  203,  203,
      203, 1055, 1058,  744, 1056, 1344, 1059,  203, 1344, 1344,
      203, 1057,  203,  740,  203,  203,  203,  203,  203,  203,

     1060,  203,  203,  741,  203,  203, 1061,  203,  746, 1058,
      744, 1062,  203, 1059,  203,  203,  747,  203, 1063,  203,
      203, 1344,  203,  203,  203, 1064,  203, 1060, 1344,  203,
      203, 1139,  203, 1061,  748,  746,  203, 1344, 1062,  203,
      203,  203,  203,  747, 1140, 1063,  203,  203,  203, 1344,
      203,  203, 1064, 1344,  749,  203, 1141,  203, 1139, 1344,
      203,  748,  203,  203,  203, 1142,  751,  203,  203,  750,
      203, 1140, 1344,  203,  203,  203,  203,  203, 1344, 1143,
      752,  749,  203, 1141,  203, 1144,  203,  203, 1344,  203,
      203,  203, 1142,  751, 1344,  203,  750,  203, 1145,  203,

      203,  203,  203,  203,  756,  203, 1143,  752,  753,  203,
     1344,  203, 1144,  203,  203,  203, 1344,  203, 1146, 1147,
     1344,  203,  203,  203, 1344, 1145,  203,  203,  203,  203,
     1344,  756,  203,  203, 1148,  753,  203,  203,  759,  203,
     1344,  203,  203,  754,  203, 1146, 1147,  203,  203,  203,
      203,  203, 1149, 1344, 1150,  203, 1151,  203, 1152, 1344,
      203, 1148,  755, 1153,  203,  759,  203,  203, 1344, 1154,
      754,  203, 1155, 1156,  203,  760,  203, 1344,  203, 1149,
      203, 1150,  203, 1151,  203, 1152,  761,  203,  203,  755,
     1153, 1157,  203,  203,  203,  757, 1154, 1158,  203, 1155,

     1156, 1159,  760, 1160,  203, 1344,  203,  203,  758,  203,
     1161,  203, 1344,  761,  203,  203,  203, 1344, 1157,  203,
      203,  762,  757, 1162, 1158,  203, 1344, 1344, 1159, 1163,
     1160,  203,  203,  203,  203,  758, 1164, 1161,  203,  203,
     1165, 1166, 1167,  203,  203,  203, 1168,  203,  762, 1344,
     1162, 1344,  203,  763,  764, 1169, 1163,  203,  203,  203,
      203,  203, 1344, 1164, 1344,  203,  203, 1165, 1166, 1167,
      203,  203,  203, 1168,  203, 1344,  765, 1344,  203,  203,
      763,  764, 1169,  203,  203,  203, 1170,  203,  203,  203,
     1344,  203,  203, 1344,  767, 1344,  766,  203,  203, 1171,

     1344,  203,  203,  765,  203,  203,  203,  769, 1172, 1344,
      203,  203,  768, 1170,  203,  203,  203,  203,  203, 1344,
      203,  767,  203,  766,  203,  203, 1171,  203,  203,  203,
      203,  203,  203,  203,  769, 1172,  203, 1344,  203,  768,
      203,  203,  203, 1344,  203,  770,  203,  203, 1173,  203,
      203,  203,  203, 1344,  203, 1344,  203,  203, 1174,  203,
     1175, 1176, 1344,  203,  771, 1177,  203,  203, 1178,  203,
      203, 1344,  770,  203,  203, 1173, 1179,  203, 1344,  203,
      203,  772,  773,  203,  203, 1174, 1180, 1175, 1176,  203,
      203,  771, 1177,  203,  203, 1178, 1225,  203,  203, 1227,

      203,  203, 1228, 1179, 1229,  203,  774,  203,  772,  773,
      203,  203,  203, 1180,  203, 1230,  203,  203, 1231,  203,
      775,  203, 1232, 1225,  203,  203, 1227,  203,  776, 1228,
      203, 1229,  203,  774, 1233,  203,  203,  203,  203,  203,
      203,  203, 1230,  203,  778, 1231,  203,  775,  203, 1232,
     1234,  203,  203, 1235,  203,  776,  777,  203, 1236,  203,
     1237, 1233,  203,  203,  203,  203,  203,  203,  779, 1238,
      203,  778,  780,  203, 1239,  203,  203, 1234,  203,  203,
     1235,  203,  203,  777,  203, 1236,  203, 1237,  203, 1240,
     1241,  203,  203,  203,  203,  779, 1238, 1242, 1243,  780,

      203, 1239, 1344,  203,  203,  203,  203, 1344,  781,  203,
     1244,  203, 1344,  203, 1245,  203, 1240, 1241,  203,  203,
      782,  203,  203, 1269, 1242, 1243,  203,  203, 1271,  783,
     1272,  203,  784,  203,  203,  781, 1344, 1244, 1273,  203,
      203, 1245,  203, 1226, 1226,  203, 1344,  782,  203,  203,
     1269, 1274,  203,  203,  203, 1271,  783, 1272,  785,  784,
      786,  203, 1275,  203, 1276, 1273,  203,  203,  203,  203,
     1277, 1278,  788,  787, 1279,  203,  203, 1344, 1274,  203,
      203, 1270, 1344,  203, 1280,  785,  203,  786, 1344, 1275,
      203, 1276, 1344, 1296,  203,  203,  203, 1277, 1278,  788,

      787, 1279,  203,  203,  789, 1297, 1298,  203, 1270,  203,
      203, 1280, 1299,  203,  203,  203, 1302,  203, 1308,  791,
     1296, 1309,  203,  203,  790, 1344, 1344,  203,  203,  203,
      203,  789, 1297, 1298, 1344,  203,  203, 1248, 1226, 1299,
      203,  203,  203, 1302,  203, 1308,  791, 1312, 1309,  203,
     1344,  790, 1295, 1295,  203,  203, 1344,  203,  203, 1315,
      203,  203,  203,  901,  203,  203,  203,  203,  203,  792,
      203,  203,  793,  203, 1312, 1283,  203,  203, 1344,  794,
     1344, 1317, 1319,  795,  203,  203, 1315,  203,  203,  203,
      901,  203,  203,  203, 1307,  203,  792,  203,  203,  793,

      203,  796, 1283,  203,  203,  203,  794,  203, 1317, 1319,
      795,  203,  203,  203, 1321,  203,  203,  203, 1344,  797,
      203, 1307, 1344, 1344,  203,  203,  203, 1323,  796, 1325,
      896,  203,  203, 1327,  203, 1329,  203, 1344, 1344,  203,
      203, 1321,  203,  203,  203,  203,  797,  203, 1331,  897,
      203,  203,  203,  203, 1323,  203, 1325,  896,  203, 1344,
     1327,  203, 1329,  203,  203,  203, 1344, 1333,  203, 1344,
      203,  203,  203, 1335,  203, 1331,  897,  203, 1337, 1344,
     1344,  898,  203,  203,  899, 1301, 1295,  203,  203, 1344,
     1344,  203,  203,  203, 1333,  203,  900,  203,  203,  903,

     1335,  203,  902,  203,  203, 1337,  203, 1344,  898,  203,
      203,  899,  203, 1344,  203, 1344, 1344, 1344, 1344, 1344,
      203, 1344,  203,  900,  203, 1344,  903, 1311,  905,  902,
      203,  203,  203,  203, 1344,  203,  203,  203,  203,  203,
      203,  904,  203, 1344,  203, 1344, 1344,  203,  203,  203,
      203, 1344, 1344, 1344, 1311,  905, 1344, 1344, 1344,  203,
      203, 1344,  203, 1344,  203,  203, 1344,  203,  904,  203,
     1344,  203,  906, 1344,  203,  203,  203,  203,  203, 1344,
      203,  203,  203, 1344, 1344,  203,  203,  203,  203, 1344,
     1344,  203, 1344, 1344, 1344, 1344,  203, 1344,  203,  906,

     1344,  203,  907,  203, 1344,  203,  203,  203,  203,  203,
      203, 1344,  203,  203, 1344,  203,  203, 1344,  203, 1344,
     1344, 1344, 1344,  203, 1344,  203,  203, 1344,  203,  907,
      203,  203,  203,  203,  203,  909,  203,  203,  908, 1344,
      203,  203,  203,  203,  203,  910, 1344, 1344,  203, 1344,
      203,  203,  203,  203,  203, 1344,  913,  203,  203,  203,
      203,  203,  909,  203,  203,  908,  203,  203,  203,  203,
      203,  203,  910, 1344,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  913,  203,  911, 1344,  203, 1344,  912,
      203,  203, 1344,  203,  203,  203, 1344,  203,  203,  203,

     1344,  203,  203,  203, 1344,  203, 1344,  203,  203,  203,
      914,  203,  911, 1344, 1344,  203,  912,  203,  203, 1344,
     1344,  203,  203, 1344, 1344,  203,  203, 1344, 1344,  203,
     1344,  915,  203,  203, 1344,  203, 1344,  914,  203,  203,
      916,  203,  203,  203, 1344,  203,  203,  203, 1344,  203,
     1344,  203, 1344, 1344,  203, 1344,  917, 1344,  915,  203,
      203, 1344, 1344, 1344, 1344,  203,  203,  916,  203,  919,
      203, 1344, 1344,  203,  203, 1344,  203,  203,  203,  203,
      203,  203,  203,  917,  203,  918,  203,  203,  203,  203,
      203, 1344,  203, 1344,  920,  203,  919, 1344, 1344, 1344,

      203, 1344, 1344, 1344,  203, 1344,  203,  203, 1344,  203,
     1344,  203,  918, 1344,  203,  203,  203,  203, 1344,  203,
      921,  920,  203,  923,  203,  203, 1344,  203,  922,  203,
      203,  203, 1344, 1344,  203,  203,  203, 1344, 1344, 1344,
     1344,  203, 1344, 1344,  203, 1344, 1344,  921, 1344, 1344,
      923,  203,  203, 1344, 1344,  922,  203,  203,  203, 1344,
     1344,  203,  203,  203, 1344,  203, 1344,  203,  203, 1344,
     1344,  203,  203,  203,  203,  203,  203,  203,  924, 1344,
      203,  203, 1344, 1344, 1344,  203,  203, 1344, 1344, 1344,
     1344, 1344,  203, 1344,  203, 1344, 1344, 1344, 1344,  203,

      203,  203,  203,  203,  203,  924, 1344,  203,  203, 1344,
     1344, 1344,  203,  203,  203,  203,  203,  203,  925, 1344,
     1344,  203,  203,  203,  926,  203,  203,  203, 1344, 1344,
      203,  927, 1344, 1344, 1344,  203, 1344, 1344, 1344, 1344,
     1344,  203,  203,  203,  203,  925, 1344, 1344,  203,  203,
      203,  926,  203,  203,  203,  928,  929,  203,  927, 1344,
      930,  203,  203, 1344,  203,  203,  203,  203,  203,  203,
      203,  203, 1344,  203,  203, 1344, 1344, 1344,  203,  203,
      203,  203,  928,  929, 1344, 1344, 1344,  930,  203, 1344,
     1344,  203,  203,  203,  203,  203,  203,  203,  203,  203,

      203,  203, 1344,  203, 1344,  203,  203,  203,  203,  203,
     1344,  203,  203, 1344,  931,  203,  203, 1344, 1344,  203,
      933,  932,  203, 1344,  203,  203,  203, 1344,  203,  203,
      203,  203,  203, 1344,  203,  203,  203, 1344,  203,  203,
     1344,  931,  203,  203,  203,  203,  203,  933,  932,  203,
     1344,  203,  203, 1344, 1344,  203,  203, 1344,  203,  203,
      934,  203,  203,  203,  203,  203, 1344,  203,  203,  203,
     1344,  203,  203,  203,  203,  203,  935, 1344, 1344, 1344,
     1344, 1344, 1344,  203,  203,  203,  203,  934,  936, 1344,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,

      203,  203,  203,  935,  203, 1344, 1344, 1344, 1344,  203,
      203,  203,  203,  203, 1344,  936,  203,  938,  203, 1344,
      203,  203, 1344,  937,  203,  203,  203,  203,  203,  203,
     1344,  203, 1344,  203, 1344, 1344,  203,  203, 1344,  203,
     1344, 1344,  939,  203,  938,  203, 1344, 1344,  203,  203,
      937,  203, 1344,  203,  203,  203,  203, 1344,  203, 1344,
      203, 1344, 1344,  940,  203,  203,  203,  203, 1344,  939,
     1344,  941,  203, 1344, 1344, 1344,  203,  203,  203, 1344,
      203,  203, 1344,  203,  203,  203,  203,  942,  203, 1344,
      940,  203,  203,  203,  203,  945,  203,  203,  941,  203,

     1344, 1344,  203, 1344,  203, 1344, 1344,  203,  203, 1344,
      203,  203, 1344,  203,  942,  203, 1344, 1344,  203, 1344,
      203,  943,  945,  203,  203, 1344,  203, 1344,  203,  203,
     1344, 1344,  944,  203,  203,  203, 1344,  203,  203,  203,
     1344,  203,  203, 1344, 1344, 1344,  203,  203,  943, 1344,
     1344,  203, 1344,  203, 1344,  203, 1344, 1344, 1344,  944,
      203, 1344,  203, 1344,  203,  203,  203, 1344,  203,  203,
      203, 1344,  203,  203,  203, 1344, 1344,  203,  203,  203,
     1344,  203,  203,  203, 1344,  203,  203,  946, 1344, 1344,
      203,  203, 1344, 1344, 1344,  203, 1344,  203, 1344,  203,

     1344, 1344, 1344, 1344,  203, 1344,  203, 1344,  203,  203,
      203, 1344,  203,  203,  946, 1344, 1344,  203,  203,  947,
      948,  203,  203,  203,  203,  949,  203,  203, 1344,  203,
      203,  203, 1344,  203, 1344,  203, 1344, 1344, 1344, 1344,
      203, 1344, 1344,  203, 1344,  203,  947,  948,  203, 1344,
      203,  203,  949,  203,  203, 1344,  203,  203,  203, 1344,
      203,  203,  203,  203, 1344, 1344, 1344,  203,  950,  951,
      203,  952,  203,  203,  203,  203,  203,  203, 1344,  203,
      953,  203,  203,  954, 1344, 1344,  203,  203,  203,  203,
      203, 1344, 1344, 1344, 1344,  950,  951, 1344,  952,  203,

      203,  203,  203,  203,  203, 1344,  203,  953,  203,  203,
      954,  203, 1344,  203,  203,  203,  203,  955, 1344,  203,
      956,  203, 1344,  203,  203, 1344,  203, 1344, 1344,  203,
      203,  203, 1344, 1344, 1344, 1344, 1344, 1344,  203,  203,
      203, 1344,  203, 1344,  955, 1344,  203,  956,  203,  203,
      203,  203, 1344,  203, 1344, 1344,  203,  203,  203,  203,
     1344,  203,  957, 1344, 1344,  203,  203,  203, 1344,  203,
     1344,  203, 1344,  203,  958, 1344,  203,  203, 1344, 1344,
      203,  203, 1344,  203, 1344, 1344,  203,  203,  203,  957,
     1344,  203,  203,  203, 1344,  959,  203,  203,  203,  203,

      203,  958, 1344,  960,  203, 1344, 1344,  203,  203,  203,
      203,  203, 1344,  961,  203,  203, 1344,  203,  203,  203,
      203,  203,  959,  203,  203, 1344,  203, 1344, 1344, 1344,
      960,  203, 1344,  203,  203,  962,  203,  963,  203,  203,
      961,  203,  203,  203,  203,  203,  203, 1344,  203,  203,
      203,  203, 1344,  964, 1344, 1344, 1344,  203,  203,  203,
      203,  203,  962,  203,  963,  203,  203, 1344,  203,  203,
      203, 1344,  203,  203, 1344,  203,  203, 1344,  203,  203,
      964, 1344, 1344,  203,  203,  203,  203,  965,  203,  203,
      203,  203,  203,  203, 1344,  203,  203,  203, 1344,  203,

      203,  203,  203,  203,  966, 1344,  203, 1344,  967, 1344,
      203,  203,  203,  203,  965, 1344,  203,  203,  203, 1344,
      203,  203,  203, 1344,  203, 1344,  203,  203,  203,  968,
      203,  966,  203, 1344, 1344,  967,  203,  203,  203, 1344,
      203,  203,  203, 1344,  203,  203, 1344, 1344,  203,  969,
     1344,  203,  203,  203,  203,  970,  968, 1344, 1344,  203,
      203,  203, 1344,  203,  203,  203, 1344, 1344,  203,  203,
     1344,  972,  203, 1344,  971,  203,  969, 1344,  203,  203,
      203,  203,  970,  203, 1344,  203, 1344,  203,  203,  203,
      203,  203,  203,  203, 1344,  203, 1344, 1344,  972,  203,

     1344,  971,  203,  203, 1344, 1344, 1344,  203,  203,  203,
      203,  974,  203,  203, 1344,  203,  203,  203,  203, 1344,
      203,  203,  203,  203, 1344,  973,  203,  203, 1344,  203,
      203,  203,  203,  975,  203, 1344,  203,  203,  974,  203,
      203,  976,  203,  203, 1344,  203, 1344,  203,  203,  203,
      203,  203,  973,  977,  203, 1344,  203, 1344,  203,  203,
      975,  203, 1344,  203,  203,  203,  203,  203,  976,  203,
      203,  203,  203, 1344,  203,  203,  203,  203,  203,  203,
      977,  203, 1344, 1344, 1344,  203,  978,  203,  203, 1344,
      203,  203,  203,  203,  203,  203,  203, 1344,  203, 1344,

      979, 1344,  203, 1344,  203,  203,  203, 1344,  203,  203,
     1344,  203,  203,  978,  203, 1344,  203, 1344,  203,  980,
      203,  203,  203, 1344, 1344, 1344, 1344,  979,  203, 1344,
      203, 1344,  203, 1344, 1344,  203,  203, 1344,  203, 1344,
      203, 1344,  203,  203,  203, 1344,  980, 1344,  203,  203,
     1344,  981, 1344, 1344,  203,  203,  203,  203,  982, 1344,
     1344, 1344,  203,  203, 1344, 1344, 1344,  203,  203,  203,
      203,  203,  203,  984, 1344, 1344,  203,  203,  981,  983,
     1344,  203,  203,  203,  203,  982,  203, 1344, 1344, 1344,
      203,  203, 1344, 1344, 1344,  203,  203,  203, 1344,  203,

      984, 1344, 1344, 1344,  203, 1344,  983,  986,  203,  203,
      203,  203,  203,  203,  203,  203,  985, 1344,  203,  203,
      203, 1344, 1344,  203,  203, 1344, 1344, 1344,  987, 1344,
     1344, 1344,  203, 1344,  986,  203, 1344,  203,  203,  203,
     1344,  203,  203,  985, 1344, 1344,  203,  203,  203, 1344,
      203,  203,  203,  988,  203,  987,  203, 1344, 1344,  203,
      203, 1344,  203, 1344,  203,  203,  203, 1344, 1344, 1344,
      203,  991,  203, 1344,  203,  203,  203,  203,  203,  203,
      988,  203,  203,  203,  203, 1344,  203,  203, 1344,  203,
      989,  203,  203,  203,  203, 1344,  990,  203,  991,  203,

      203,  203,  203,  203,  203,  203,  203, 1344,  203,  203,
     1344,  203, 1344,  203,  203, 1344,  203,  989,  203,  203,
      203,  203, 1344,  990,  203,  203, 1344,  203, 1344,  203,
      203,  203,  203,  203,  203,  203, 1344, 1344, 1344,  203,
     1344,  203, 1344,  203,  203,  203,  203,  203,  203, 1344,
     1344,  203,  203,  203, 1344, 1344, 1344,  203,  203,  203,
     1066,  203,  203, 1344,  203, 1344,  203, 1344, 1067,  203,
     1344,  203,  203,  203,  203,  203, 1344, 1344,  203, 1344,
      203, 1344,  203, 1344, 1344,  203,  203, 1066,  203,  203,
     1068,  203,  203, 1344,  203, 1067,  203, 1344, 1344,  203,

      203,  203,  203, 1344, 1344,  203, 1344, 1344,  203,  203,
      203, 1344,  203,  203, 1344,  203,  203, 1068,  203,  203,
      203,  203, 1344, 1069, 1344, 1344,  203,  203,  203,  203,
     1071, 1344, 1344, 1344,  203,  203, 1070,  203,  203,  203,
     1344, 1072,  203,  203,  203,  203,  203,  203, 1344, 1344,
     1069, 1344,  203,  203,  203,  203, 1344, 1071, 1073, 1344,
      203,  203,  203, 1070,  203,  203, 1344, 1344, 1072,  203,
      203,  203, 1344,  203, 1344, 1344,  203, 1344, 1074,  203,
      203,  203, 1344,  203, 1344, 1073,  203,  203,  203,  203,
      203,  203,  203, 1344,  203, 1344, 1076,  203, 1077,  203,

     1075, 1344,  203,  203,  203, 1074,  203,  203,  203, 1344,
      203, 1344,  203,  203, 1344,  203,  203,  203,  203,  203,
      203,  203,  203, 1076, 1079, 1077,  203, 1075, 1344,  203,
      203,  203,  203,  203,  203,  203, 1078, 1344,  203,  203,
      203,  203,  203,  203, 1344,  203,  203,  203, 1080,  203,
     1344, 1079, 1081, 1344, 1344, 1344,  203,  203,  203,  203,
      203,  203, 1344, 1078, 1344,  203,  203,  203,  203,  203,
     1082, 1344,  203,  203, 1083, 1080,  203,  203,  203, 1081,
     1344, 1344,  203,  203,  203,  203,  203,  203,  203, 1344,
      203, 1344, 1084,  203,  203, 1344,  203, 1082,  203,  203,

     1344, 1083, 1344,  203,  203,  203,  203, 1344,  203,  203,
     1087,  203,  203,  203,  203,  203,  203,  203, 1344, 1084,
      203,  203,  203,  203,  203,  203, 1086, 1085, 1344, 1344,
      203,  203,  203,  203, 1344,  203,  203, 1087, 1344,  203,
     1088,  203, 1344,  203,  203, 1344, 1344,  203, 1344,  203,
      203,  203, 1344, 1086, 1085, 1344, 1344,  203,  203,  203,
      203, 1344,  203,  203,  203,  203, 1092, 1088,  203,  203,
     1344,  203,  203, 1344,  203,  203,  203,  203,  203, 1089,
     1090, 1344,  203, 1091,  203,  203, 1344,  203,  203,  203,
     1344,  203,  203, 1092, 1344,  203,  203, 1344, 1344,  203,

     1344,  203,  203,  203, 1344,  203, 1089, 1090, 1344,  203,
     1091,  203,  203,  203, 1093,  203,  203,  203,  203, 1344,
      203, 1344,  203,  203, 1344, 1344,  203, 1344,  203, 1344,
     1344, 1344, 1344,  203, 1344, 1344,  203, 1344,  203, 1344,
      203, 1093, 1344,  203,  203,  203, 1344,  203,  203,  203,
      203, 1344,  203,  203, 1344,  203, 1344,  203,  203, 1344,
      203,  203, 1096,  203,  203,  203, 1094,  203,  203,  203,
     1344,  203, 1095,  203,  203,  203, 1344,  203, 1097,  203,
     1344, 1344, 1344,  203,  203,  203, 1344, 1344,  203, 1096,
     1344,  203, 1344, 1094,  203,  203,  203, 1344,  203, 1095,

      203,  203, 1098, 1344,  203, 1097,  203,  203,  203,  203,
      203, 1344, 1344,  203,  203,  203, 1344,  203,  203,  203,
     1344, 1344,  203, 1344, 1344, 1344, 1344,  203, 1344, 1098,
     1344, 1344, 1344,  203,  203,  203,  203, 1344, 1344, 1344,
      203,  203,  203, 1344,  203,  203,  203, 1344,  203,  203,
      203,  203, 1344,  203,  203,  203, 1099,  203,  203,  203,
      203, 1344, 1344,  203,  203, 1344, 1344, 1344, 1344,  203,
     1344, 1344, 1344, 1344, 1344,  203, 1344,  203,  203, 1344,
      203, 1344,  203, 1099,  203,  203,  203,  203, 1344, 1344,
      203,  203,  203, 1101,  203, 1344,  203,  203, 1344,  203,

     1100, 1344, 1344,  203,  203,  203, 1344,  203, 1344, 1344,
     1344, 1344, 1102,  203, 1344, 1103, 1104,  203,  203,  203,
     1101,  203, 1344,  203,  203, 1344,  203, 1100,  203, 1344,
      203,  203,  203, 1344,  203, 1344, 1344, 1344, 1344, 1102,
      203, 1344, 1103, 1104,  203,  203,  203,  203,  203,  203,
      203, 1344, 1105,  203,  203,  203, 1344, 1344,  203,  203,
      203, 1344,  203, 1344, 1344, 1344, 1344,  203, 1344, 1344,
     1344, 1344,  203,  203,  203,  203,  203, 1344, 1344, 1105,
      203,  203, 1344, 1344, 1344,  203,  203,  203,  203,  203,
      203,  203, 1106,  203,  203,  203,  203, 1344,  203,  203,

      203, 1344,  203,  203,  203, 1344,  203, 1344, 1344, 1344,
     1344, 1107,  203, 1344, 1344,  203,  203,  203,  203, 1106,
      203, 1344,  203,  203, 1108,  203, 1344,  203, 1344,  203,
      203,  203, 1344,  203, 1344,  203, 1344,  203, 1107,  203,
     1344, 1344,  203,  203, 1344, 1344,  203,  203,  203, 1344,
     1344, 1108, 1344,  203, 1109, 1110, 1344, 1344,  203,  203,
     1344,  203,  203, 1344,  203, 1344,  203, 1344, 1344,  203,
     1344,  203, 1344,  203,  203,  203, 1344, 1344, 1344, 1344,
      203, 1109, 1110, 1344, 1344,  203,  203,  203,  203,  203,
      203, 1344,  203,  203,  203, 1111, 1344,  203,  203,  203,

     1112,  203,  203,  203,  203, 1344, 1344, 1344,  203, 1344,
      203, 1344, 1344,  203,  203, 1344,  203,  203, 1344,  203,
      203,  203, 1111, 1344,  203, 1344,  203, 1112,  203,  203,
      203,  203, 1344, 1344,  203,  203, 1344,  203,  203, 1344,
      203, 1114,  203, 1344,  203, 1344,  203,  203, 1344, 1113,
     1344, 1344,  203, 1344,  203, 1344, 1344, 1344, 1344, 1344,
     1344,  203,  203, 1344, 1344,  203, 1344, 1344, 1114,  203,
      203,  203, 1344,  203,  203, 1344, 1113, 1344,  203,  203,
      203,  203,  203, 1115, 1344, 1344, 1344, 1344,  203,  203,
      203, 1116,  203, 1344, 1344, 1344,  203,  203,  203, 1344,

     1344,  203,  203, 1344, 1117,  203, 1344,  203,  203,  203,
     1115, 1344,  203, 1344,  203,  203,  203,  203, 1116,  203,
     1118, 1344, 1344,  203,  203,  203,  203, 1344,  203,  203,
     1344, 1117,  203, 1344, 1344,  203,  203, 1344,  203,  203,
     1344,  203, 1119,  203, 1344, 1344,  203, 1118,  203, 1344,
      203,  203, 1344,  203, 1120,  203,  203, 1344,  203,  203,
      203, 1344,  203,  203,  203,  203,  203, 1344,  203, 1119,
      203, 1121,  203,  203, 1344,  203,  203,  203,  203, 1344,
      203, 1120,  203,  203,  203,  203,  203,  203, 1123,  203,
      203,  203,  203,  203,  203,  203,  203,  203, 1121,  203,

     1344, 1122, 1344,  203,  203,  203,  203,  203, 1344,  203,
     1344,  203, 1125,  203, 1344, 1123,  203,  203, 1344,  203,
      203,  203, 1344,  203, 1124,  203,  203, 1344, 1122,  203,
      203,  203,  203,  203, 1344,  203,  203, 1126, 1344, 1125,
     1344, 1344,  203,  203, 1344,  203, 1344,  203,  203, 1344,
      203, 1124,  203,  203, 1127,  203,  203,  203, 1344,  203,
      203, 1344,  203,  203, 1126, 1344,  203, 1344,  203,  203,
     1344, 1344,  203,  203, 1128,  203, 1344,  203,  203, 1129,
     1344, 1127,  203, 1344, 1344, 1130, 1344,  203, 1344, 1344,
      203, 1344,  203,  203, 1344,  203,  203,  203,  203, 1344,

      203, 1128,  203,  203, 1344,  203, 1129, 1344,  203,  203,
     1344, 1131, 1130, 1344, 1344, 1344,  203,  203, 1344,  203,
      203,  203,  203,  203,  203,  203, 1344,  203, 1344,  203,
      203, 1344,  203, 1344, 1344,  203,  203, 1344, 1131, 1344,
     1132, 1133,  203,  203,  203, 1344,  203,  203,  203,  203,
      203, 1344,  203, 1344,  203, 1344, 1344, 1344, 1344,  203,
      203, 1344,  203, 1344, 1344, 1344, 1134, 1132, 1133,  203,
      203,  203, 1344,  203,  203, 1344,  203,  203,  203,  203,
     1344, 1344, 1344,  203,  203,  203,  203,  203, 1344,  203,
     1135, 1136, 1344, 1134,  203,  203, 1344,  203, 1344, 1344,

     1344,  203,  203,  203,  203,  203, 1344, 1344, 1344,  203,
      203,  203,  203,  203,  203, 1137, 1344, 1135, 1136, 1344,
     1344,  203,  203,  203, 1344,  203,  203, 1344,  203,  203,
      203,  203,  203,  203,  203,  203,  203, 1344,  203,  203,
     1344,  203, 1137, 1344,  203, 1344, 1344, 1344, 1344, 1344,
      203, 1344,  203,  203, 1182,  203, 1344,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203, 1344,
     1183,  203, 1344,  203,  203,  203, 1344,  203, 1344,  203,
      203, 1182, 1344,  203,  203,  203,  203, 1344,  203,  203,
      203,  203, 1344,  203,  203,  203, 1344, 1183,  203, 1344,

      203,  203,  203, 1344,  203, 1344,  203,  203, 1344, 1344,
      203,  203,  203,  203, 1184,  203,  203, 1185,  203,  203,
      203,  203,  203, 1344,  203,  203, 1344,  203,  203, 1344,
     1344, 1344, 1344, 1186, 1344, 1344, 1344,  203,  203,  203,
      203, 1184,  203, 1344, 1185,  203,  203, 1187,  203,  203,
     1344,  203,  203, 1344,  203,  203,  203, 1344,  203, 1188,
     1186,  203, 1344,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203, 1344, 1187, 1344, 1344,  203, 1344,  203,
     1344, 1344,  203,  203, 1344,  203, 1188, 1344,  203, 1344,
      203, 1344, 1344,  203,  203,  203,  203,  203,  203,  203,

     1344,  203, 1189, 1344,  203, 1344,  203, 1344, 1344,  203,
      203, 1190,  203, 1344, 1344, 1191, 1344,  203, 1192, 1344,
      203,  203,  203,  203,  203,  203,  203, 1344,  203, 1189,
      203,  203, 1344,  203, 1344, 1344,  203,  203, 1190,  203,
     1344, 1344, 1191, 1344,  203, 1192, 1344,  203,  203,  203,
      203,  203,  203,  203, 1344,  203, 1193,  203,  203,  203,
      203,  203, 1194,  203, 1344, 1344,  203, 1344, 1344, 1344,
     1344,  203,  203, 1344,  203,  203, 1344,  203,  203,  203,
      203, 1344,  203, 1193,  203,  203,  203,  203,  203, 1194,
      203, 1344, 1344,  203, 1344, 1344, 1344, 1344,  203,  203,

     1344,  203, 1344, 1344, 1195,  203,  203,  203, 1344, 1344,
     1344,  203,  203,  203,  203,  203,  203,  203, 1344, 1344,
      203,  203,  203, 1344,  203,  203,  203, 1344, 1344,  203,
     1344, 1195, 1344, 1344,  203, 1344, 1344, 1344, 1344, 1344,
      203,  203,  203,  203, 1344, 1344, 1344,  203,  203,  203,
     1196,  203,  203,  203,  203,  203,  203,  203, 1344,  203,
      203,  203,  203,  203,  203, 1344, 1197,  203,  203,  203,
      203,  203, 1199, 1344, 1344, 1344,  203, 1196,  203,  203,
     1344,  203,  203, 1344,  203, 1344,  203,  203,  203,  203,
      203,  203, 1344, 1197,  203,  203,  203,  203,  203, 1199,

      203, 1344,  203,  203, 1344,  203,  203,  203, 1198, 1344,
      203, 1344,  203,  203,  203,  203, 1344,  203,  203, 1344,
      203, 1344,  203,  203, 1344, 1344, 1344,  203,  203,  203,
      203, 1344,  203,  203,  203, 1198,  203,  203,  203,  203,
      203,  203,  203, 1344,  203,  203, 1344,  203, 1344,  203,
      203, 1344,  203, 1344,  203,  203, 1344,  203,  203,  203,
      203, 1344,  203,  203,  203,  203,  203,  203, 1344,  203,
     1344,  203,  203, 1344,  203, 1344, 1344,  203, 1344,  203,
     1200,  203,  203, 1344, 1344,  203, 1201,  203, 1344,  203,
      203,  203, 1344,  203,  203, 1344,  203, 1344,  203,  203,

     1344,  203, 1344, 1344,  203, 1344,  203, 1200, 1202,  203,
     1344,  203,  203, 1201,  203,  203,  203,  203, 1344, 1344,
      203,  203,  203,  203,  203, 1344, 1344, 1344, 1344, 1344,
      203,  203,  203,  203,  203, 1202,  203, 1344,  203,  203,
      203, 1203,  203,  203, 1344, 1344,  203,  203,  203,  203,
     1344,  203, 1344,  203, 1344,  203, 1344,  203,  203,  203,
      203,  203, 1204,  203,  203,  203, 1344,  203, 1203,  203,
     1344, 1344, 1344,  203,  203, 1344,  203, 1344,  203, 1344,
      203, 1344,  203,  203, 1205, 1344, 1344,  203,  203, 1204,
     1344,  203,  203, 1344, 1344,  203,  203,  203, 1344, 1344,

     1344,  203,  203,  203, 1344,  203,  203,  203,  203, 1344,
      203, 1205, 1344,  203, 1344,  203, 1344, 1344,  203,  203,
     1344,  203,  203, 1344,  203, 1344,  203, 1206, 1344,  203,
     1344,  203,  203,  203,  203,  203, 1207,  203, 1344, 1344,
      203, 1208,  203, 1344, 1344,  203,  203,  203,  203, 1344,
     1344, 1209,  203,  203, 1206,  203,  203,  203,  203,  203,
      203,  203, 1344, 1207,  203, 1344,  203, 1344, 1208,  203,
     1344,  203, 1344, 1344,  203, 1344, 1210, 1344, 1209,  203,
     1344,  203,  203,  203,  203,  203, 1344,  203,  203, 1344,
     1344,  203, 1344,  203, 1211, 1344,  203, 1344,  203, 1344,

      203,  203, 1344, 1210, 1344, 1344,  203, 1212,  203,  203,
     1344, 1344,  203,  203, 1344, 1344,  203, 1344,  203,  203,
     1344, 1211, 1344,  203, 1344, 1344, 1344,  203,  203,  203,
      203, 1344,  203,  203, 1212, 1344,  203, 1213, 1344, 1344,
      203, 1344,  203,  203, 1344, 1344,  203, 1344,  203, 1344,
      203,  203, 1344,  203, 1344, 1214,  203,  203,  203,  203,
      203, 1344, 1344,  203, 1213, 1344, 1344, 1344, 1344,  203,
     1344, 1344,  203, 1344, 1215,  203, 1344,  203,  203,  203,
      203,  203, 1214,  203,  203,  203, 1344,  203,  203, 1344,
      203, 1344, 1344,  203, 1344, 1216, 1344,  203, 1344,  203,

     1344, 1215,  203, 1344, 1344, 1344,  203,  203,  203, 1344,
      203,  203, 1217, 1344,  203,  203,  203, 1344, 1344, 1344,
      203,  203, 1216,  203,  203,  203,  203, 1344, 1344,  203,
      203, 1218, 1344, 1344,  203,  203, 1344, 1344, 1344, 1217,
     1344,  203,  203,  203,  203, 1344, 1344, 1344,  203,  203,
      203, 1344,  203,  203,  203, 1344, 1219,  203, 1218, 1344,
     1344, 1344,  203, 1344, 1344,  203,  203,  203,  203,  203,
     1344,  203,  203,  203, 1220, 1344,  203,  203,  203, 1344,
     1344,  203, 1344, 1219, 1344, 1344, 1344, 1344, 1221, 1344,
     1344, 1344,  203,  203,  203,  203,  203, 1344,  203,  203,

      203, 1220, 1344,  203,  203,  203, 1344,  203,  203,  203,
      203, 1344,  203, 1344,  203, 1221, 1344,  203, 1344,  203,
     1344, 1344,  203,  203, 1344,  203,  203, 1344,  203, 1344,
      203, 1344, 1344,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203, 1344,  203, 1344,  203,  203, 1344,  203,
     1344, 1344,  203,  203, 1344,  203,  203, 1344,  203, 1223,
      203,  203, 1222,  203, 1344,  203,  203,  203,  203,  203,
      203,  203,  203, 1344,  203, 1344, 1344,  203, 1344,  203,
     1344, 1344,  203,  203, 1344,  203, 1223, 1344,  203, 1222,
      203, 1344, 1344,  203,  203,  203,  203,  203,  203,  203,

      203,  203,  203,  203,  203,  203,  203,  203, 1344,  203,
      203, 1344,  203, 1344, 1344,  203, 1247, 1344, 1344, 1344,
      203,  203, 1344,  203, 1344, 1344,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203, 1344,  203,
      203,  203,  203, 1247,  203, 1248, 1226,  203, 1344, 1344,
      203,  203, 1344,  203, 1344, 1249, 1344, 1344,  203,  203,
      203, 1344,  203,  203, 1344,  203, 1344,  203,  203, 1344,
      203,  203, 1344, 1344,  203,  203, 1344,  203,  203, 1344,
      203, 1250, 1249, 1344,  203,  203,  203,  203,  203,  203,
      203, 1344,  203, 1344,  203,  203, 1344,  203, 1344,  203,

     1344,  203,  203,  203,  203,  203, 1344,  203, 1250,  203,
     1344,  203,  203, 1344, 1251,  203,  203,  203,  203,  203,
     1344,  203,  203,  203,  203, 1344,  203,  203, 1344, 1344,
      203,  203,  203,  203,  203, 1344,  203, 1344, 1252, 1344,
     1344, 1251, 1344,  203, 1344,  203,  203, 1344,  203,  203,
      203,  203,  203,  203,  203, 1344, 1344, 1344,  203,  203,
      203,  203,  203, 1344, 1344, 1252,  203, 1344,  203,  203,
      203,  203,  203, 1253, 1344,  203,  203, 1344,  203,  203,
      203, 1344,  203,  203, 1344,  203,  203, 1344, 1344,  203,
      203, 1344,  203,  203, 1344,  203,  203,  203,  203,  203,

     1253, 1344,  203, 1344, 1254,  203, 1344, 1344, 1344,  203,
      203, 1344, 1344,  203, 1255,  203,  203,  203, 1344,  203,
      203,  203, 1344, 1344,  203,  203,  203, 1344, 1344,  203,
     1344, 1254,  203, 1344,  203, 1344, 1344, 1344, 1344,  203,
      203, 1255,  203,  203,  203, 1344, 1344,  203,  203, 1344,
     1344, 1344,  203,  203, 1344,  203, 1344,  203,  203,  203,
      203,  203,  203, 1344, 1256,  203,  203,  203, 1257, 1344,
      203,  203,  203,  203,  203, 1344, 1259,  203,  203, 1344,
     1344,  203,  203, 1258,  203,  203,  203,  203,  203,  203,
     1344, 1256,  203,  203,  203, 1257, 1344,  203, 1344,  203,

      203,  203, 1344, 1259,  203,  203, 1344,  203,  203,  203,
     1258, 1344, 1344,  203,  203,  203,  203, 1344,  203,  203,
      203, 1344, 1344,  203, 1344,  203, 1344,  203,  203, 1344,
     1344, 1344,  203, 1260,  203, 1344,  203,  203, 1344, 1344,
     1344,  203, 1344,  203, 1344,  203,  203, 1344, 1261,  203,
      203,  203,  203, 1344,  203,  203,  203, 1344, 1344,  203,
     1260,  203, 1344, 1344,  203,  203, 1344,  203, 1344, 1344,
     1344, 1344,  203, 1344, 1344, 1261,  203,  203,  203,  203,
     1344,  203, 1344,  203, 1344, 1344,  203, 1344,  203, 1344,
     1344,  203,  203,  203,  203,  203, 1344, 1344, 1344,  203,

      203, 1262, 1344, 1344,  203,  203,  203,  203,  203,  203,
     1344, 1344, 1344,  203,  203, 1344, 1344, 1344,  203,  203,
      203, 1344,  203,  203, 1344,  203, 1344,  203, 1262, 1263,
      203, 1344,  203, 1344,  203,  203,  203,  203, 1264,  203,
     1344,  203, 1344, 1344,  203, 1344,  203, 1344, 1344,  203,
      203,  203,  203,  203, 1344, 1344, 1263,  203,  203, 1265,
     1344, 1344,  203,  203,  203, 1264,  203, 1344, 1344, 1266,
     1344,  203, 1344,  203, 1344, 1344,  203, 1267,  203,  203,
      203,  203, 1344, 1344, 1344,  203, 1265,  203, 1344,  203,
      203,  203, 1344, 1344, 1344,  203, 1266,  203, 1344,  203,

      203,  203, 1344,  203, 1267, 1344,  203, 1344,  203,  203,
     1344,  203, 1344,  203,  203, 1344,  203,  203,  203,  203,
     1344,  203,  203,  203,  203,  203,  203, 1344,  203, 1344,
      203,  203, 1344,  203, 1282, 1344,  203, 1344,  203,  203,
      203,  203, 1344,  203,  203, 1344,  203,  203,  203,  203,
      203,  203,  203, 1344, 1284, 1344, 1344,  203,  203,  203,
      203, 1282, 1344, 1344, 1344,  203,  203,  203,  203,  203,
      203, 1344, 1344,  203,  203,  203,  203,  203,  203, 1344,
     1344, 1284, 1344,  203,  203,  203,  203,  203, 1286, 1285,
     1344,  203,  203,  203,  203, 1344,  203,  203, 1344,  203,

      203,  203,  203,  203,  203,  203, 1344,  203, 1344,  203,
      203,  203,  203, 1344,  203, 1286, 1285, 1344,  203,  203,
      203,  203, 1344, 1344,  203, 1344,  203,  203,  203, 1344,
      203,  203,  203, 1344,  203, 1344,  203,  203,  203, 1344,
     1287, 1344, 1344,  203, 1289, 1288,  203,  203,  203,  203,
      203,  203, 1344, 1344,  203,  203,  203, 1344,  203, 1344,
     1344,  203, 1344, 1344,  203, 1344, 1344, 1287, 1344, 1344,
      203, 1289, 1288,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203, 1344,  203,  203,  203,  203,  203,
     1344,  203, 1344, 1344,  203, 1344, 1344, 1344, 1344,  203,

      203, 1344,  203, 1344, 1344,  203,  203,  203,  203,  203,
     1344, 1344,  203,  203,  203,  203,  203, 1344,  203,  203,
     1344,  203, 1344,  203,  203, 1290,  203,  203, 1292,  203,
     1291,  203,  203, 1344,  203, 1344,  203,  203, 1344,  203,
     1344, 1344,  203, 1344,  203, 1344,  203,  203, 1293,  203,
      203,  203, 1290,  203,  203, 1292,  203, 1291,  203,  203,
     1344,  203, 1301, 1295,  203, 1344,  203, 1344, 1303,  203,
     1344,  203,  203,  203,  203, 1293,  203,  203,  203, 1344,
      203, 1344,  203,  203,  203, 1344,  203,  203,  203, 1304,
     1344,  203, 1344,  203,  203, 1303,  203,  203, 1344,  203,

      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203, 1304, 1344,  203, 1344,
      203,  203,  203, 1344,  203,  203, 1344,  203,  203,  203,
      203, 1344,  203,  203,  203,  203,  203,  203,  203,  203,
      203, 1344, 1344,  203,  203, 1344,  203, 1344,  203,  203,
     1344,  203,  203, 1344,  203, 1344,  203,  203, 1344,  203,
     1344,  203,  203,  203,  203,  203,  203, 1305, 1344, 1344,
      203,  203,  203,  203, 1344,  203,  203,  203,  203, 1344,
      203,  203,  203,  203,  203,  203,  203, 1344,  203,  203,
      203,  203, 1313,  203, 1305, 1344,  203,  203,  203,  203,

      203,  203,  203,  203,  203,  203, 1344,  203,  203,  203,
      203, 1344,  203,  203, 1344, 1344, 1344,  203,  203, 1313,
     1344, 1344, 1344,  203,  203,  203, 1344,  203,  203,  203,
     1344, 1344,  203, 1344, 1344, 1344, 1344,  203,   48,   48,
       48,   48,   48,   49,   49,   49,   49,   49,   91, 1344,
     1344,   91,   91,  188,  188,  188, 1344,  188,  190, 1344,
      190,  190,  190,  193, 1344,  193,  193,  193,  203, 1344,
      203,  203,  203,    9, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,

     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344
    } ;

static const flex_int16_t yy_chk[8951] = {
	0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   11,   11,   12,   12,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   17,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   20,
       20,   23,   24,   23,   29,   30,   24,   25,   32,   23,
       29,   23,   24,   30,   25,   23,   23,   33,   43,   30,

       43,   25,   24,   43,   25, 1348,   46,   25,   23,   24,
       23,   29,   30,   24,   25,   32,   23,   29,   23,   24,
       30,   25,   23,   23,   33,   43,   30,   43,   25,   24,
       43,   25,   26,   46,   25,   27,   26,   27,   52,   52,
       26,   34,   27,  102,   35,   34,   26,   27,   35,   26,
       58,   34,   53,   53,   35,   45,   45,   61,   61,   26,
     1341,   58,   27,   26,   27, 1340,   36,   26,   34,   27,
      102,   35,   34,   26,   27,   35,   26,   28,   34,   38,
       36,   35,   45,   45,  103,   28,   36,   36,   28,  106,
       38,   28,   31,   36,   28, 1339,   38,   28,   31,   31,

       31,   44,   89,   89,   28,   31,   38,   36, 1338,   44,
     1336,  103,   28,   36,   36,   28,  106,   38,   28,   31,
     1334,   28,   37,   38,   28,   31,   31,   31,   44,  107,
       37,   40,   31,  104,   37,   40,   44,   37,   37,   40,
       84,  104,   84,  110,   84,   40, 1332,   84, 1330,   37,
      105, 1328,   84,  105, 1326,  113,  107,   37,   40, 1324,
      104,   37,   40, 1322,   37,   37,   40,   84,  104,   84,
      110,   84,   40,   41,   84,   41,  116,  105,   41,   84,
      105,   41,  113,   41,  120,   41,   41,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  191,  191, 1320,

       41, 1318,   41,  116, 1316,   41,  108,  108,   41,  109,
       41,  120,   41,   41,   42,  115,  109,   70,   42,   70,
      108,   42,   42,   70,   70,  115,  119,  119,   42,   70,
      121,   42, 1314,  108,  108, 1310,  109, 1146, 1146, 1269,
     1269,   42,  115,  109,   70,   42,   70,  108,   42,   42,
       70,   70,  115,  119,  119,   42,   70,  121,   42,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       64,   64,  112,   64,   64,   64,   64,   64,   64,  112,
       71,  117, 1306, 1300,   71, 1294,  117,  122,   71,   64,
       64,   64,   73,  123,   71,   64,   73,   64,  124,  112,

      126,  127,   73,   64,   71,   64,  112,   71,  117,   64,
       64,   71,   73,  117,  122,   71,  128,  130, 1281,   73,
      123,   71,   64,   73,   64,  124, 1268,  126,  127,   73,
       64,   71,   64, 1246,  131, 1224,   64,   64, 1181,   73,
     1138, 1065,  992,  128,  130,   64,   65,   65,  895,   65,
       65,   65,   65,   65,   65,  798,  672,  132,   74,   75,
       76,  131,   74,   75,   76,   65,   65,   65,   74,   75,
       76,  133,   65,   80,  135,  129,   65,   80,   74,   75,
       76,  129,   65,   80,  132,   74,   75,   76,  136,   74,
       75,   76,   65,   80,  546,   74,   75,   76,  133,   65,

       80,  135,  129,   65,   80,   74,   75,   76,  129,   65,
       80,  419,  291,   86,  138,  136,   86,   86,  139,   65,
       80,   65,   66,   86,   81,  195,   66,  141,   81,   66,
       66,  134,   81,   86,  134,  193,   66,  142,   81,   66,
       86,  138,   66,   86,   86,  139,   66,   93,   81,   66,
       86,   81,  140,   66,  141,   81,   66,   66,  134,   81,
       86,  134,  140,   66,  142,   81,   66,  140,  140,   66,
       91,   88,   85,   66,   67,   81,   85,   87,   67,  140,
       85,   87,   67,  143,  144,  147,   85,   87,   67,  140,
      145,   67,  145,  148,  140,  140,   85,   87,   67,   85,

       63,   67,   62,   85,   87,   67,   55,   85,   87,   67,
      143,  144,  147,   85,   87,   67,   54,  145,   67,  145,
      148,  149,  150,   85,   87,   67,   68,  114,  114,  114,
       68,  114,  118,   68,  118,   68,   68,  118,  152,  146,
       68,  146,  153,  118,  154,   68,   68,   50,  149,  150,
      118,   47,  146,   68,  114,  114,  114,   68,  114,  118,
       68,  118,   68,   68,  118,  152,  146,   68,  146,  153,
      118,  154,   68,   68,   69,  151,  156,  118,  151,  146,
      157,   69,   69,  158,  159,   69,  160,  125,   69,  125,
      162,   69,  161,  125,   69,   22,  161,   21,  164,  162,

      125,   69,  151,  156,  125,  151,  166,  157,   69,   69,
      158,  159,   69,  160,  125,   69,  125,  162,   69,  161,
      125,   69,   72,  161,  163,  164,  162,  125,   72,   72,
       72,  125,  165,  166,  169,   72,  167,  163,  168,  170,
       72,   13,  163,  165,  171,  167,  172,  173,    9,   72,
      175,  163,  168,  167,  176,   72,   72,   72,    6,  165,
        5,  169,   72,  167,  163,  168,  170,   72,   77,  163,
      165,  171,  167,  172,  173,   77,  174,  175,  177,  168,
      167,  176,   77,  180,  179,   77,  178,  174,   77,   77,
        0,  179,  181,  182,  179,   77,    0,    0,  184,  182,

      185,  186,   77,  174,    0,  177,  178,    0,    0,   77,
      180,  179,   77,  178,  174,   77,   77,   78,  179,  181,
      182,  179,   78,  183,   78,  184,  182,  185,  186,  294,
       78,   78,  296,  178,   78,  211,  183,   78,   78,    0,
      211,    0,  211,    0,   78,    0,    0,  211,    0,   78,
      183,   78,  211,    0,    0,  297,  294,   78,   78,  296,
      299,   78,  211,  183,   78,   78,   79,  211,  203,  211,
      204,  204,  203,   79,  211,  204,  301,   79,  203,  211,
       79,  204,  297,   79,  302,  303,   79,  299,  203,    0,
      304,  204,    0,   79,  305,  203,    0,  204,  204,  203,

       79,  306,  204,  301,   79,  203,  307,   79,  204,    0,
       79,  302,  303,   79,   82,  203,   82,  304,  204,   82,
       82,  305,   82,  206,   82,  206,   82,   82,  306,    0,
      206,  206,    0,  307,  309,  206,   82,    0,    0,    0,
        0,   82,    0,   82,    0,    0,   82,   82,    0,   82,
      206,   82,  206,   82,   82,  205,  212,  206,  206,  205,
      212,  309,  206,   82,   83,  205,  212,  208,   83,  208,
      205,   83,   83,  208,  208,  205,  212,  310,   83,  208,
      311,   83,  205,  212,  312,  313,  205,  212,   83,    0,
        0,   83,  205,  212,  208,   83,  208,  205,   83,   83,

      208,  208,  205,  212,  310,   83,  208,  311,   83,    0,
        0,  312,  313,    0,    0,   83,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  207,  209,
      308,  207,  308,  314,  315,  316,  317,    0,  209,  207,
      209,  207,  318,  319,  213,  209,  207,  308,  213,  320,

      209,  207,    0,    0,  213,  207,  209,  308,  207,  308,
      314,  315,  316,  317,  213,  209,  207,  209,  207,  318,
      319,  213,  209,  207,  308,  213,  320,  209,  207,  210,
      210,  213,  214,  321,  214,  210,    0,  210,  323,  214,
      215,  213,  210,  210,  214,  324,  325,  210,  326,  327,
        0,  215,  328,  215,    0,  330,  210,  210,  215,  214,
      321,  214,  210,  215,  210,  323,  214,  215,    0,  210,
      210,  214,  324,  325,  210,  326,  327,  217,  215,  328,
      215,  217,  330,  331,    0,  215,  322,  217,    0,    0,
      215,  216,  216,  216,    0,  216,  218,  217,  216,    0,

      218,  322,  332,  216,  217,  224,  218,  224,  217,  218,
      331,  219,  224,  322,  217,  219,  218,  224,  216,  216,
      216,  219,  216,  218,  217,  216,  219,  218,  322,  332,
      216,  219,  224,  218,  224,  333,  218,    0,  219,  224,
        0,  334,  219,  218,  224,    0,    0,    0,  219,  335,
        0,    0,    0,  219,  336,    0,  337,  338,  219,  220,
        0,  220,  333,    0,  220,  339,  340,  221,  334,  221,
      220,    0,  220,  221,  221,    0,  335,  220,  222,  221,
      222,  336,  220,  337,  338,  222,  220,  222,  220,  341,
      222,  220,  339,  340,  221,  342,  221,  220,  223,  220,

      221,  221,  223,    0,  220,  222,  221,  222,  223,  220,
      343,  225,  222,    0,  222,  344,  341,  222,  223,  225,
      230,  225,  342,  226,  230,  223,  225,  345,  346,  223,
      230,  225,  226,  347,  226,  223,    0,  343,  225,  226,
      230,  348,  344,    0,  226,  223,  225,  230,  225,  349,
      226,  230,    0,  225,  345,  346,    0,  230,  225,  226,
      347,  226,    0,  228,    0,  228,  226,  230,  348,  350,
      228,  226,  227,  232,  227,  228,  349,  232,  227,  229,
      351,  229,  352,  232,  227,  227,  229,  353,  355,  227,
      228,  229,  228,  232,  227,  356,  350,  228,    0,  227,

      232,  227,  228,    0,  232,  227,  229,  351,  229,  352,
      232,  227,  227,  229,  353,  355,  227,  231,  229,  231,
      232,  227,  356,  231,  231,  233,  358,  233,    0,  231,
      354,    0,  233,  359,    0,  234,    0,  233,  235,  234,
      354,    0,  235,  360,  231,  234,  231,    0,  235,    0,
      231,  231,  233,  358,  233,  234,  231,  354,  235,  233,
      359,  236,  234,  236,  233,  235,  234,  354,  236,  235,
      360,  236,  234,  236,  237,  235,  237,  361,    0,  363,
        0,  237,  234,  364,  365,  235,  237,  238,  236,  238,
      236,    0,    0,    0,  238,  236,  238,    0,  236,  238,

      236,  237,    0,  237,  361,  239,  363,  239,  237,  366,
      364,  365,  239,  237,  238,  240,  238,  239,  241,  240,
      244,  238,  241,  238,  244,  240,  238,  362,  241,  241,
      244,  367,  239,  369,  239,  240,  366,  362,  241,  239,
      244,  243,  240,  243,  239,  241,  240,  244,  243,  241,
      370,  244,  240,  243,  362,  241,  241,  244,  367,    0,
      369,    0,  240,  371,  362,  241,  242,  244,  243,  245,
      243,  372,  373,  245,  242,  243,  242,  370,  374,  245,
      243,  242,  242,    0,  246,  246,  242,    0,  246,  245,
      371,  375,    0,  242,  246,  377,  245,    0,  372,  373,

      245,  242,    0,  242,  246,  374,  245,  376,  242,  242,
      260,  246,  246,  242,  260,  246,  245,  249,  375,  249,
      260,  246,  377,  249,  249,    0,  376,  379,  380,  249,
      260,  246,  247,  382,  376,  378,  247,  260,  247,  383,
      247,  260,  247,  384,  249,  385,  249,  260,  378,  386,
      249,  249,  247,  376,  379,  380,  249,  260,    0,  247,
      382,  387,  378,  247,    0,  247,  383,  247,    0,  247,
      384,    0,  385,  388,  389,  378,  386,  390,  392,  247,
      248,  393,  248,  250,  394,  250,  395,  251,  387,  251,
      250,  248,  396,  248,  251,  250,  397,  398,  248,  251,

      388,  389,    0,  248,  390,  392,    0,  248,  393,  248,
      250,  394,  250,  395,  251,  399,  251,  250,  248,  396,
      248,  251,  250,  397,  398,  248,  251,  252,  400,  252,
      248,  254,  401,  254,  252,  252,  402,  404,  254,  252,
        0,  406,  399,  254,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  252,  400,  252,  408,  254,  401,
      254,  252,  252,  402,  404,  254,  252,  253,  406,  253,
      254,    0,  255,  262,  253,  253,  409,  262,  253,  253,
      256,  262,    0,  255,  408,  255,  256,  262,  256,    0,
      255,  410,    0,  256,  253,  255,  253,  262,  256,  255,

      262,  253,  253,  409,  262,  253,  253,  256,  262,  257,
      255,  257,  255,  256,  262,  256,  257,  255,  410,  258,
      256,  257,  255,  405,  262,  256,    0,  258,  411,  258,
        0,  412,  405,  259,  258,  259,  257,  413,  257,  258,
      259,  259,    0,  257,  414,  259,  258,  416,  257,    0,
      405,    0,    0,  263,  258,  411,  258,  263,  412,  405,
      259,  258,  259,  263,  413,  261,  258,  259,  259,  261,
        0,  414,  259,  263,  416,  261,  265,  407,  261,  407,
      263,  417,  547,  548,  263,  261,  264,  265,  264,  265,
      263,  549,  261,  264,  265,    0,  261,  264,  264,  265,

      263,  550,  261,  265,  407,  261,  407,    0,  417,  547,
      548,  551,  261,  264,  265,  264,  265,    0,  549,  552,
      264,  265,  266,    0,  264,  264,  265,  266,  550,  266,
      267,  415,  267,    0,  266,  415,  553,  267,  551,  266,
      554,  267,  267,  555,  268,  556,  552,  558,  268,  266,
      268,  561,  562,    0,  266,  268,  266,  267,  415,  267,
      268,  266,  415,  553,  267,  563,  266,  554,  267,  267,
      555,  268,  556,    0,  558,  268,  270,  268,  561,  562,
      270,  271,  268,    0,  270,  271,  564,  268,  269,  566,
      270,  271,  563,    0,  567,  568,  569,  269,    0,  269,

      270,  271,    0,  270,  269,  269,  272,  270,  271,  269,
      272,  270,  271,  564,  272,  269,  566,  270,  271,    0,
      272,  567,  568,  569,  269,  273,  269,  270,  271,  273,
      272,  269,  269,  272,  571,  273,  269,  272,  273,  572,
      274,  272,    0,  573,  274,  273,  275,  272,  274,  275,
        0,    0,  273,  275,  274,  574,  273,  272,  575,  275,
        0,  571,  273,  576,  274,  273,  572,  274,  577,  275,
      573,  274,  273,  275,  578,  274,  275,  276,  276,  276,
      275,  274,  574,  277,  276,  575,  275,  277,  579,  276,
      576,  274,    0,  277,    0,  577,  275,  582,    0,  583,

      584,  578,    0,  277,  276,  276,  276,  282,  282,  278,
      277,  276,  282,  278,  277,  579,  276,  278,  282,  278,
      277,  279,  585,    0,  582,  279,  583,  584,  282,  278,
      277,  279,  279,    0,  282,  282,  278,  586,  587,  282,
      278,  279,  588,  280,  278,  282,  278,  590,  279,  585,
      280,    0,  279,    0,  591,  282,  278,  280,  279,  279,
      280,    0,  283,  280,  586,  587,  283,    0,  279,  588,
      280,    0,  283,  284,  590,  284,  425,  280,  425,  284,
      284,  591,  283,  425,  280,  284,    0,  280,  425,  283,
      280,  281,  592,  283,  281,  595,    0,  596,  281,  283,

      284,  281,  284,  425,  281,  425,  284,  284,  598,  283,
      425,  600,  284,  285,  281,  425,  601,  285,  281,  592,
        0,  281,  595,  285,  596,  281,  285,  426,  281,  426,
        0,  281,  286,  285,  426,  598,  286,  602,  600,  426,
      285,  281,  286,  601,  285,    0,  603,  287,    0,    0,
      285,  287,  286,  285,  426,    0,  426,  287,  604,  286,
      285,  426,  287,  286,  602,    0,  426,  287,  288,  286,
      605,  421,  288,  603,  287,  421,  288,  606,  287,  286,
      608,  421,  288,  612,  287,  604,  614,  615,  606,  287,
      617,  421,  288,    0,  287,  288,    0,  605,  421,  288,

        0,    0,  421,  288,  606,    0,  619,  608,  421,  288,
      612,  618,  618,  614,  615,  606,  620,  617,  421,  288,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      422,  423,  424,  619,  422,  423,  424,    0,  618,  618,
      422,  423,  424,  620,    0,  621,  623,  624,  625,    0,
      422,  423,  424,  427,  626,    0,  628,  422,  423,  424,
      629,  422,  423,  424,  427,  631,  427,  422,  423,  424,
      632,  427,  621,  623,  624,  625,  427,  422,  423,  424,
      427,  626,  428,  628,  428,  633,  429,  629,    0,  428,
      429,  427,  631,  427,  428,  430,  429,  632,  427,  430,

      431,    0,  634,  427,  431,  430,  429,    0,    0,  428,
      431,  428,  633,  429,  636,  430,  428,  429,  431,    0,
      431,  428,  430,  429,  432,  637,  430,  431,  432,  634,
      638,  431,  430,  429,  432,  433,  639,  431,    0,  433,
        0,  636,  430,  433,  432,  431,  434,  431,  434,  433,
        0,  432,  637,  434,  641,  432,    0,  638,  434,  433,
        0,  432,  433,  639,  642,  435,  433,  435,  643,    0,
      433,  432,  435,  434,  644,  434,  433,  435,    0,  647,
      434,  641,  648,  437,    0,  434,  433,  437,  649,  650,
        0,  642,  435,  437,  435,  643,  437,    0,    0,  435,

        0,  644,    0,  437,  435,  436,  647,  436,  438,  648,
      437,  436,  438,  651,  437,  649,  650,  436,  438,  654,
      437,  439,  436,  437,  438,  439,    0,  436,  438,  439,
      437,  439,  436,  441,  436,  438,  655,  441,  436,  438,
      651,  439,    0,  441,  436,  438,  654,    0,  439,  436,
        0,  438,  439,  441,  436,  438,  439,  440,  439,    0,
      441,  440,    0,  655,  441,  442,  657,  440,  439,  442,
      441,  658,  440,  442,  443,  659,  443,  440,    0,  442,
      441,  443,  660,    0,  440,    0,  443,    0,  440,  442,
        0,  661,  442,  657,  440,  662,  442,  663,  658,  440,

      442,  443,  659,  443,  440,  444,  442,  444,  443,  660,
      445,  444,  444,  443,  445,  664,  442,  444,  661,  446,
      445,  446,  662,  665,  663,  667,  446,  669,    0,  671,
      445,  446,  444,  447,  444,  447,  801,  445,  444,  444,
      447,  445,  664,    0,  444,  447,  446,  445,  446,    0,
      665,  448,  667,  446,  669,  448,  671,  445,  446,    0,
      447,  448,  447,  801,  803,  449,  450,  447,  805,  449,
      450,  448,  447,  449,    0,  806,  450,  807,  448,  449,
      808,  450,  448,    0,    0,  809,  450,    0,  448,  449,
      810,  803,  449,  450,    0,  805,  449,  450,  448,  451,

      449,  451,  806,  450,  807,  451,  449,  808,  450,  811,
      452,  451,  809,  450,  452,    0,  449,  810,    0,  453,
      452,  451,    0,  453,  812,  813,  451,  814,  451,  453,
      452,    0,  451,    0,  453,    0,  811,  452,  451,  453,
        0,  452,  454,    0,    0,  454,  453,  452,  451,  454,
      453,  812,  813,    0,  814,  454,  453,  452,  456,  816,
      455,  453,  456,  457,  455,  454,  453,  457,  456,  454,
      455,  455,  454,  457,  817,  818,  454,    0,  456,  819,
      455,    0,  454,  457,    0,  456,  816,  455,  820,  456,
      457,  455,  454,    0,  457,  456,    0,  455,  455,  459,

      457,  817,  818,  459,  458,  456,  819,  455,  458,  459,
      457,  460,  458,  460,    0,  820,    0,  460,  458,  459,
      461,    0,  461,  460,  821,  823,  459,  461,  458,  824,
      459,  458,  461,  460,  825,  458,  459,    0,  460,  458,
      460,  462,    0,  462,  460,  458,  459,  461,  462,  461,
      460,  821,  823,  462,  461,  458,  824,  826,  827,  461,
      460,  825,  464,    0,  464,  463,    0,  463,  462,  464,
      462,  463,  463,    0,  464,  462,    0,  463,    0,  828,
      462,  829,    0,  465,  826,  827,    0,  465,  467,  464,
      467,  464,  463,  465,  463,  467,  464,  830,  463,  463,

      467,  464,    0,  465,  463,  466,  828,  831,  829,  466,
      465,    0,    0,  466,  465,  467,    0,  467,    0,  466,
      465,    0,  467,  832,  830,    0,    0,  467,  835,  466,
      465,  836,  466,  837,  831,  838,  466,  468,  468,  468,
      466,  469,  469,  469,  468,  470,  466,  470,  469,  468,
      832,  839,  470,  469,  842,  835,  466,  470,  836,    0,
      837,    0,  838,    0,  468,  468,  468,    0,  469,  469,
      469,  468,  470,  471,  470,  469,  468,  845,  839,  470,
      469,  842,  473,  471,  470,  471,  473,  472,  473,  472,
      471,  846,  848,  473,  472,  471,  472,    0,  473,  472,

      471,    0,  847,  851,  845,  847,  854,    0,  855,  473,
      471,  856,  471,  473,  472,  473,  472,  471,  846,  848,
      473,  472,  471,  472,  474,  473,  472,  475,  474,  847,
      851,  475,  847,  854,  474,  855,  476,  475,  856,    0,
      476,    0,  475,  857,  474,    0,  476,  475,  858,  476,
        0,  474,  859,    0,  475,  474,  476,    0,  475,  862,
        0,  474,  477,  476,  475,    0,  477,  476,  477,  475,
      857,  474,  477,  476,  475,  858,  476,  478,  863,  859,
      479,  478,  477,  476,  479,    0,  862,  478,  864,  477,
      479,    0,  480,  477,  865,  477,  480,  478,  866,  477,

      479,    0,  480,    0,  478,  863,  481,  479,  478,  477,
      481,  479,  480,    0,  478,  864,  481,  479,  482,  480,
      868,  865,  482,  480,  478,  866,  481,  479,  482,  480,
      483,    0,    0,  481,  483,  869,    0,  481,  482,  480,
      483,    0,  871,  481,  872,  482,  483,  868,  873,  482,
      483,    0,  484,  481,  484,  482,  485,  483,  485,  484,
        0,  483,  869,  485,  484,  482,    0,  483,  485,  871,
        0,  872,  874,  483,  487,  873,    0,  483,  487,  484,
      486,  484,  486,  485,  487,  485,  484,  486,  486,    0,
      485,  484,  486,  488,  487,  485,  491,  488,  491,  874,

      491,  487,  876,  488,    0,  487,  491,  486,    0,  486,
      877,  487,  878,  488,  486,  486,  491,  489,  489,  486,
      488,  487,  489,  491,  488,  491,  879,  491,  489,  876,
      488,  494,  492,  491,  492,  494,  492,  877,  489,  878,
      488,  494,  492,  491,  489,  489,  494,    0,  880,  489,
        0,  494,  492,  879,  881,  489,    0,  882,  494,  492,
        0,  492,  494,  492,  883,  489,  490,  493,  494,  492,
      490,  493,    0,  494,  490,  880,  490,  493,  494,  492,
      490,  881,  884,  493,  882,    0,  886,  493,    0,    0,
      490,  883,  495,  490,  493,  496,  495,  490,  493,  496,

      887,  490,  495,  490,  493,  496,  888,  490,  495,  884,
      493,  890,  495,  886,  493,  496,  497,  490,  891,  495,
      497,    0,  496,  495,  497,  892,  496,  887,    0,  495,
      497,  993,  496,  888,  498,  495,  498,    0,  890,  495,
      497,  498,  496,  497,  995,  891,  498,  497,  499,    0,
      499,  497,  892,    0,  499,  499,  998,  497,  993,    0,
      499,  498,  500,  498,  500,  999,  501,  497,  498,  500,
      501,  995,    0,  498,  500,  499,  501,  499,    0, 1000,
      502,  499,  499,  998,  502, 1001,  501,  499,    0,  500,
      502,  500,  999,  501,    0,  503,  500,  501, 1003,  503,

      502,  500,  505,  501,  505,  503, 1000,  502,  503,  505,
        0,  502, 1001,  501,  505,  503,    0,  502, 1005, 1006,
        0,  509,  503,  509,    0, 1003,  503,  502,  509,  505,
        0,  505,  503,  509, 1007,  503,  505,  507,  507,  507,
        0,  505,  503,  504,  507, 1005, 1006,  504,  509,  507,
      509,  504, 1008,    0, 1009,  509, 1011,  504, 1013,    0,
      509, 1007,  504, 1017,  507,  507,  507,  504,    0, 1019,
      504,  507, 1020, 1021,  504,  508,  507,    0,  504, 1008,
      508, 1009,  508, 1011,  504, 1013,  510,  508,  510,  504,
     1017, 1028,  508,  510,  504,  506, 1019, 1029,  510, 1020,

     1021, 1030,  508, 1033,  506,    0,  506,  508,  506,  508,
     1035,  506,    0,  510,  508,  510,  506,    0, 1028,  508,
      510,  511,  506, 1037, 1029,  510,    0,    0, 1030, 1039,
     1033,  506,  511,  506,  511,  506, 1040, 1035,  506,  511,
     1041, 1042, 1043,  506,  511,  512, 1045,  512,  511,    0,
     1037,    0,  512,  512,  513, 1046, 1039,  512,  513,  511,
      513,  511,    0, 1040,    0,  513,  511, 1041, 1042, 1043,
      513,  511,  512, 1045,  512,    0,  514,    0,  514,  512,
      512,  513, 1046,  514,  512,  513, 1047,  513,  514,  515,
        0,  515,  513,    0,  516,    0,  515,  513,  516, 1048,

        0,  515,  517,  514,  516,  514,  517,  518, 1050,    0,
      514,  518,  517, 1047,  516,  514,  515,  518,  515,    0,
      519,  516,  517,  515,  519,  516, 1048,  518,  515,  517,
      519,  516,  520,  517,  518, 1050,  520,    0,  518,  517,
      519,  516,  520,    0,  518,  520,  521,  519, 1052,  517,
      521,  519,  520,    0,  518,    0,  521,  519, 1054,  520,
     1055, 1056,    0,  520,  521, 1057,  521,  519, 1058,  520,
      522,    0,  520,  521,  522, 1052, 1063,  521,    0,  520,
      522,  522,  523,  521,  523, 1054, 1064, 1055, 1056,  523,
      522,  521, 1057,  521,  523, 1058, 1143,  522,  524, 1147,

      524,  522, 1148, 1063, 1151,  524,  524,  522,  522,  523,
      524,  523,  525, 1064,  525, 1152,  523,  522, 1156,  525,
      525,  523, 1158, 1143,  525,  524, 1147,  524,  526, 1148,
      526, 1151,  524,  524, 1159,  526,  528,  524,  528,  525,
      526,  525, 1152,  528,  528, 1156,  525,  525,  528, 1158,
     1162,  525,  527, 1163,  527,  526,  527,  526, 1164,  527,
     1165, 1159,  526,  528,  527,  528,  529,  526,  529, 1168,
      528,  528,  530,  529, 1169,  528,  530, 1162,  529,  527,
     1163,  527,  530,  527,  531, 1164,  527, 1165,  531, 1172,
     1174,  527,  530,  529,  531,  529, 1168, 1175, 1176,  530,

      529, 1169,    0,  530,  531,  529,  532,    0,  532,  530,
     1177,  531,    0,  532, 1178,  531, 1172, 1174,  532,  530,
      533,  531,  534, 1225, 1175, 1176,  534,  533, 1228,  533,
     1231,  531,  534,  532,  533,  532,    0, 1177, 1232,  533,
      532, 1178,  534, 1226, 1226,  532,    0,  533,  535,  534,
     1225, 1235,  535,  534,  533, 1228,  533, 1231,  535,  534,
      535,  533, 1236,  536, 1237, 1232,  533,  536,  535,  534,
     1241, 1242,  537,  536, 1243,  535,  537,    0, 1235,  535,
      537, 1226,    0,  536, 1245,  535,  537,  535,    0, 1236,
      536, 1237,    0, 1270,  536,  535,  537, 1241, 1242,  537,

      536, 1243,  538,  537,  538, 1271, 1274,  537, 1226,  538,
      536, 1245, 1279,  537,  538,  539, 1283,  539, 1296,  540,
     1270, 1299,  539,  537,  539,    0,    0,  539,  540,  538,
      540,  538, 1271, 1274,    0,  540,  538, 1248, 1248, 1279,
      540,  538,  539, 1283,  539, 1296,  540, 1302, 1299,  539,
        0,  539, 1295, 1295,  539,  540,    0,  540,  541, 1307,
      541,  678,  540,  678,  542,  541,  542,  540,  678,  541,
      541,  542,  542,  678, 1302, 1248,  542,  543,    0,  543,
        0, 1311, 1315,  543,  543,  541, 1307,  541,  678,  543,
      678,  542,  541,  542, 1295,  678,  541,  541,  542,  542,

      678,  544, 1248,  542,  543,  544,  543,  544, 1311, 1315,
      543,  543,  544,  545, 1317,  545,  543,  544,    0,  545,
      545, 1295,    0,    0,  673,  545,  673, 1319,  544, 1321,
      673,  673,  544, 1323,  544, 1325,  673,    0,    0,  544,
      545, 1317,  545,  674,  544,  674,  545,  545, 1327,  674,
      674,  673,  545,  673, 1319,  674, 1321,  673,  673,    0,
     1323,  675, 1325,  673,  676,  675,    0, 1329,  676,    0,
      674,  675,  674, 1331,  676, 1327,  674,  674, 1333,    0,
        0,  675,  674,  677,  676, 1301, 1301,  677,  675,    0,
        0,  676,  675,  677, 1329,  676,  677,  680,  675,  680,

     1331,  676,  679,  677,  680, 1333,  679,    0,  675,  680,
      677,  676,  679,    0,  677,    0,    0,    0,    0,    0,
      677,    0,  679,  677,  680,    0,  680, 1301,  682,  679,
      677,  680,  682,  679,    0,  681,  680,  681,  682,  679,
      683,  681,  681,    0,  683,    0,    0,  681,  682,  679,
      683,    0,    0,    0, 1301,  682,    0,    0,    0,  682,
      683,    0,  681,    0,  681,  682,    0,  683,  681,  681,
        0,  683,  684,    0,  681,  682,  684,  683,  685,    0,
      684,  686,  685,    0,    0,  686,  684,  683,  685,    0,
        0,  686,    0,    0,    0,    0,  684,    0,  685,  684,

        0,  686,  687,  684,    0,  685,  687,  684,  686,  685,
      687,    0,  686,  684,    0,  685,  687,    0,  686,    0,
        0,    0,    0,  684,    0,  685,  687,    0,  686,  687,
      688,  689,  690,  687,  688,  689,  690,  687,  688,    0,
      688,  689,  690,  687,  691,  690,    0,    0,  691,    0,
      688,  689,  690,  687,  691,    0,  694,  688,  689,  690,
      694,  688,  689,  690,  691,  688,  694,  688,  689,  690,
      692,  691,  690,    0,  692,  691,  694,  688,  689,  690,
      692,  691,  693,  694,  693,  692,    0,  694,    0,  693,
      692,  691,    0,  694,  693,  695,    0,  692,  696,  695,

        0,  692,  696,  694,    0,  695,    0,  692,  696,  693,
      695,  693,  692,    0,    0,  695,  693,  692,  696,    0,
        0,  693,  695,    0,    0,  696,  695,    0,    0,  696,
        0,  697,  695,  697,    0,  696,    0,  695,  697,  698,
      698,  698,  695,  697,    0,  696,  698,  699,    0,  699,
        0,  698,    0,    0,  699,    0,  699,    0,  697,  699,
      697,    0,    0,    0,    0,  697,  698,  698,  698,  701,
      697,    0,    0,  698,  699,    0,  699,  700,  698,  700,
      701,  699,  701,  699,  700,  700,  699,  701,  702,  700,
      702,    0,  701,    0,  702,  702,  701,    0,    0,    0,

      702,    0,    0,    0,  700,    0,  700,  701,    0,  701,
        0,  700,  700,    0,  701,  702,  700,  702,    0,  701,
      703,  702,  702,  705,  704,  705,    0,  702,  704,  703,
      705,  703,    0,    0,  704,  705,  703,    0,    0,    0,
        0,  703,    0,    0,  704,    0,    0,  703,    0,    0,
      705,  704,  705,    0,    0,  704,  703,  705,  703,    0,
        0,  704,  705,  703,    0,  706,    0,  706,  703,    0,
        0,  704,  706,  707,  708,  707,  708,  706,  708,    0,
      707,  708,    0,    0,    0,  707,  708,    0,    0,    0,
        0,    0,  706,    0,  706,    0,    0,    0,    0,  706,

      707,  708,  707,  708,  706,  708,    0,  707,  708,    0,
        0,    0,  707,  708,  709,  710,  709,  710,  709,    0,
        0,  709,  710,  711,  710,  711,  709,  710,    0,    0,
      711,  711,    0,    0,    0,  711,    0,    0,    0,    0,
        0,  709,  710,  709,  710,  709,    0,    0,  709,  710,
      711,  710,  711,  709,  710,  712,  713,  711,  711,    0,
      714,  715,  711,    0,  714,  715,  712,  713,  712,  713,
      714,  715,    0,  712,  713,    0,    0,    0,  712,  713,
      714,  715,  712,  713,    0,    0,    0,  714,  715,    0,
        0,  714,  715,  712,  713,  712,  713,  714,  715,  716,

      712,  713,    0,  716,    0,  712,  713,  714,  715,  716,
        0,  717,  719,    0,  716,  717,  719,    0,    0,  716,
      718,  717,  719,    0,  718,  720,  716,    0,  718,  720,
      716,  717,  719,    0,  718,  720,  716,    0,  717,  719,
        0,  716,  717,  719,  718,  720,  716,  718,  717,  719,
        0,  718,  720,    0,    0,  718,  720,    0,  717,  719,
      721,  718,  720,  723,  721,  722,    0,  723,  721,  722,
        0,  718,  720,  723,  721,  722,  722,    0,    0,    0,
        0,    0,    0,  723,  721,  722,  724,  721,  724,    0,
      723,  721,  722,  724,  723,  721,  722,  725,  724,  725,

      723,  721,  722,  722,  725,    0,    0,    0,    0,  725,
      723,  721,  722,  724,    0,  724,  726,  727,  726,    0,
      724,  727,    0,  726,  725,  724,  725,  727,  726,  728,
        0,  725,    0,  728,    0,    0,  725,  727,    0,  728,
        0,    0,  728,  726,  727,  726,    0,    0,  727,  728,
      726,  729,    0,  729,  727,  726,  728,    0,  729,    0,
      728,    0,    0,  729,  727,  730,  728,  730,    0,  728,
        0,  730,  730,    0,    0,    0,  728,  730,  729,    0,
      729,  731,    0,  731,  733,  729,  733,  731,  731,    0,
      729,  733,  730,  731,  730,  734,  733,  734,  730,  730,

        0,    0,  734,    0,  730,    0,    0,  734,  731,    0,
      731,  733,    0,  733,  731,  731,    0,    0,  733,    0,
      731,  732,  734,  733,  734,    0,  732,    0,  732,  734,
        0,    0,  732,  732,  734,  735,    0,  735,  732,  736,
        0,  736,  735,    0,    0,    0,  736,  735,  732,    0,
        0,  736,    0,  732,    0,  732,    0,    0,    0,  732,
      732,    0,  735,    0,  735,  732,  736,    0,  736,  735,
      737,    0,  737,  736,  735,    0,    0,  737,  736,  738,
        0,  738,  737,  739,    0,  739,  738,  738,    0,    0,
      739,  738,    0,    0,    0,  739,    0,  737,    0,  737,

        0,    0,    0,    0,  737,    0,  738,    0,  738,  737,
      739,    0,  739,  738,  738,    0,    0,  739,  738,  740,
      741,  740,  739,  742,  741,  743,  740,  742,    0,  743,
      741,  740,    0,  742,    0,  743,    0,    0,    0,    0,
      741,    0,    0,  742,    0,  743,  740,  741,  740,    0,
      742,  741,  743,  740,  742,    0,  743,  741,  740,    0,
      742,  744,  743,  744,    0,    0,    0,  741,  744,  744,
      742,  745,  743,  744,  746,  745,  746,  745,    0,  747,
      746,  746,  745,  747,    0,    0,  746,  745,  744,  747,
      744,    0,    0,    0,    0,  744,  744,    0,  745,  747,

      744,  746,  745,  746,  745,    0,  747,  746,  746,  745,
      747,  748,    0,  746,  745,  748,  747,  749,    0,  749,
      750,  748,    0,  749,  750,    0,  747,    0,    0,  749,
      750,  748,    0,    0,    0,    0,    0,    0,  748,  749,
      750,    0,  748,    0,  749,    0,  749,  750,  748,  751,
      749,  750,    0,  751,    0,    0,  749,  750,  748,  751,
        0,  752,  751,    0,    0,  752,  749,  750,    0,  751,
        0,  752,    0,  753,  752,    0,  751,  753,    0,    0,
      751,  752,    0,  753,    0,    0,  751,  754,  752,  751,
        0,  754,  752,  753,    0,  754,  751,  754,  752,  755,

      753,  752,    0,  755,  753,    0,    0,  754,  752,  755,
      753,  756,    0,  757,  754,  756,    0,  757,  754,  755,
      753,  756,  754,  757,  754,    0,  755,    0,    0,    0,
      755,  756,    0,  757,  754,  758,  755,  759,  756,  758,
      757,  759,  756,  758,  757,  759,  755,    0,  756,  758,
      757,  759,    0,  760,    0,    0,    0,  760,  756,  758,
      757,  759,  758,  760,  759,  761,  758,    0,  759,  761,
      758,    0,  759,  760,    0,  761,  758,    0,  759,  762,
      760,    0,    0,  762,  760,  761,  758,  762,  759,  762,
      760,  763,  761,  764,    0,  763,  761,  764,    0,  762,

      760,  763,  761,  764,  763,    0,  762,    0,  764,    0,
      762,  763,  761,  764,  762,    0,  762,  766,  763,    0,
      764,  766,  763,    0,  764,    0,  762,  766,  763,  765,
      764,  763,  765,    0,    0,  764,  765,  766,  763,    0,
      764,  767,  765,    0,  766,  767,    0,    0,  766,  767,
        0,  767,  765,  768,  766,  768,  765,    0,    0,  765,
      768,  767,    0,  765,  766,  768,    0,    0,  767,  765,
        0,  770,  767,    0,  769,  770,  767,    0,  767,  765,
      768,  770,  768,  769,    0,  769,    0,  768,  767,  771,
      769,  770,  768,  771,    0,  769,    0,    0,  770,  771,

        0,  769,  770,  772,    0,    0,    0,  772,  770,  771,
      769,  774,  769,  772,    0,  774,  771,  769,  770,    0,
      771,  774,  769,  772,    0,  773,  771,  773,    0,  775,
      772,  774,  773,  775,  772,    0,  771,  773,  774,  775,
      772,  776,  774,  777,    0,  776,    0,  777,  774,  775,
      772,  776,  773,  777,  773,    0,  775,    0,  774,  773,
      775,  776,    0,  777,  773,  778,  775,  779,  776,  778,
      777,  779,  776,    0,  777,  778,  775,  779,  776,  780,
      777,  780,    0,    0,    0,  778,  780,  779,  776,    0,
      777,  780,  778,  781,  779,  781,  778,    0,  779,    0,

      781,    0,  778,    0,  779,  781,  780,    0,  780,  782,
        0,  782,  778,  780,  779,    0,  782,    0,  780,  783,
      781,  782,  781,    0,    0,    0,    0,  781,  783,    0,
      783,    0,  781,    0,    0,  783,  782,    0,  782,    0,
      783,    0,  784,  782,  784,    0,  783,    0,  782,  784,
        0,  784,    0,    0,  784,  783,  785,  783,  785,    0,
        0,    0,  783,  785,    0,    0,    0,  783,  785,  784,
      786,  784,  786,  787,    0,    0,  784,  786,  784,  786,
        0,  784,  786,  785,  787,  785,  787,    0,    0,    0,
      785,  787,    0,    0,    0,  785,  787,  786,    0,  786,

      787,    0,    0,    0,  786,    0,  786,  789,  788,  786,
      788,  787,  789,  787,  789,  788,  788,    0,  787,  789,
      788,    0,    0,  787,  789,    0,    0,    0,  790,    0,
        0,    0,  790,    0,  789,  788,    0,  788,  790,  789,
        0,  789,  788,  788,    0,    0,  789,  788,  790,    0,
      791,  789,  792,  791,  791,  790,  792,    0,    0,  790,
      791,    0,  792,    0,  797,  790,  797,    0,    0,    0,
      791,  797,  792,    0,  793,  790,  797,  791,  793,  792,
      791,  791,  794,  792,  793,    0,  794,  791,    0,  792,
      793,  797,  794,  797,  793,    0,  795,  791,  797,  792,

      795,  793,  794,  797,  796,  793,  795,    0,  796,  794,
        0,  793,    0,  794,  796,    0,  795,  793,  896,  794,
      896,  793,    0,  795,  796,  896,    0,  795,    0,  794,
      896,  796,  897,  795,  897,  796,    0,    0,    0,  897,
        0,  796,    0,  795,  897,  896,  898,  896,  898,    0,
        0,  796,  896,  898,    0,    0,    0,  896,  898,  897,
      898,  897,  899,    0,  899,    0,  897,    0,  900,  899,
        0,  897,  900,  898,  899,  898,    0,    0,  900,    0,
      898,    0,  901,    0,    0,  898,  901,  898,  900,  899,
      902,  899,  901,    0,  902,  900,  899,    0,    0,  900,

      902,  899,  901,    0,    0,  900,    0,    0,  903,  901,
      902,    0,  903,  901,    0,  900,  904,  902,  903,  901,
      904,  902,    0,  903,    0,    0,  904,  902,  903,  901,
      905,    0,    0,    0,  905,  903,  904,  902,  905,  903,
        0,  906,  906,  904,  905,  903,  906,  904,    0,    0,
      903,    0,  906,  904,  905,  903,    0,  905,  907,    0,
      907,  905,  906,  904,  907,  905,    0,    0,  906,  906,
      907,  905,    0,  906,    0,    0,  908,    0,  908,  906,
      907,  905,    0,  908,    0,  907,  910,  907,  908,  906,
      910,  907,  909,    0,  909,    0,  910,  907,  911,  909,

      909,    0,  911,  908,  909,  908,  910,  907,  911,    0,
      908,    0,  912,  910,    0,  908,  912,  910,  911,  909,
      914,  909,  912,  910,  914,  911,  909,  909,    0,  911,
      914,  909,  912,  910,  913,  911,  913,    0,  915,  912,
      914,  913,  915,  912,    0,  911,  913,  914,  915,  912,
        0,  914,  916,    0,    0,    0,  916,  914,  915,  912,
      916,  913,    0,  913,    0,  915,  916,  914,  913,  915,
      917,    0,  917,  913,  918,  915,  916,  917,  918,  916,
        0,    0,  917,  916,  918,  915,  919,  916,  920,    0,
      919,    0,  920,  916,  918,    0,  919,  917,  920,  917,

        0,  918,    0,  916,  917,  918,  919,    0,  920,  917,
      923,  918,  921,  919,  923,  920,  921,  919,    0,  920,
      923,  918,  921,  919,  922,  920,  922,  921,    0,    0,
      923,  922,  921,  919,    0,  920,  922,  923,    0,  921,
      924,  923,    0,  921,  924,    0,    0,  923,    0,  921,
      924,  922,    0,  922,  921,    0,    0,  923,  922,  921,
      924,    0,  928,  922,  925,  926,  928,  924,  925,  926,
        0,  924,  928,    0,  925,  926,  927,  924,  927,  925,
      926,    0,  928,  927,  925,  926,    0,  924,  927,  928,
        0,  925,  926,  928,    0,  925,  926,    0,    0,  928,

        0,  925,  926,  927,    0,  927,  925,  926,    0,  928,
      927,  925,  926,  930,  929,  927,  929,  930,  931,    0,
      929,    0,  931,  930,    0,    0,  929,    0,  931,    0,
        0,    0,    0,  930,    0,    0,  929,    0,  931,    0,
      930,  929,    0,  929,  930,  931,    0,  929,  932,  931,
      930,    0,  932,  929,    0,  931,    0,  933,  932,    0,
      930,  933,  934,  929,  934,  931,  932,  933,  932,  934,
        0,  935,  933,  935,  934,  932,    0,  933,  935,  932,
        0,    0,    0,  935,  933,  932,    0,    0,  933,  934,
        0,  934,    0,  932,  933,  932,  934,    0,  935,  933,

      935,  934,  936,    0,  933,  935,  937,  936,  937,  936,
      935,    0,    0,  937,  936,  938,    0,  938,  937,  936,
        0,    0,  938,    0,    0,    0,    0,  938,    0,  936,
        0,    0,    0,  937,  936,  937,  936,    0,    0,    0,
      937,  936,  938,    0,  938,  937,  936,    0,  939,  938,
      939,  940,    0,  940,  938,  939,  939,  941,  940,  941,
      939,    0,    0,  940,  941,    0,    0,    0,    0,  941,
        0,    0,    0,    0,    0,  939,    0,  939,  940,    0,
      940,    0,  939,  939,  941,  940,  941,  939,    0,    0,
      940,  941,  942,  943,  942,    0,  941,  943,    0,  942,

      942,    0,    0,  943,  942,  944,    0,  944,    0,    0,
        0,    0,  944,  943,    0,  944,  945,  944,  945,  942,
      943,  942,    0,  945,  943,    0,  942,  942,  945,    0,
      943,  942,  944,    0,  944,    0,    0,    0,    0,  944,
      943,    0,  944,  945,  944,  945,  946,  947,  946,  947,
      945,    0,  948,  946,  947,  945,    0,    0,  946,  947,
      948,    0,  948,    0,    0,    0,    0,  948,    0,    0,
        0,    0,  948,  946,  947,  946,  947,    0,    0,  948,
      946,  947,    0,    0,    0,  946,  947,  948,  949,  948,
      949,  950,  951,  950,  948,  949,  951,    0,  950,  948,

      949,    0,  951,  950,  952,    0,  952,    0,    0,    0,
        0,  952,  951,    0,    0,  949,  952,  949,  950,  951,
      950,    0,  949,  951,  953,  950,    0,  949,    0,  951,
      950,  952,    0,  952,    0,  953,    0,  953,  952,  951,
        0,    0,  953,  952,    0,    0,  954,  953,  954,    0,
        0,  953,    0,  954,  954,  955,    0,    0,  954,  955,
        0,  955,  953,    0,  953,    0,  955,    0,    0,  953,
        0,  955,    0,  954,  953,  954,    0,    0,    0,    0,
      954,  954,  955,    0,    0,  954,  955,  956,  955,  956,
      957,    0,  957,  955,  956,  956,    0,  957,  955,  956,

      959,  958,  957,  958,  959,    0,    0,    0,  958,    0,
      959,    0,    0,  958,  956,    0,  956,  957,    0,  957,
      959,  956,  956,    0,  957,    0,  956,  959,  958,  957,
      958,  959,    0,    0,  960,  958,    0,  959,  960,    0,
      958,  961,  961,    0,  960,    0,  961,  959,    0,  960,
        0,    0,  961,    0,  960,    0,    0,    0,    0,    0,
        0,  960,  961,    0,    0,  960,    0,    0,  961,  961,
      962,  960,    0,  961,  962,    0,  960,    0,  963,  961,
      962,  960,  963,  962,    0,    0,    0,    0,  963,  961,
      962,  963,  964,    0,    0,    0,  964,  962,  963,    0,

        0,  962,  964,    0,  965,  963,    0,  962,  965,  963,
      962,    0,  964,    0,  965,  963,  966,  962,  963,  964,
      966,    0,    0,  964,  965,  963,  966,    0,  967,  964,
        0,  965,  967,    0,    0,  965,  966,    0,  967,  964,
        0,  965,  968,  966,    0,    0,  968,  966,  967,    0,
      968,  965,    0,  966,  969,  967,  968,    0,  969,  967,
      972,    0,  969,  966,  972,  967,  968,    0,  969,  968,
      972,  970,  970,  968,    0,  967,  970,  968,  969,    0,
      972,  969,  970,  968,  973,  969,  971,  972,  973,  969,
      971,  972,  970,  968,  973,  969,  971,  972,  970,  970,

        0,  971,    0,  970,  973,  969,  971,  972,    0,  970,
        0,  973,  975,  971,    0,  973,  975,  971,    0,  970,
      975,  973,    0,  971,  974,  974,  975,    0,  971,  974,
      976,  973,  976,  971,    0,  974,  975,  976,    0,  975,
        0,    0,  976,  975,    0,  974,    0,  975,  977,    0,
      977,  974,  974,  975,  977,  977,  974,  976,    0,  976,
      977,    0,  974,  975,  976,    0,  978,    0,  978,  976,
        0,    0,  974,  978,  978,  977,    0,  977,  978,  979,
        0,  977,  977,    0,    0,  980,    0,  977,    0,    0,
      979,    0,  979,  978,    0,  978,  980,  979,  980,    0,

      978,  978,  979,  980,    0,  978,  979,    0,  980,  981,
        0,  981,  980,    0,    0,    0,  981,  979,    0,  979,
      982,  981,  982,  980,  979,  980,    0,  982,    0,  979,
      980,    0,  982,    0,    0,  980,  981,    0,  981,    0,
      983,  984,  984,  981,  983,    0,  984,  982,  981,  982,
      983,    0,  984,    0,  982,    0,    0,    0,    0,  982,
      983,    0,  984,    0,    0,    0,  985,  983,  984,  984,
      985,  983,    0,  984,  986,    0,  985,  983,  986,  984,
        0,    0,    0,  987,  986,  987,  985,  983,    0,  984,
      987,  988,    0,  985,  986,  987,    0,  985,    0,    0,

        0,  986,  988,  985,  988,  986,    0,    0,    0,  988,
      987,  986,  987,  985,  988,  989,    0,  987,  988,    0,
        0,  986,  987,  990,    0,  990,  989,    0,  989,  988,
      990,  988,  991,  989,  991,  990,  988,    0,  989,  991,
        0,  988,  989,    0,  991,    0,    0,    0,    0,    0,
      990,    0,  990,  989, 1066,  989,    0,  990, 1066,  991,
      989,  991,  990, 1067, 1066,  989,  991, 1067, 1068,    0,
     1068,  991,    0, 1067, 1066, 1068,    0, 1069,    0, 1069,
     1068, 1066,    0, 1067, 1069, 1066, 1070,    0, 1070, 1069,
     1067, 1066,    0, 1070, 1067, 1068,    0, 1068, 1070,    0,

     1067, 1066, 1068,    0, 1069,    0, 1069, 1068,    0,    0,
     1067, 1069, 1071, 1070, 1071, 1070, 1069, 1072, 1073, 1071,
     1070, 1072, 1073,    0, 1071, 1070,    0, 1072, 1073,    0,
        0,    0,    0, 1073,    0,    0,    0, 1072, 1073, 1071,
     1074, 1071, 1074,    0, 1072, 1073, 1071, 1074, 1072, 1073,
        0, 1071, 1074,    0, 1072, 1073, 1075,    0, 1075, 1076,
     1073, 1076,    0, 1075, 1072, 1073, 1076, 1074, 1075, 1074,
     1077, 1076, 1077,    0, 1074,    0,    0, 1077,    0, 1074,
        0,    0, 1077, 1075,    0, 1075, 1076,    0, 1076,    0,
     1075,    0,    0, 1076, 1078, 1075, 1078, 1077, 1076, 1077,

        0, 1078, 1078,    0, 1077,    0, 1078,    0,    0, 1077,
     1079, 1079, 1079,    0,    0, 1080,    0, 1079, 1081,    0,
     1081, 1078, 1079, 1078, 1080, 1081, 1080,    0, 1078, 1078,
     1081, 1080,    0, 1078,    0,    0, 1080, 1079, 1079, 1079,
        0,    0, 1080,    0, 1079, 1081,    0, 1081, 1082, 1079,
     1082, 1080, 1081, 1080,    0, 1082, 1082, 1081, 1080, 1083,
     1082, 1083, 1084, 1080,    0,    0, 1083,    0,    0,    0,
        0, 1083, 1084,    0, 1084, 1082,    0, 1082, 1085, 1084,
     1085,    0, 1082, 1082, 1084, 1085, 1083, 1082, 1083, 1084,
     1085,    0,    0, 1083,    0,    0,    0,    0, 1083, 1084,

        0, 1084,    0,    0, 1086, 1085, 1084, 1085,    0,    0,
        0, 1084, 1085, 1086, 1087, 1086, 1087, 1085,    0,    0,
     1086, 1087, 1088,    0, 1088, 1086, 1087,    0,    0, 1088,
        0, 1086,    0,    0, 1088,    0,    0,    0,    0,    0,
     1086, 1087, 1086, 1087,    0,    0,    0, 1086, 1087, 1088,
     1090, 1088, 1086, 1087, 1090, 1089, 1088, 1089,    0, 1091,
     1090, 1088, 1089, 1091, 1092,    0, 1092, 1089, 1094, 1091,
     1090, 1092, 1094,    0,    0,    0, 1092, 1090, 1094, 1091,
        0, 1090, 1089,    0, 1089,    0, 1091, 1090, 1094, 1089,
     1091, 1092,    0, 1092, 1089, 1094, 1091, 1090, 1092, 1094,

     1093,    0, 1093, 1092,    0, 1094, 1091, 1093, 1093,    0,
     1095,    0, 1093, 1096, 1095, 1094,    0, 1096, 1097,    0,
     1095,    0, 1097, 1096,    0,    0,    0, 1093, 1097, 1093,
     1095,    0, 1098, 1096, 1093, 1093, 1098, 1095, 1097, 1093,
     1096, 1095, 1098,    0, 1096, 1097,    0, 1095,    0, 1097,
     1096,    0, 1098,    0, 1099, 1097,    0, 1095, 1099, 1098,
     1096,    0, 1100, 1098, 1099, 1097, 1100, 1101,    0, 1098,
        0, 1101, 1100,    0, 1099,    0,    0, 1101,    0, 1098,
     1101, 1099, 1100,    0,    0, 1099, 1102, 1101,    0, 1100,
     1102, 1099,    0, 1100, 1101,    0, 1102,    0, 1101, 1100,

        0, 1099,    0,    0, 1101,    0, 1102, 1101, 1103, 1100,
        0, 1104, 1103, 1102, 1101, 1104, 1103, 1102,    0,    0,
     1105, 1104, 1103, 1102, 1105,    0,    0,    0,    0,    0,
     1105, 1104, 1103, 1102, 1106, 1103, 1106,    0, 1104, 1103,
     1105, 1106, 1104, 1103,    0,    0, 1106, 1105, 1104, 1103,
        0, 1105,    0, 1107,    0, 1107,    0, 1105, 1104, 1103,
     1107, 1106, 1108, 1106, 1108, 1107,    0, 1105, 1106, 1108,
        0,    0,    0, 1106, 1108,    0, 1109,    0, 1109,    0,
     1107,    0, 1107, 1109, 1110,    0,    0, 1107, 1109, 1108,
        0, 1108, 1107,    0,    0, 1110, 1108, 1110,    0,    0,

        0, 1108, 1110, 1109,    0, 1109, 1111, 1110, 1111,    0,
     1109, 1110,    0, 1111,    0, 1109,    0,    0, 1111, 1112,
        0, 1112, 1110,    0, 1110,    0, 1112, 1112,    0, 1110,
        0, 1112, 1113, 1111, 1110, 1111, 1113, 1114,    0,    0,
     1111, 1114, 1113,    0,    0, 1111, 1112, 1114, 1112,    0,
        0, 1115, 1113, 1112, 1112, 1115, 1116, 1114, 1112, 1113,
     1116, 1115,    0, 1113, 1114,    0, 1116,    0, 1114, 1113,
        0, 1115,    0,    0, 1114,    0, 1116,    0, 1115, 1113,
        0, 1117, 1115, 1116, 1114, 1117,    0, 1116, 1115,    0,
        0, 1117,    0, 1116, 1118,    0, 1118,    0, 1115,    0,

     1118, 1117,    0, 1116,    0,    0, 1118, 1119, 1117, 1119,
        0,    0, 1117, 1119,    0,    0, 1118,    0, 1117, 1119,
        0, 1118,    0, 1118,    0,    0,    0, 1118, 1117, 1119,
     1120,    0, 1120, 1118, 1119,    0, 1119, 1120,    0,    0,
     1119,    0, 1120, 1118,    0,    0, 1119,    0, 1121,    0,
     1121, 1122,    0, 1122,    0, 1121, 1119, 1120, 1122, 1120,
     1121,    0,    0, 1122, 1120,    0,    0,    0,    0, 1120,
        0,    0, 1123,    0, 1123, 1121,    0, 1121, 1122, 1123,
     1122, 1124, 1121, 1124, 1123, 1122,    0, 1121, 1124,    0,
     1122,    0,    0, 1124,    0, 1125,    0, 1125,    0, 1123,

        0, 1123, 1125,    0,    0,    0, 1123, 1125, 1124,    0,
     1124, 1123, 1127,    0, 1126, 1124, 1126,    0,    0,    0,
     1124, 1126, 1125, 1127, 1125, 1127, 1126,    0,    0, 1125,
     1127, 1128,    0,    0, 1125, 1127,    0,    0,    0, 1127,
        0, 1126, 1128, 1126, 1128,    0,    0,    0, 1126, 1128,
     1127,    0, 1127, 1126, 1128,    0, 1129, 1127, 1128,    0,
        0,    0, 1127,    0,    0, 1129, 1130, 1129, 1130, 1128,
        0, 1128, 1129, 1130, 1130,    0, 1128, 1129, 1130,    0,
        0, 1128,    0, 1129,    0,    0,    0,    0, 1131,    0,
        0,    0, 1129, 1130, 1129, 1130, 1131,    0, 1131, 1129,

     1130, 1130,    0, 1131, 1129, 1130,    0, 1132, 1131, 1132,
     1133,    0, 1133,    0, 1132, 1131,    0, 1133,    0, 1132,
        0,    0, 1133, 1131,    0, 1131, 1134,    0, 1134,    0,
     1131,    0,    0, 1134, 1132, 1131, 1132, 1133, 1134, 1133,
     1135, 1132, 1135,    0, 1133,    0, 1132, 1135,    0, 1133,
        0,    0, 1135, 1134,    0, 1134, 1136,    0, 1136, 1137,
     1134, 1137, 1136, 1136,    0, 1134, 1137, 1135, 1136, 1135,
     1182, 1137, 1182,    0, 1135,    0,    0, 1182,    0, 1135,
        0,    0, 1182, 1136,    0, 1136, 1137,    0, 1137, 1136,
     1136,    0,    0, 1137, 1183, 1136, 1183, 1182, 1137, 1182,

     1184, 1183, 1184, 1185, 1182, 1185, 1183, 1184,    0, 1182,
     1185,    0, 1184,    0,    0, 1185, 1186,    0,    0,    0,
     1186, 1183,    0, 1183,    0,    0, 1186, 1184, 1183, 1184,
     1185, 1187, 1185, 1183, 1184, 1187, 1186, 1185,    0, 1184,
     1188, 1187, 1185, 1186, 1188, 1189, 1189, 1186,    0,    0,
     1188, 1187,    0, 1186,    0, 1190,    0,    0, 1187, 1190,
     1188,    0, 1187, 1186,    0, 1190,    0, 1188, 1187,    0,
     1189, 1188,    0,    0, 1189, 1190,    0, 1188, 1187,    0,
     1189, 1191, 1190,    0, 1192, 1191, 1190, 1188, 1192, 1191,
     1189,    0, 1190,    0, 1192, 1191,    0, 1189,    0, 1193,

        0, 1189, 1190, 1193, 1192, 1191,    0, 1189, 1191, 1193,
        0, 1192, 1191,    0, 1194, 1192, 1191, 1189, 1194, 1193,
        0, 1192, 1191, 1195, 1194,    0, 1193, 1195,    0,    0,
     1193, 1192, 1191, 1195, 1194,    0, 1193,    0, 1195,    0,
        0, 1194,    0, 1195,    0, 1194, 1193,    0, 1196, 1197,
     1195, 1194, 1196, 1197, 1195,    0,    0,    0, 1196, 1197,
     1195, 1194, 1198,    0,    0, 1195, 1198,    0, 1196, 1197,
     1195, 1199, 1198, 1199,    0, 1196, 1197,    0, 1199, 1196,
     1197,    0, 1198, 1199,    0, 1196, 1197,    0,    0, 1198,
     1200,    0, 1200, 1198,    0, 1196, 1197, 1200, 1199, 1198,

     1199,    0, 1200,    0, 1201, 1199,    0,    0,    0, 1198,
     1199,    0,    0, 1201, 1202, 1201, 1202, 1200,    0, 1200,
     1201, 1202,    0,    0, 1200, 1201, 1202,    0,    0, 1200,
        0, 1201, 1203,    0, 1203,    0,    0,    0,    0, 1203,
     1201, 1202, 1201, 1202, 1203,    0,    0, 1201, 1202,    0,
        0,    0, 1201, 1202,    0, 1204,    0, 1204, 1205, 1203,
     1205, 1203, 1204,    0, 1205, 1205, 1203, 1204, 1206,    0,
     1205, 1203, 1206, 1207, 1208,    0, 1208, 1207, 1206,    0,
        0, 1208, 1204, 1207, 1204, 1205, 1208, 1205, 1206, 1204,
        0, 1205, 1205, 1207, 1204, 1206,    0, 1205,    0, 1206,

     1207, 1208,    0, 1208, 1207, 1206,    0, 1209, 1208, 1209,
     1207,    0,    0, 1208, 1209, 1206, 1210,    0, 1210, 1209,
     1207,    0,    0, 1210,    0, 1211,    0, 1211, 1210,    0,
        0,    0, 1211, 1211, 1209,    0, 1209, 1211,    0,    0,
        0, 1209,    0, 1210,    0, 1210, 1209,    0, 1212, 1212,
     1210, 1212, 1211,    0, 1211, 1210, 1212,    0,    0, 1211,
     1211, 1212,    0,    0, 1211, 1213,    0, 1213,    0,    0,
        0,    0, 1213,    0,    0, 1212, 1212, 1213, 1212, 1214,
        0, 1214,    0, 1212,    0,    0, 1214,    0, 1212,    0,
        0, 1214, 1213, 1215, 1213, 1215,    0,    0,    0, 1213,

     1215, 1215,    0,    0, 1213, 1215, 1214, 1216, 1214, 1216,
        0,    0,    0, 1214, 1216,    0,    0,    0, 1214, 1216,
     1215,    0, 1215, 1217,    0, 1217,    0, 1215, 1215, 1217,
     1217,    0, 1215,    0, 1216, 1217, 1216, 1218, 1218, 1218,
        0, 1216,    0,    0, 1218,    0, 1216,    0,    0, 1218,
     1217, 1219, 1217, 1219,    0,    0, 1217, 1217, 1219, 1219,
        0,    0, 1217, 1219, 1218, 1218, 1218,    0,    0, 1220,
        0, 1218,    0, 1220,    0,    0, 1218, 1221, 1219, 1220,
     1219, 1221,    0,    0,    0, 1219, 1219, 1221,    0, 1220,
     1219, 1222,    0,    0,    0, 1222, 1220, 1221,    0, 1223,

     1220, 1222,    0, 1223, 1221,    0, 1220,    0, 1221, 1223,
        0, 1222,    0, 1249, 1221,    0, 1220, 1249, 1222, 1223,
        0, 1247, 1222, 1249, 1221, 1247, 1223,    0, 1222,    0,
     1223, 1247,    0, 1249, 1247,    0, 1223,    0, 1222, 1250,
     1249, 1247,    0, 1250, 1249,    0, 1223, 1251, 1247, 1250,
     1249, 1251, 1247,    0, 1250,    0,    0, 1251, 1247, 1250,
     1249, 1247,    0,    0,    0, 1252, 1250, 1251, 1247, 1252,
     1250,    0,    0, 1254, 1251, 1252, 1250, 1254, 1251,    0,
        0, 1250,    0, 1254, 1251, 1252, 1250, 1253, 1254, 1253,
        0, 1253, 1252, 1254, 1251,    0, 1252, 1253,    0, 1255,

     1254, 1256, 1252, 1255, 1254, 1256,    0, 1253,    0, 1255,
     1254, 1256, 1252,    0, 1253, 1254, 1253,    0, 1253, 1255,
     1254, 1256,    0,    0, 1253,    0, 1255, 1257, 1256,    0,
     1255, 1257, 1256,    0, 1253,    0, 1255, 1257, 1256,    0,
     1257,    0,    0, 1258, 1259, 1258, 1255, 1257, 1256, 1259,
     1258, 1259,    0,    0, 1257, 1258, 1259,    0, 1257,    0,
        0, 1259,    0,    0, 1257,    0,    0, 1257,    0,    0,
     1258, 1259, 1258, 1260, 1257, 1260, 1259, 1258, 1259, 1261,
     1260, 1261, 1258, 1259,    0, 1260, 1261, 1262, 1259, 1262,
        0, 1261,    0,    0, 1262,    0,    0,    0,    0, 1262,

     1260,    0, 1260,    0,    0, 1263, 1261, 1260, 1261, 1263,
        0,    0, 1260, 1261, 1262, 1263, 1262,    0, 1261, 1264,
        0, 1262,    0, 1264, 1265, 1263, 1262, 1266, 1265, 1264,
     1264, 1266, 1263,    0, 1265,    0, 1263, 1266,    0, 1264,
        0,    0, 1263,    0, 1265,    0, 1264, 1266, 1267, 1267,
     1264, 1265, 1263, 1267, 1266, 1265, 1264, 1264, 1266, 1267,
        0, 1265, 1282, 1282, 1266,    0, 1264,    0, 1284, 1267,
        0, 1265, 1284, 1285, 1266, 1267, 1267, 1285, 1284,    0,
     1267,    0, 1287, 1285, 1287,    0, 1267, 1282, 1284, 1287,
        0, 1282,    0, 1285, 1287, 1284, 1267, 1282,    0, 1284,

     1285, 1288, 1286, 1288, 1285, 1284, 1286, 1282, 1288, 1287,
     1285, 1287, 1286, 1288, 1282, 1284, 1287,    0, 1282,    0,
     1285, 1287, 1286,    0, 1282, 1289,    0, 1289, 1288, 1286,
     1288,    0, 1289, 1286, 1282, 1288, 1290, 1289, 1290, 1286,
     1288,    0,    0, 1290, 1291,    0, 1291,    0, 1290, 1286,
        0, 1291, 1289,    0, 1289,    0, 1291, 1292,    0, 1289,
        0, 1292, 1293, 1290, 1289, 1290, 1293, 1292,    0,    0,
     1290, 1291, 1293, 1291,    0, 1290, 1303, 1292, 1291,    0,
     1303, 1304, 1293, 1291, 1292, 1304, 1303,    0, 1292, 1293,
     1305, 1304, 1305, 1293, 1292,    0, 1303, 1305, 1313, 1293,

     1313, 1304, 1305, 1303, 1292, 1313,    0, 1303, 1304, 1293,
     1313,    0, 1304, 1303,    0,    0,    0, 1305, 1304, 1305,
        0,    0,    0, 1303, 1305, 1313,    0, 1313, 1304, 1305,
        0,    0, 1313,    0,    0,    0,    0, 1313, 1345, 1345,
     1345, 1345, 1345, 1346, 1346, 1346, 1346, 1346, 1347,    0,
        0, 1347, 1347, 1349, 1349, 1349,    0, 1349, 1350,    0,
     1350, 1350, 1350, 1351,    0, 1351, 1351, 1351, 1352,    0,
     1352, 1352, 1352, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,

     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
/*
	lexer
*/

/***************************
 ** Section 1: Definitions
 ***************************/
#line 10 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
#include <sql-parser.h>
#pragma hdrstop
//#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
//#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2993 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* @sobolev
%option header-file="flex_lexer.h"
%option outfile="flex_lexer.cpp"
*/
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 3011 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.cpp"

#define INITIAL 0
#define incl 1
#define singlequotedstring 2
#define COMMENT 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
	#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t {
    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;
    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE * yyin_r;
    FILE * yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char * yy_c_buf_p;
    int    yy_init;
    int    yy_start;
    int    yy_did_buffer_switch_on_eof;
    int    yy_start_stack_ptr;
    int    yy_start_stack_depth;
    int  * yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char * yy_last_accepting_cpos;
    int    yylineno_r;
    int    yy_flex_debug_r;

    char * yytext_r;
    int    yy_more_flag;
    int    yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals(yyscan_t yyscanner);

    // This must go here because YYSTYPE and YYLTYPE are included from bison output in section 1.
    #define yylval yyg->yylval_r
    
    #define yylloc yyg->yylloc_r
    
int yylex_init(yyscan_t * scanner);

int yylex_init_extra(YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

// Accessor methods to globals. These are made visible to non-reentrant scanners for convenience.

int yylex_destroy(yyscan_t yyscanner);

int yyget_debug(yyscan_t yyscanner);

void yyset_debug(int debug_flag , yyscan_t yyscanner);

YY_EXTRA_TYPE yyget_extra(yyscan_t yyscanner);

void yyset_extra(YY_EXTRA_TYPE user_defined , yyscan_t yyscanner);

FILE * yyget_in(yyscan_t yyscanner);

void yyset_in(FILE * _in_str , yyscan_t yyscanner);

FILE * yyget_out(yyscan_t yyscanner);

void yyset_out(FILE * _out_str , yyscan_t yyscanner);

int yyget_leng(yyscan_t yyscanner);

char * yyget_text(yyscan_t yyscanner);

int yyget_lineno(yyscan_t yyscanner);

void yyset_lineno(int _line_number , yyscan_t yyscanner);

int yyget_column(yyscan_t yyscanner);

void yyset_column(int _column_no , yyscan_t yyscanner);

YYSTYPE * yyget_lval(yyscan_t yyscanner);

void yyset_lval(YYSTYPE * yylval_param , yyscan_t yyscanner);

       YYLTYPE * yyget_lloc(yyscan_t yyscanner);
    
        void yyset_lloc(YYLTYPE * yylloc_param , yyscan_t yyscanner);
    
//
// Macros after this point can all be overridden by user definitions in section 1.
//

#ifndef YY_SKIP_YYWRAP
	#ifdef __cplusplus
		extern "C" int yywrap ( yyscan_t yyscanner );
	#else
		extern int yywrap ( yyscan_t yyscanner );
	#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner);
#else
static int input(yyscan_t yyscanner);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
	#ifdef __ia64__
	// On IA-64, the buffer size is 16k, not 8k
		#define YY_READ_BUF_SIZE 16384
	#else
		#define YY_READ_BUF_SIZE 8192
	#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if(fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if(YY_CURRENT_BUFFER_LVALUE->yy_is_interactive) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if(c == '\n') \
			buf[n++] = (char) c; \
		if(c == EOF && ferror(yyin)) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
	#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
	#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng have been set up. */
#ifndef YY_USER_ACTION
	#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
	#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work. */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if(!yyg->yy_init) {
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if(!yyg->yy_start)
			yyg->yy_start = 1;	/* first start state */

		if(!yyin)
			yyin = stdin;

		if(!yyout)
			yyout = stdout;

		if(!YY_CURRENT_BUFFER) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE = yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 58 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"


#line 3289 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.cpp"

	while(/*CONSTCOND*/1) { /* loops until end-of-file is reached */
		yy_cp = yyg->yy_c_buf_p;
		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;
		/* yy_bp points to the position in yy_ch_buf of the start of the current run. */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if(yy_accept[yy_current_state])
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while(yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
				{
				yy_current_state = (int)yy_def[yy_current_state];
				if(yy_current_state >= 1345)
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1344 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch(yy_act) { /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 60 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 61 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 62 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 64 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 66 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 97 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 100 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 101 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 102 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 118 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 157 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 161 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 162 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 163 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 164 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 165 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 166 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 167 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 168 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 169 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 170 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 171 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 172 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 173 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 174 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(OVER)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 193 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 194 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 195 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 196 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 206 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 207 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 208 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 209 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 210 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 211 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 212 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 213 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 214 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 215 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 216 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 217 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 218 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 219 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 220 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 221 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 222 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 223 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 224 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 225 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 226 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 227 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(BINARY) // @sobolev
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 228 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(BINARY) // @sobolev
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 230 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CURRENT_ROW)
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 231 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 170:
YY_RULE_SETUP
#line 234 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 235 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 236 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 237 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 238 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 239 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 241 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 177:
#line 244 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
case 178:
YY_RULE_SETUP
#line 244 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 179:
YY_RULE_SETUP
#line 254 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{
	yylval->ival = LLONG_MIN;
	return SQL_INTVAL;
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 259 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{
	errno = 0;
	yylval->ival = strtoll(yytext, nullptr, 0);
	if(errno) {
		slfprintf_stderr("[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
		return 0;
	}
	return SQL_INTVAL;
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 269 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 275 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{
	yylval->sval = _strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 280 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 281 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 282 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 283 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ BEGIN 0; yylval->sval = _strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 284 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ slfprintf_stderr("[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 286 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ slfprintf_stderr("[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 288 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
ECHO;
	YY_BREAK
#line 4309 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;
		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET
		if(YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test in input().
		 */
		if(yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] ) { /* This was really a NUL. */
			yy_state_type yy_next_state;
			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;
			yy_current_state = yy_get_previous_state( yyscanner );
			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans(yy_current_state , yyscanner);
			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
			if(yy_next_state ) {
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else {
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch(yy_get_next_buffer( yyscanner)) {
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;
				if(yywrap( yyscanner ) ) {
					/* Note: because we've taken care in yy_get_next_buffer() to have set up
					 * yytext, we can now set up yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to call the scanner after we return the
					 * YY_NULL, it'll still work - another YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;
					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}
				else {
					if(! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;
				yy_current_state = yy_get_previous_state( yyscanner );
				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;
			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];
				yy_current_state = yy_get_previous_state( yyscanner );
				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR("fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char * dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char * source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;
	if(yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed" );

	if(YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 ) { /* Don't try to fill the buffer, so this is an EOF. */
		if(yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 ) {
			/* We matched a single character, the EOB, so treat this as a final EOF. */
			return EOB_ACT_END_OF_FILE;
			}
		else {
			/* We matched some text prior to the EOB, first process it. */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for(i = 0; i < number_to_move; ++i)
		*(dest++) = *(source++);

	if(YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF, just force an EOF */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else {
			int num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while(num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset = (int)(yyg->yy_c_buf_p - b->yy_ch_buf);
			if(b->yy_is_our_buffer ) {
				int new_size = b->yy_buf_size * 2;
				if(new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;
				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf, (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if(!b->yy_ch_buf)
				YY_FATAL_ERROR("fatal error - scanner input buffer overflow" );
			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

			}

		if(num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]), yyg->yy_n_chars, num_to_read );
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if(yyg->yy_n_chars == 0 ) {
		if(number_to_move == YY_MORE_ADJ ) {
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}
		else {
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *)yyrealloc((void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t)new_size , yyscanner);
		if(!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
			YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for(yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp ) {
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if(yy_accept[yy_current_state])
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while(yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
			{
			yy_current_state = (int)yy_def[yy_current_state];
			if(yy_current_state >= 1345)
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if(yy_accept[yy_current_state])
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while(yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
		{
		yy_current_state = (int)yy_def[yy_current_state];
		if(yy_current_state >= 1345)
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1344);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput(yyscan_t yyscanner)
#else
    static int input(yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if(*yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR) {
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if(yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars])
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else { /* need more input */
			int offset = (int)(yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;
			switch(yy_get_next_buffer( yyscanner)) {
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);
					/*FALLTHROUGH*/
				case EOB_ACT_END_OF_FILE:
					{
					if(yywrap( yyscanner))
						return 0;
					if(!yyg->yy_did_buffer_switch_on_eof)
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}
				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *)yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if(!YY_CURRENT_BUFFER) {
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE = yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state(yyscanner);
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if(YY_CURRENT_BUFFER == new_buffer )
		return;

	if(YY_CURRENT_BUFFER ) {
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if(!b)
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *)yyalloc((yy_size_t) (b->yy_buf_size + 2) , yyscanner);
	if(!b->yy_ch_buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");
	b->yy_is_our_buffer = 1;
	yy_init_buffer(b, file , yyscanner);
	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if(! b )
		return;

	if(b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if(b->yy_is_our_buffer)
		yyfree((void *)b->yy_ch_buf , yyscanner);

	yyfree((void *)b , yyscanner);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yy_flush_buffer(b , yyscanner);
	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if(b != YY_CURRENT_BUFFER) {
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if(!b)
		return;
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if(b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if(new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if(YY_CURRENT_BUFFER) {
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if(YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if(!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if(yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if(YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner);
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if(!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if(!yyg->yy_buffer_stack)
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memzero(yyg->yy_buffer_stack, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if(yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1) {

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if(!yyg->yy_buffer_stack)
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memzero(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if(size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if(! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if(!buf)
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for(i = 0; i < _yybytes_len; ++i)
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if(!b)
		YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

	/* It's okay to grow etc. this buffer, and we should throw it away when we're done. */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
	#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf(stderr, "%s\n", msg);
	exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do { \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} while(0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra(yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if(! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if(! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng(yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char * yyget_text(yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if(!YY_CURRENT_BUFFER)
           YY_FATAL_ERROR("yyset_lineno called with no buffer");
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if(!YY_CURRENT_BUFFER)
           YY_FATAL_ERROR("yyset_column called with no buffer");
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str;
}

int yyget_debug(yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval(yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE * yyget_lloc(yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if(ptr_yy_globals == NULL) {
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc(sizeof(struct yyguts_t), NULL);

    if(*ptr_yy_globals == NULL) {
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memzero(*ptr_yy_globals, sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if(ptr_yy_globals == NULL) {
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t)yyalloc(sizeof( struct yyguts_t ), &dummy_yyguts);

    if(*ptr_yy_globals == NULL) {
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memzero(*ptr_yy_globals, sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy(yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER) {
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for(i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for(n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void * yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return SAlloc::M(size);
}

void * yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return SAlloc::R(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	SAlloc::F((char *)ptr); /* see yyrealloc() for(char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 288 "C:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) 
{ 
    slfprintf_stderr("[SQL-Lexer-Error] %s\n",msg); 
    return 0; 
}

